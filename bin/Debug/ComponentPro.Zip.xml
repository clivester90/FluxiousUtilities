<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.Zip</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.Compression.CompressionLevel">
            <summary>
            Specifies the compression levels.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.CompressionLevel.None">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.CompressionLevel.Low">
            <summary>
            Low compression rate, fast.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.CompressionLevel.Medium">
            <summary>
            Medium compression rate. normal.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.CompressionLevel.High">
            <summary>
            Slow compression and maximum compression rate.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.ArchiverBase">
            <summary>
            Represents a base class for <see cref="T:ComponentPro.Compression.Zip"/>, <see cref="T:ComponentPro.Compression.Tar"/>, <see cref="T:ComponentPro.Compression.Tgz"/>, and <see cref="T:ComponentPro.Compression.Gzip"/>.
            </summary>
            <remarks>
            The <see cref="T:ComponentPro.Compression.RealTimeZip"/> does not inherit from this base class.
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds files from the specified source directory on the specified source file system to the specified directory within the archive.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to add.</param>
            <param name="sourceDirectoryPath">The path and name of the directory on the <paramref name="sourceFileSystem">source file system</paramref> where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(ftpSystem, "/MyDir/*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles(ftpSystem, "", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles(ftpSystem, "", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(@"C:\MyDir\*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles("", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles("", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="sourceFilesToAdd">The list of files and directories to add. 
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects (e.g. <code>AddFiles(new string[] {"c:\data\file1", "c:\text\doc.txt", "c:\dir1" }, ...)</code> or <code>AddFiles(new object[] {"file1", fileInfo1, fileInfo2 }, ...)</code>). This cannot be null or empty.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(ComponentPro.IO.SearchFileList,System.String)">
            <summary>
            Adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="fileList">The list of files and directories to add.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(ComponentPro.IO.SearchFileList,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="fileList">The list of files and directories to add.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition is the combination of the masks, if found, in the <paramref name="localDirectoryPath"/> and the <paramref name="searchCondition"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode)">
            <summary>
            Adds files from the specified local directory that match the specified search pattern to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to add files to this archive.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be added.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(System.String,System.String)">
            <summary>
            Adds all files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(System.String,System.Boolean)">
            <summary>
            Adds all files from the specified local directory to the current working directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFiles(System.String)">
            <summary>
            Adds all files from the specified local directory to the current working directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddDirectory(System.String,System.Boolean)">
            <summary>
            Adds an entire directory or a file from the disk file system to the current working directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path of the directory on the disk file system to add files to this archive.</param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddDirectory(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode)">
            <summary>
            Adds an entire directory or a file from the specified source file system to the specified directory in the archive.
            </summary>
            <param name="archiveDirectoryPath">The path of the archive directory to store added files.</param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <param name="localDirectoryPath">The path of the local directory to add files to the archive.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddDirectory(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds an entire directory or a file from the specified source file system to the archive.
            </summary>
            <param name="archiveDirectoryPath">The path of the archive directory to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="localDirectoryPath">The path of the local directory to add files to the archive.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddDirectory(ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Adds an entire directory or a file from the specified source file system to the current working directory in the archive.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to add files to the archive.</param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddDirectory(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean)">
            <summary>
            Adds an entire directory or a file from the specified source file system to the archive.
            </summary>
            <param name="archiveDirectoryPath">The path of the archive directory to store added files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to add files to the archive.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddDirectory(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds an entire directory or a file from the specified source file system to the archive.
            </summary>
            <param name="archiveDirectoryPath">The path of the archive directory to store added files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to add files to the archive.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.OnAddFilesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.ArchiverBase.AddFilesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous adds files from the specified source directory on the specified source file system to the specified directory within the archive.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to add.</param>
            <param name="sourceDirectoryPath">The path and name of the directory on the <paramref name="sourceFileSystem">source file system</paramref> where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(ftpSystem, "/MyDir/*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles(ftpSystem, "", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles(ftpSystem, "", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronous adds files from the specified source directory on the specified source file system to the specified directory within the archive.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to add.</param>
            <param name="sourceDirectoryPath">The path and name of the directory on the <paramref name="sourceFileSystem">source file system</paramref> where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(ftpSystem, "/MyDir/*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles(ftpSystem, "", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles(ftpSystem, "", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(@"C:\MyDir\*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles("", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles("", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronous adds files from the specified source directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(@"C:\MyDir\*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles("", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles("", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="sourceFilesToAdd">The list of files and directories to add. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This cannot be null or empty.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="sourceFilesToAdd">The list of files and directories to add. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This cannot be null or empty.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(ComponentPro.IO.SearchFileList,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="fileList">The list of files and directories to add.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(ComponentPro.IO.SearchFileList,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="fileList">The list of files and directories to add.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition is the combination of the masks, if found, in the <paramref name="localDirectoryPath"/> and the <paramref name="searchCondition"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition is the combination of the masks, if found, in the <paramref name="localDirectoryPath"/> and the <paramref name="searchCondition"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the current directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFilesAsync(System.String,System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the current directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFile(System.Byte[],System.Int32,System.String)">
            <summary>
            Adds data stored in the specified buffer to the archive file.
            </summary>
            <param name="archiveItemName">The file name that will be used to store data from the memory buffer.</param>
            <param name="buffer">The buffer to add data from.</param>
            <param name="count">The number of bytes to add or -1 to add the whole buffer.</param>
            <remarks>
            <p>
            This compresses data stored in the specified buffer and add it as a file with the given <paramref name="archiveItemName"/> to the archive.
            </p>
            <p>
            If <see cref="P:ComponentPro.Compression.ArchiverBase.FileName"/> does not exits, it will be created and then the files will be added.
            </p>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <returns>The number of bytes added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> or <paramref name="archiveItemName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is out of valid range or <paramref name="archiveItemName"/> contains invalid path characters or is empty.</exception>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileFromString(System.String,System.String)">
            <summary>
            Adds string to the archive.
            </summary>
            <param name="archiveItemName">Specifies file name that will be used to store string.</param>
            <param name="s">String to add data from.</param>
            <remarks>
            Use AddFromString to compress string to the file inside the archive. 
            <para>If some errors occurs an exception will be raised.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> or <paramref name="archiveItemName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="s"/> is empty or <paramref name="archiveItemName"/> contains invalid path characters or is empty.</exception>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFile(System.String)">
            <summary>
            Adds a file to the archive. File path within the archive will be determined by the <see cref="P:ComponentPro.Compression.ArchiverBase.PathStoringMode"/> property.
            </summary>
            <param name="localFileName">The path to the local file on disk to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localFileName"/> is null reference (or Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localFileName"/> contains invalid path characters or is empty.</exception>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFile(System.String,System.String)">
            <summary>
            Adds the specified file to the archive file.
            </summary>
            <param name="localFileName">The path to the local file on disk to add.</param>
            <param name="archiveItemName">The item file name in the archive.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="localFileName"/> is null reference (or Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localFileName"/> contains invalid path characters or is empty.</exception>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFile(ComponentPro.IO.FileSystem,System.String,System.String)">
            <summary>
            Adds the specified source file on the source file system to the archive.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileName">Source file path.</param>
            <param name="archiveItemName">The archive item name.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFile(ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Adds the specified source file on the source file system to the archive.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileName">Source file path.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFile(ComponentPro.IO.FileInfoBase,System.String)">
            <summary>
            Adds the specified source file on the source file system to the archive.
            </summary>
            <param name="sourceFile">Source file information.</param>
            <param name="archiveItemName">The item file name in the archive.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFile(ComponentPro.IO.FileInfoBase)">
            <summary>
            Adds the specified source file on the source file system to the archive.
            </summary>
            <param name="sourceFile">Source file information.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFile(System.IO.Stream,System.String)">
            <summary>
            Adds data stored in the specified stream to the archive file.
            </summary>
            <param name="archiveItemName">The item file name in the archive.</param>
            <param name="stream">The stream object containing data to compress.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="archiveItemName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="archiveItemName"/> contains invalid path characters or is empty.</exception>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.OnCloseCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.ArchiverBase.CloseCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.CloseAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously closes the archive.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.CloseAsync(System.Object)">
            <summary>
            Asynchronously closes the archive.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.OnAddFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.ArchiverBase.AddFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously adds a file to the archive. File path within the archive will be determined by the <see cref="P:ComponentPro.Compression.ArchiverBase.PathStoringMode"/> property.
            </summary>
            <param name="localFileName">The path to the local file on disk to add.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="localFileName"/> is null reference (or Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localFileName"/> contains invalid path characters or is empty.</exception>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(System.String,System.Object)">
            <summary>
            Asynchronously adds a file to the archive. File path within the archive will be determined by the <see cref="P:ComponentPro.Compression.ArchiverBase.PathStoringMode"/> property.
            </summary>
            <param name="localFileName">The path to the local file on disk to add.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="localFileName"/> is null reference (or Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localFileName"/> contains invalid path characters or is empty.</exception>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously adds the specified file to the archive file.
            </summary>
            <param name="localFileName">The path to the local file on disk to add.</param>
            <param name="archiveItemName">The item file name in the archive.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="localFileName"/> is null reference (or Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localFileName"/> contains invalid path characters or is empty.</exception>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously adds the specified file to the archive file.
            </summary>
            <param name="sourceFileName">The path to the local file on disk to add.</param>
            <param name="archiveItemName">The item file name in the archive.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName"/> is null reference (or Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceFileName"/> contains invalid path characters or is empty.</exception>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously adds the specified source file on the source file system to the archive.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileName">Source file path.</param>
            <param name="archiveItemName">The archive item name.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync" />
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Object)">
            <summary>
            Asynchronously adds the specified source file on the source file system to the archive.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileName">Source file path.</param>
            <param name="archiveItemName">The archive item name.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync" />
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(ComponentPro.IO.FileSystem,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously adds the specified source file on the source file system to the archive.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileName">Source file path.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync" />
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(ComponentPro.IO.FileSystem,System.String,System.Object)">
            <summary>
            Asynchronously adds the specified source file on the source file system to the archive.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFileName">Source file path.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync" />
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(System.Byte[],System.Int32,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously adds data stored in the specified buffer to the archive file.
            </summary>
            <param name="archiveItemName">The file name that will be used to store data from the memory buffer.</param>
            <param name="buffer">The buffer to add data from.</param>
            <param name="count">The number of bytes to add or -1 to add the whole buffer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> or <paramref name="archiveItemName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is out of valid range or <paramref name="archiveItemName"/> contains invalid path characters or is empty.</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(System.Byte[],System.Int32,System.String,System.Object)">
            <summary>
            Asynchronously adds data stored in the specified buffer to the archive file.
            </summary>
            <param name="archiveItemName">The file name that will be used to store data from the memory buffer.</param>
            <param name="buffer">The buffer to add data from.</param>
            <param name="count">The number of bytes to add or -1 to add the whole buffer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> or <paramref name="archiveItemName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is out of valid range or <paramref name="archiveItemName"/> contains invalid path characters or is empty.</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(System.IO.Stream,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Adds data stored in the specified stream to the archive file.
            </summary>
            <param name="archiveItemName">The item file name in the archive.</param>
            <param name="stream">The stream object containing data to compress.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="archiveItemName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="archiveItemName"/> contains invalid path characters or is empty.</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Adds data stored in the specified stream to the archive file.
            </summary>
            <param name="archiveItemName">The item file name in the archive.</param>
            <param name="stream">The stream object containing data to compress.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="archiveItemName"/> is null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="archiveItemName"/> contains invalid path characters or is empty.</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(ComponentPro.IO.FileInfoBase,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously adds the specified source file on the source file system to the archive.
            </summary>
            <param name="sourceFile">Source file information.</param>
            <param name="archiveItemName">The item file name in the archive.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync" />
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.AddFileAsync(ComponentPro.IO.FileInfoBase,System.String,System.Object)">
            <summary>
            Asynchronously adds the specified source file on the source file system to the archive.
            </summary>
            <param name="sourceFile">Source file information.</param>
            <param name="archiveItemName">The item file name in the archive.</param>
            <remarks>
            <p>
            All zip files will automatically be created in the Zip64 zip file format if the limitation of the regular Zip format are reached.
            </p>
            </remarks>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync" />
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.OnExtractFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.ArchiverBase.ExtractFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(System.String,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously extracts a file stored withing the archive to a <see cref="T:System.IO.Stream">Stream</see> object descendant.
            </summary>
            <param name="sourceFilePath">Name of the file being extracted.</param>
            <param name="destStream">Output stream to extract data to.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(System.String,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously extracts a file stored withing the archive to a <see cref="T:System.IO.Stream">Stream</see> object descendant.
            </summary>
            <param name="sourceFilePath">Name of the file being extracted.</param>
            <param name="destStream">Output stream to extract data to.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously extracts the specified file.
            </summary>
            <param name="sourceFilePath">The path to the file within the archive to extract.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously extracts the specified file.
            </summary>
            <param name="sourceFilePath">The path to the file within the archive to extract.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously extracts the specified file.
            </summary>
            <param name="sourceFilePath">The path to the file within the archive to extract.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(System.String,ComponentPro.IO.FileSystem,System.String,System.Object)">
            <summary>
            Asynchronously extracts the specified file.
            </summary>
            <param name="sourceFilePath">The path to the file within the archive to extract.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(ComponentPro.IO.FileInfoBase,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously extracts the specified file to the specified destination file on the local disk.
            </summary>
            <param name="sourceFile">Information of the source file to extract.</param>
            <param name="destinationFileName">The destination file on the local disk.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(ComponentPro.IO.FileInfoBase,System.String,System.Object)">
            <summary>
            Asynchronously extracts the specified file to the specified destination file on the local disk.
            </summary>
            <param name="sourceFile">Information of the source file to extract.</param>
            <param name="destinationFileName">The destination file on the local disk.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(ComponentPro.IO.FileInfoBase,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously extracts the specified file to the specified data stream.
            </summary>
            <param name="sourceFile">Information of the source file to extract.</param>
            <param name="destStream">The stream to store the extracted data.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(ComponentPro.IO.FileInfoBase,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously extracts the specified file to the specified data stream.
            </summary>
            <param name="sourceFile">Information of the source file to extract.</param>
            <param name="destStream">The stream to store the extracted data.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously extracts the specified file.
            </summary>
            <param name="file">Information of the file to extract.</param>
            <param name="destinationFile">Information of the destination file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileAsync(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase,System.Object)">
            <summary>
            Asynchronously extracts the specified file.
            </summary>
            <param name="file">Information of the file to extract.</param>
            <param name="destinationFile">Information of the destination file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFile(ComponentPro.IO.FileInfoBase,System.String)">
            <summary>
            Extracts the specified file to the specified destination file on the local disk.
            </summary>
            <param name="sourceFile">Information of the source file within the archive to extract.</param>
            <param name="destinationFileName">The destination file path and name on the local disk.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFile(ComponentPro.IO.FileInfoBase,System.IO.Stream)">
            <summary>
            Extracts the specified file to the specified data stream.
            </summary>
            <param name="sourceFile">Information of the source file within the archive to extract.</param>
            <param name="destStream">The stream to store the extracted data.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFile(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase)">
            <summary>
            Extracts the specified file.
            </summary>
            <param name="sourceFile">Information of the file within the archive to extract.</param>
            <param name="destinationFile">Information of the destination file on any file system EXCEPT this archive.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFile(System.String,System.Byte[]@)">
            <summary>
            Extracts a file stored withing the archive to a <paramref name="buffer">byte array</paramref>.
            </summary>
            <param name="sourceFilePath">The path and name of the file within the archive being extracted.</param>
            <param name="buffer">An array of bytes where data will be extracted. The method allocates memory for the buffer.</param>
            <returns>The number of bytes extracted to the <paramref name="buffer">buffer</paramref>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFile(System.String,System.IO.Stream)">
            <summary>
            Extracts a file stored withing the archive to a <see cref="T:System.IO.Stream">Stream</see> object descendant.
            </summary>
            <param name="sourceFilePath">Name of the file being extracted.</param>
            <param name="destStream">Output stream to extract data to.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFile(System.String,System.String)">
            <summary>
            Extracts the specified file to the destination local file.
            </summary>
            <param name="sourceFilePath">The path and name of the file within the archive to extract.</param>
            <param name="destinationFilePath">The destination local file path.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFile(System.String,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Extracts the specified file to the destination file on the specified file system.
            </summary>
            <param name="sourceFilePath">The path to the file within the archive to extract.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFileToString(System.String,System.String@)">
            <summary>
            Extracts a file stored withing the archive into a string.
            </summary>
            <param name="fileName">The name of the file being extracted.</param>
            <param name="text">String to extract plain text data to.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAll(System.String)">
            <summary>
            Extracts all files and directories within the archive.
            </summary>
            <param name="destinationDirectoryPath">The path of the destination local directory.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAll(System.String,ComponentPro.IO.FileOverwriteMode)">
            <summary>
            Extracts all files and directories within the archive.
            </summary>
            <param name="destinationDirectoryPath">The path of the destination local directory.</param>
            <param name="fileExistsAction">The action to resolve file existing issue.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAll(System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Extracts all files and directories within the archive.
            </summary>
            <param name="destinationDirectoryPath">The path of the destination local directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAll(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.FileOverwriteMode)">
            <summary>
            Extracts all files and directories within the archive.
            </summary>
            <param name="destinationFileSystem">The destination file system. It can be a ZIP, SFTP, FTP, SCP or your custom file system.</param>
            <param name="destinationDirectoryPath">The path of the local directory.</param>
            <param name="fileExistsAction">The action to resolve file existing issue.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAll(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Extracts all files and directories within the archive.
            </summary>
            <param name="destinationFileSystem">The destination file system. It can be a ZIP, SFTP, FTP, SCP or your custom file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFiles(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Extracts files from the specified directory within the archive to the destination directory on the destination file system.
            </summary>
            <param name="archiveDirectoryPath">The path and name of the archive directory where the files will be extracted to the destination folder. 
            When the parameter <paramref name="filesToExtract"/> is null reference, this parameter can include filtering masks to limit the files that are extracted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be extracted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be extracted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be extracted.
            If no masks specified, the whole content of the archive directory should be extracted. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            </param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <c>ExtractFiles("/MyDir/*.txt", true, null, tarSystem, "/ZipDir" ...)</c> - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="filesToExtract">The list of files and directories to extract, 
            or null to extract files in the <paramref name="archiveDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="destinationFileSystem">The destination file system that receives the files from this archive.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this archive.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFiles(System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Extracts files from the specified directory within the archive to the destination directory on the destination file system.
            </summary>
            <param name="filesToTransfer">The list of filenames or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to extract. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This cant be null or empty.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this archive.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this archive.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFiles(ComponentPro.IO.SearchFileList,System.String)">
            <summary>
            Extracts files from the specified directory within the archive to the local directory.
            </summary>
            <param name="fileList">The search file list.</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this archive.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFiles(ComponentPro.IO.SearchFileList,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Extracts files from the specified directory within the archive to the local directory.
            </summary>
            <param name="fileList">The search file list.</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this archive.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFiles(ComponentPro.IO.SearchFileList,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Extracts files from the specified directory within the archive to the local directory.
            </summary>
            <param name="fileList">The search file list.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this archive.</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this archive.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFiles(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Extracts files from the specified directory within the archive to the local directory.
            </summary>
            <param name="archiveDirectoryPath">The path and name of the archive directory where the files will be extracted to the destination folder. 
            This parameter can include filtering masks to limit the files that are extracted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be extracted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be extracted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be extracted.
            If no masks specified, the whole content of the archive directory should be extracted. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            </param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <c>ExtractFiles("/MyDir/*.txt", true, null, tarSystem, "/ZipDir" ...)</c> - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="filesToExtract">The list of files and directories to extract, 
            or null to extract files in the <paramref name="archiveDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this archive.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFiles(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Extracts files from the specified list to the local directory.
            </summary>
            <param name="filesToTransfer">The list of filenames or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to extract. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This cant be null or empty.</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this archive.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Extracts files from the specified directory within the archive to the local directory.
            </summary>
            <param name="archiveDirectoryPath">The path and name of the archive directory where the files will be extracted to the destination folder. 
            This parameter can include filtering masks to limit the files that are extracted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be extracted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be extracted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be extracted.
            If no masks specified, the whole content of the archive directory should be extracted. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be extracted. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be extracted; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this archive.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFiles(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Extracts files in the specified directory within the archive to the local directory.
            </summary>
            <param name="archiveDirectoryPath">The path and name of the archive directory where the files will be extracted to the destination folder. 
            This parameter can include filtering masks to limit the files that are extracted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be extracted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be extracted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be extracted.
            If no masks specified, the whole content of the archive directory should be extracted. The final search condition is a combination of the masks, if found, in the <paramref name="archiveDirectoryPath"/> and the <paramref name="searchCondition"/> parameters.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be extracted. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be extracted; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this archive.</param>
            <param name="searchCondition">The search string to match against the names of files in path.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFiles(System.String,System.String)">
            <summary>
            Extracts all files in the specified directory within the archive to the specified local directory on the disk file system.
            </summary>
            <param name="archiveDirectoryPath">The path and name of the archive directory where the files will be extracted to the destination folder. 
            This parameter can include filtering masks to limit the files that are extracted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be extracted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be extracted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be extracted.
            If no masks specified, the whole content of the archive directory should be extracted. The final search condition is a combination of the masks, if found, in the <paramref name="archiveDirectoryPath"/> and the <paramref name="searchCondition"/> parameters.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be extracted. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be extracted; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this archive.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.OnExtractFilesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.ArchiverBase.ExtractFilesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="archiveDirectoryPath">The path and name of the archive directory where the files will be extracted to the destination folder. 
            When the parameter <paramref name="filesToExtract"/> is null reference, this parameter can include filtering masks to limit the files that are extracted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be extracted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be extracted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be extracted.
            If no masks specified, the whole content of the archive directory should be extracted. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            </param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <c>ExtractFiles("/MyDir/*.txt", true, null, tarSystem, "/ZipDir" ...)</c> - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="filesToExtract">The list of files and directories to extract, 
            or null to extract files in the <paramref name="archiveDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="archiveDirectoryPath">The path and name of the archive directory where the files will be extracted to the destination folder. 
            When the parameter <paramref name="filesToExtract"/> is null reference, this parameter can include filtering masks to limit the files that are extracted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be extracted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be extracted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be extracted.
            If no masks specified, the whole content of the archive directory should be extracted. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            </param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <c>ExtractFiles("/MyDir/*.txt", true, null, tarSystem, "/ZipDir" ...)</c> - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="filesToExtract">The list of files and directories to extract, 
            or null to extract files in the <paramref name="archiveDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="filesToExtract">The list of filenames or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to extract. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="filesToExtract">The list of filenames or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to extract. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="archiveDirectoryPath">The path and name of the archive directory where the files will be extracted to the destination folder. 
            This parameter can include filtering masks to limit the files that are extracted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be extracted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be extracted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be extracted.
            If no masks specified, the whole content of the archive directory should be extracted. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            </param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <c>ExtractFiles("/MyDir/*.txt", true, null, tarSystem, "/ZipDir" ...)</c> - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="filesToExtract">The list of files and directories to extract, 
            or null to extract files in the <paramref name="archiveDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="archiveDirectoryPath">The path and name of the archive directory where the files will be extracted to the destination folder. 
            This parameter can include filtering masks to limit the files that are extracted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be extracted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be extracted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be extracted.
            If no masks specified, the whole content of the archive directory should be extracted. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            </param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <c>ExtractFiles("/MyDir/*.txt", true, null, tarSystem, "/ZipDir" ...)</c> - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="filesToExtract">The list of files and directories to extract, 
            or null to extract files in the <paramref name="archiveDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="filesToExtract">The list of filenames or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to extract. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="filesToExtract">The list of filenames or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to extract. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="archiveDirectoryPath">The path of the directory within the archive containing files and subdirectories to extract.</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="archiveDirectoryPath">The path of the directory within the archive containing files and subdirectories to extract.</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many setting to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts files in the specified directory within the archive that match the specified search condition to the destination directory on the destination file system.
            </summary>
            <param name="archiveDirectoryPath">The path of the directory within the archive containing files and subdirectories to extract.</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchCondition">The search string to match against the names of files in path.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously extracts files in the specified directory within the archive that match the specified search condition to the destination directory on the destination file system.
            </summary>
            <param name="archiveDirectoryPath">The path of the directory within the archive containing files and subdirectories to extract.</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchCondition">The search string to match against the names of files in path.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts all files in the specified directory within the archive to the specified local directory on the disk file system.
            </summary>
            <param name="archiveDirectoryPath">The path of the directory within the archive containing files and subdirectories to extract.</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously extracts all files in the specified directory within the archive to the specified local directory on the disk file system.
            </summary>
            <param name="archiveDirectoryPath">The path of the directory within the archive containing files and subdirectories to extract.</param>
            <param name="destinationDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(ComponentPro.IO.SearchFileList,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive.
            </summary>
            <param name="fileList">The list of files to extract.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(ComponentPro.IO.SearchFileList,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="fileList">The list of files to extract.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(ComponentPro.IO.SearchFileList,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive.
            </summary>
            <param name="fileList">The list of files to extract.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this archive.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractFilesAsync(ComponentPro.IO.SearchFileList,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously extracts files from the specified directory within the archive that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="fileList">The list of files to extract.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.OnExtractAllCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.ArchiverBase.ExtractAllCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAllAsync(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts all files and directories within the archive.
            </summary>
            <param name="destinationFileSystem">The destination file system. It can be a ZIP, SFTP, FTP, SCP or your custom file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the file system.</param>
            <param name="options">Transfer options.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAllAsync(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously extracts all files and directories within the archive.
            </summary>
            <param name="destinationFileSystem">The destination file system. It can be a ZIP, SFTP, FTP, SCP or your custom file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the file system.</param>
            <param name="options">Transfer options.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAllAsync(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.FileOverwriteMode,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts all files and directories within the archive.
            </summary>
            <param name="destinationFileSystem">The destination file system. It can be a ZIP, SFTP, FTP, SCP or your custom file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the file system.</param>
            <param name="fileExistsAction">The action to resolve file existing issue.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAllAsync(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.FileOverwriteMode,System.Object)">
            <summary>
            Asynchronously extracts all files and directories within the archive.
            </summary>
            <param name="destinationFileSystem">The destination file system. It can be a ZIP, SFTP, FTP, SCP or your custom file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the file system.</param>
            <param name="fileExistsAction">The action to resolve file existing issue.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAllAsync(System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts all files and directories within the archive.
            </summary>
            <param name="destinationDirectoryPath">The path of the destination local directory.</param>
            <param name="options">The path of the destination directory on the file system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAllAsync(System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously extracts all files and directories within the archive.
            </summary>
            <param name="destinationDirectoryPath">The path of the destination local directory.</param>
            <param name="options">The path of the destination directory on the file system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAllAsync(System.String,ComponentPro.IO.FileOverwriteMode,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts all files and directories within the archive.
            </summary>
            <param name="destinationDirectoryPath">The path of the destination local directory.</param>
            <param name="fileExistsAction">The action to resolve file existing issue.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAllAsync(System.String,ComponentPro.IO.FileOverwriteMode,System.Object)">
            <summary>
            Asynchronously extracts all files and directories within the archive.
            </summary>
            <param name="destinationDirectoryPath">The path of the destination local directory.</param>
            <param name="fileExistsAction">The action to resolve file existing issue.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAllAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously extracts all files and directories within the archive.
            </summary>
            <param name="destinationDirectoryPath">The path of the destination local directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ExtractAllAsync(System.String,System.Object)">
            <summary>
            Asynchronously extracts all files and directories within the archive.
            </summary>
            <param name="destinationDirectoryPath">The path of the destination local directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.CreateFileInfo(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.Compression.ArchiveItem"/> class and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="originalPath">The original path.</param>
            <param name="isFile">Indicates whether this is a file.</param>
            <returns>The newly created <see cref="T:ComponentPro.Compression.ArchiveItem"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.CreateFileInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information. When the specified item exists the <see cref="T:ComponentPro.IO.FileInfoBase"/> instance will contain the information of the existing item.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="parts">Indicates what information of the file will be filled.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>        
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ResolveSymlinkSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Not supported.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>        
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.CreateSymlinkSync(System.String,System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Not supported.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="target">The target</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>        
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetSupportedChecksumTypes">
            <summary>
            Returns the supported checksum types.
            </summary>
            <returns>The supported checksum types.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetFileChecksumSync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns the calculated checksum of the specified type.
            </summary>
            <param name="type">The checksum type.</param>
            <param name="path">The path to the file to calculate checksum.</param>
            <param name="offset">The file offset.</param>
            <param name="length">The number of bytes to calculate.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The calculated checksum.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.CreateItemCollection">
            <summary>
            Creates a collection of the <see cref="T:ComponentPro.IO.FileInfoBase"/>.
            </summary>
            <returns>The collection of the <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetStreamForWriting(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns a Stream for writing data to the specified file.
            </summary>
            <param name="file">The file to write to.</param>
            <param name="offset">The position at which data will be written to.</param>
            <param name="asyncOp">The asynchronous operation object.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetStreamForReading(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns the stream object for reading the specified file.
            </summary>
            <param name="file">The file to read.</param>
            <param name="offset"></param>
            <param name="asyncOp"></param>
            <returns>The stream for reading the file.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Clone">
            <summary>
            Returns a copy of the current file system. Zip file system does not support Clonning. Calling this method will raise <see cref="T:System.NotSupportedException"/> exception.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.DeleteDirectory(System.String)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">The path of the directory to delete.</param>
            <remarks>
            It will not raise any exception if the specified directory not found within the archive. To check if a directory exists, use <see cref="M:ComponentPro.Compression.ArchiverBase.DirectoryExists(System.String)"/> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.DeleteDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <summary>
            Deletes the specified empty directory.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="progressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ProcessException(System.Exception)">
            <summary>
            Processes and returns an exception.
            </summary>
            <param name="x">The input exception.</param>
            <returns>The processed exception.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <param name="directoryPath">The path to test.</param>
            <returns><c>true</c> if path refers to an existing directory; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.DirectoryExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <param name="path">The path to test.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the specified directory exists; otherwise false.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.FileExists(System.String)">
            <summary>
            Determines whether the given file path refers to an existing file.
            </summary>
            <param name="filePath">The file path to test.</param>
            <returns><c>true</c> if path refers to an existing file; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.FileExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if path is a null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of path.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ListAll">
            <summary>
            Lists all files and subdirectories within the archive.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.Compression.ArchiveItem"/>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ListAll(System.String)">
            <summary>
            Lists files and subdirectories within the archive that match the specified search condition.
            </summary>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>A collection of <see cref="T:ComponentPro.Compression.ArchiveItem"/>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ListDirectorySync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.IO.ListDirFlags,System.ComponentModel.AsyncOperation)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition. This returns the list of files and subdirectories in the first level of the specified directory only.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <param name="basePath">The base path for the <paramref name="searchCondition"/>.</param>
            <param name="searchCondition">The search condition.</param>
            <param name="flags">The listing flags.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The list of files or directories found.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ListNameSync(System.String,ComponentPro.IO.SearchCondition,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.OnProgress(ComponentPro.IO.FileSystemProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.FileSystemProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.TransferDataFromStreamToFileSync(ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <summary>
            This allow you to copy data from a stream or a <paramref name="currentProgressFileItem"/> to a file on this system.
            </summary>
            <param name="currentProgressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="source">The source stream.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Open(System.IO.Stream,System.Boolean)">
            <summary>
            Opens or creates an archive file within a stream.
            </summary>
            <param name="stream">The stream descendant object with the archive contents.</param>
            <param name="create">A boolean flag indicating whether a file should be created.</param>
            <remarks>
            <p>
            If <paramref name="create"/> parameter is set to <b>true</b>, UltimateZip will create and open it. Open sets <see cref="P:ComponentPro.Compression.ArchiverBase.Opened"/> to <b>true</b>.
            </p>
            <p>
            To close the archive file, just call the <see cref="M:ComponentPro.Compression.ArchiverBase.Close"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens or creates an archive file with the specified <paramref name="fileMode"/> and <paramref name="fileAccess"/> parameters.
            </summary>
            <param name="fileMode">The <see cref="T:System.IO.FileMode">open file mode</see>.</param>
            <param name="fileAccess">The <see cref="T:System.IO.FileAccess">file access mode</see>.</param>
            <param name="archiveFileName">The archive name.</param>
            <remarks>
            <p>
            If file specified by the <paramref name="archiveFileName"/> parameter does not exists and <paramref name="fileMode"/> parameter 
            is set to Create (this is by default) then UltimateZip will create and open it. 
            Open sets <see cref="P:ComponentPro.Compression.ArchiverBase.Opened"/> to <b>true</b>.
            </p>
            <p>
            To close the archive file, just call the <see cref="M:ComponentPro.Compression.ArchiverBase.Close"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Open(System.String)">
            <summary>
            Opens or creates the specified <paramref name="archiveFileName">archive file</paramref>.
            </summary>
            <param name="archiveFileName">The path to the archive file.</param>
            <remarks>
            <p>
            If file specified by the <paramref name="archiveFileName"/> property does not exists then UltimateZip will create and open it. Open sets <see cref="P:ComponentPro.Compression.ArchiverBase.Opened"/> to <b>true</b>.
            </p>
            <p>
            To close the archive file, just call the <see cref="M:ComponentPro.Compression.ArchiverBase.Close"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens or creates an archive file specified by the <paramref name="archiveFileName"/> with the specified <paramref name="fileMode"/> parameter.
            </summary>
            <param name="fileMode">The <see cref="T:System.IO.FileMode">open file mode</see>.</param>
            <param name="archiveFileName">The archive name.</param>
            <remarks>
            <p>
            If file specified by the <see cref="P:ComponentPro.Compression.ArchiverBase.FileName"/> property does not exists and <paramref name="fileMode"/> 
            parameter is set to Create (this is by default) then 
            UltimateZip will create and open it. Open sets <see cref="P:ComponentPro.Compression.ArchiverBase.Opened"/> to <b>true</b>.
            </p>
            <p>
            To close the archive file, just call the <see cref="M:ComponentPro.Compression.ArchiverBase.Close"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens or creates an archive file with the specified <paramref name="fileMode"/>, <paramref name="fileAccess"/> and <paramref name="fileShare"/> parameters.
            </summary>
            <param name="fileMode">The <see cref="T:System.IO.FileMode">open file mode</see>.</param>
            <param name="fileAccess">The <see cref="T:System.IO.FileAccess">file access mode</see>.</param>
            <param name="fileShare">The <see cref="T:System.IO.FileShare">file share mode</see>.</param>
            <param name="fileName">The archive name.</param>
            <remarks>
            <p>
            If file specified by the <paramref name="fileName"/> property does not exists and <paramref name="fileMode"/> 
            parameter is set to Create (this is by default) then 
            UltimateZip will create and open it. Open sets <see cref="P:ComponentPro.Compression.ArchiverBase.Opened"/> to <b>true</b>.
            </p>
            <p>
            To close the archive file, just call the <see cref="M:ComponentPro.Compression.ArchiverBase.Close"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Create(System.String)">
            <summary>
            Creates a new archive file with the specified name. If the archive file already exists, it will be overwritten.
            </summary>
            <param name="archiveFileName">The archive file name.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Close">
            <summary>
            Closes the archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetFileCount">
            <summary>
            Returns the number of files in the archive file.
            </summary>
            <remarks>
            The archive file must be opened before you can use this property. If the archive does not exist, create it using the <see cref="O:Open"/> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Cancel(System.Object)">
            <summary>
            Cancels the current operation.
            </summary>
            <param name="state">The user-defined object associated with the file transfer operation, or null reference to cancel all the current file transfer operations.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.#ctor">
            <summary>
            Initializes new instance of the <see cref="T:ComponentPro.Compression.ArchiverBase"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Compression.ArchiverBase"/> class with a container.
            </summary>
            <param name="container">The container object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the container is null.</exception>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.#ctor(System.String)">
            <summary>
            Initializes new instance of the <see cref="T:ComponentPro.Compression.ArchiverBase"/> class and open or create a new archive file.
            </summary>
            <param name="archiveFile">The archive file name.</param>
            <remarks>
            If the specified <paramref name="archiveFile"/> already exists on the local disk UltimateZip opens it; otherwise it creates a new archive file with the specifed name.
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.ListAll(ComponentPro.IO.SearchCondition)">
            <summary>
            Searches the entire archive for files and subdirectories that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or null reference (Nothing in VB.NET) for searching all files and directories.</param>
            <returns>A collection of <see cref="T:ComponentPro.Compression.ArchiveItem"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.DeleteAll(System.String)">
            <summary>
            Deletes all files and directories within the archive.
            </summary>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.DeleteAll">
            <summary>
            Deletes all files and directories within the archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.DeleteAll(ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes all files and directories within the archive.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.DeleteFile(System.String)">
            <summary>
            Deletes a single file.
            </summary>
            <param name="path">The path of the file to delete.</param>
            <exception cref="T:ComponentPro.Compression.ZipException">If the specified not found or error while deleting the specified file.</exception>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.DeleteFileSync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The path to the file to delete.</param>
            <param name="progressFileItem">The <see cref="T:ComponentPro.IO.ProgressFileItem"/> object.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetItemInfo(System.String)">
            <summary>
            Gets the file information.
            </summary>
            <param name="path">The fully qualified file name.</param>
            <returns>An <see cref="T:ComponentPro.Compression.ArchiveItem"/> object, or a null reference if the file does not exist.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetItemInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetFileLength(System.String)">
            <summary>
            Gets the file length in bytes.
            </summary>
            <param name="filePath">The fully qualified file name.</param>
            <returns>The file length.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetFileLengthSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns the size of the specified file, in bytes.
            </summary>
            <param name="filePath">The path to the file to get size.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The length of the file.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetLastWriteTime(System.String)">
            <summary>
            Gets the date and time when archive item was last written to (last modified time).
            </summary>
            <param name="path">The file path.</param>
            <returns>The file last modification date and time.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetLastWriteTimeSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.Rename(System.String,System.String)">
            <summary>
            Renames an existing file within the archive.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.RenameSync(System.String,System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
            <param name="progressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current working directory in the archive.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.SetCurrentDirectorySync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Sets the current directory.
            </summary>
            <param name="path">The path to the new directory.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetCurrentDirectory">
            <summary>
            Gets the current working directory in the archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.GetCurrentDirectorySync(System.ComponentModel.AsyncOperation)">
            <summary>
            Returns the current directory.
            </summary>
            <param name="asyncOp">The async operation.</param>
            <returns>The current directory.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.CreateDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <summary>
            Creates the specified directory.
            </summary>
            <param name="path">The path to the directory to create.</param>
            <param name="currentProgressFile">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The path to the newly created directory.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.CreateDirectory(System.String)">
            <summary>
            Creates a new directory in the archive.
            </summary>
            <param name="path">The path to the directory to create.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to. 
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.OnSaveProgress(ComponentPro.Compression.SaveProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.ArchiverBase.SaveProgress"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.Compression.SaveProgressEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.TestFile(ComponentPro.Compression.ArchiveItem)">
            <summary>
            Tests the specified file. It throws an exception if errors found.
            </summary>
            <param name="fileInfo">The ArchiveItem object.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.TestFile(System.String)">
            <summary>
            Tests the specified file within the archive. It throws an exception if errors found.
            </summary>
            <param name="fileName">The file name.</param>
            <exception cref="T:ComponentPro.Compression.ZipException">If the specified file not found or any error detected.</exception>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.TestFileSync(System.String,System.ComponentModel.AsyncOperation)">
            <exclude/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.TestAllFiles">
            <summary>
            Tests all files within the archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.TestAllFiles(System.String)">
            <summary>
            Tests files that match the specified search pattern. It returns a list of errors or null if the archive is good.
            </summary>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.TestAllFiles(ComponentPro.IO.SearchCondition)">
            <summary>
            Tests files that match the specified search condition. It returns a list of errors or null if the archive is good.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.BeginUpdate">
            <summary>
            Begins a transaction.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.CancelUpdate">
            <summary>
            Cancels all transactions. Rollback current transaction started by the <see cref="M:ComponentPro.Compression.ArchiverBase.BeginUpdate"/> method. <b>CancelUpdate</b> clears all archive modifications made after calling <see cref="M:ComponentPro.Compression.ArchiverBase.BeginUpdate"/>. <b>CancelUpdate</b> sets <see cref="P:ComponentPro.Compression.ArchiverBase.InUpdate"/> property to <b>false</b>.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.EndUpdate">
            <summary>
            Ends the current transaction initiated by a call to the <see cref="M:ComponentPro.Compression.ArchiverBase.BeginUpdate"/> method.
            </summary>
            <remarks>Call <see cref="M:ComponentPro.Compression.ArchiverBase.CancelUpdate"/> to cancel archive modification.</remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.EndUpdate(ComponentPro.IO.FileSystemTransferStatistics)">
            <summary>
            Ends the current transaction.
            </summary>
            <param name="transferStatistics">The transfer statistics object.</param>
            <remarks>Call <see cref="M:ComponentPro.Compression.ArchiverBase.CancelUpdate"/> to cancel archive modification.</remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.SetAttributes(ComponentPro.IO.FileInfoBase,System.IO.FileAttributes)">
            <summary>
            Updates attributes of the specified file. An exception is thrown if the specified file does not exist. 
            </summary>
            <param name="info">File information.</param>
            <param name="attributes">New file attributes.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Updates attributes of the specified file. An exception is thrown if the specified file does not exist. 
            </summary>
            <param name="archiveItemPath">The path of the file to update attributes.</param>
            <param name="attributes">New file attributes.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.SetAttributes(System.String,System.IO.FileAttributes,System.UInt16)">
            <summary>
            Updates attributes of the specified file. An exception is thrown if the specified file does not exist. 
            </summary>
            <param name="archiveItemPath">The path of the file to update attributes.</param>
            <param name="attributes">New file attributes.</param>
            <param name="attrs">New internal file attributes.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.SetMultipleFilesAttributes(ComponentPro.IO.SearchCondition,System.IO.FileAttributes)">
            <summary>
            Updates attributes of multiple files.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="attributes">New attributes.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiverBase.SetMultipleFilesAttributes(System.String,System.IO.FileAttributes,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the attributes of the specified files.
            </summary>
            <param name="path">The path of the directory.</param>
            <param name="attributes">The file attributes.</param>
            <param name="recursive">Set attributes of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="E:ComponentPro.Compression.ArchiverBase.AddFilesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:AddFilesAsync"/> operation completes.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.AsyncOperation">
            <summary>
            Gets or sets the async operation.
            </summary>
            <excludeall/>
        </member>
        <member name="E:ComponentPro.Compression.ArchiverBase.CloseCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:CloseAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.ArchiverBase.AddFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:AddFileAsync"/> operation completes.
            </summary>
            <example src="TaskAsync/AddFileTaskAsync,Async/AddFileAsync" />
        </member>
        <member name="E:ComponentPro.Compression.ArchiverBase.ExtractFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ExtractFileAsync"/> operation completes.
            </summary>
            <example src="TaskAsync/ExtractFileTaskAsync,Async/ExtractFileAsync"/>
        </member>
        <member name="E:ComponentPro.Compression.ArchiverBase.ExtractFilesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ExtractFilesAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.ArchiverBase.ExtractAllCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ExtractAllAsync"/> operation completes.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>        
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.CanGetStreamForWriting">
            <summary>
            Returns a field indicating whether the system support getting stream for writting data to file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.CanGetStreamForReading">
            <summary>
            Returns a field indicating whether the system support getting stream for reading data from file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.FileSystemFeatures">
            <summary>
            Gets supported features.
            </summary>
            <exclude/>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.Size">
            <summary>
            Gets the size in bytes of the opened archive file.
            </summary>
            <remarks>
            The archive file must be opened before you can use this property. If the archive does not exist, create it using the <see cref="O:Open"/> method.
            <para> This property is read-only.</para>
            </remarks> 
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.InUpdate">
            <summary>
            Gets a boolean value indicating if an archive file is being updated.
            </summary>
            <remarks>
            The InUpdate property is set to <c>true</c> when a transaction is initiated by calling the <see cref="M:ComponentPro.Compression.ArchiverBase.BeginUpdate"/> method.
            Use the <see cref="P:ComponentPro.Compression.ArchiverBase.InUpdate"/> property to determine if the archive file is being updated. Call <see cref="M:ComponentPro.Compression.ArchiverBase.EndUpdate"/> if you need to force transaction system to complete current operation immediately.
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.Opened">
            <summary>
            Gets a boolean value indicating whether an archive file is opened.
            </summary>
            <remarks>
            Use Opened to determine if archive file is opened. 
            When Opened is <b>false</b>, the archive is closed. When Opened is <b>true</b>, archive file management is available.
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.OemCodePage">
            <summary>
            Gets the number of the OEM code page used to store and restore archive.
            </summary>
            <value>The OEM code page.</value>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.FileName">
            <summary>
            Gets the archive file name.
            </summary>
            <remarks>
            <see cref="P:ComponentPro.Compression.ArchiverBase.FileName"/> specifies the archive file to open or create by a call to the <see cref="O:Open"/> method.
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.FlushBuffers">
            <summary>
            Gets or sets the boolean value indicating whether to flush file buffers after any file modification and after extracting file from archive.
            </summary>
            <value>true to flush file buffers after any file modification and after extracting file from archive.</value>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.PathStoringMode">
            <summary>
            Gets or sets the path storing mode. It defines how path information will be stored for files and directories within the archive .
            </summary>
            <value>The path storing mode.</value>
        </member>
        <member name="P:ComponentPro.Compression.ArchiverBase.ShareMode">
            <summary>
            Gets or sets the <see cref="T:System.IO.FileShare"/> indicating the files being added to the archive will be opened for simultaneous access. The default value is <c>FileShare.ReadWrite</c>.
            </summary>
            <remarks>
            Set this option before calling the <see cref="O:AddFiles"/> methods.
            </remarks>
        </member>
        <member name="E:ComponentPro.Compression.ArchiverBase.SaveProgress">
            <summary>
            Occurs when the archive or archive item is being saved to the disk.
            This event is only fired when the archive is being saved, backedup before committing changes with the <see cref="M:ComponentPro.Compression.ArchiverBase.EndUpdate"/>,
            an unchanged file within the archive is being preserved, rolling back changes.
            To track progress of files adding/extracting to/from the archive, use the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.ArchiveItem">
            <summary>
            Represents an Archive Item within archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ArchiveItem.#ctor(ComponentPro.IO.FileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Compression.ArchiveItem"/> class with all default values.
            </summary>
            <param name="fileSystem">The owner file system.</param>
        </member>
        <member name="M:ComponentPro.Compression.ArchiveItem.UpdateFullName(System.String)">
            <summary>
            Updates the fully qualified name of the file or directory. Intended for advanced usage only.
            </summary>
            <param name="newFullName">The new full name.</param>
            <remarks>After this update, all properties of the class remain unchanged except the <see cref="P:ComponentPro.Compression.ArchiveItem.FullName"/> and <see cref="P:ComponentPro.Compression.ArchiveItem.Name"/> properties. To update the file, call the <see cref="M:ComponentPro.IO.FileInfoBase.Refresh"/> method.</remarks>
        </member>
        <member name="M:ComponentPro.Compression.ArchiveItem.ToString">
            <summary>
            Returns file name.
            </summary>
            <returns>The file name.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiveItem.ApplyPropertiesFromSync(ComponentPro.IO.FileInfoBase,System.ComponentModel.AsyncOperation)">
            <summary>
            Copies the properties from the specified source file to this file.
            </summary>
            <param name="source">The source file object.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiveItem.Reset">
            <summary>
            Resets the properties.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ArchiveItem.RefreshSync(System.ComponentModel.AsyncOperation)">
            <summary>
            Refreshes the current file object.
            </summary>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the operation is successful otherwise false.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.ArchiveItem.IsSameAs(ComponentPro.IO.FileInfoBase)">
            <summary>
            Gets a boolean value indicating if the source and target items represent the same physical entity.
            </summary>
            <param name="info">The target to compare.</param>
            <returns><c>true</c> if the source and target objects represent the same physical entity; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiveItem.OpenRead(System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified sharing mode.
            </summary>
            <param name="share">The sharing mode. This parameter is not used.</param>
            <returns>A stream object that can be used to read data from the file.</returns>
        </member>
        <member name="M:ComponentPro.Compression.ArchiveItem.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified sharing mode.
            </summary>
            <param name="overwrite">A boolean value indicating whether to overwrite the existing file; otherwise new content will be appended to the end of the file.</param>
            <param name="share">The sharing mode. This parameter is not used.</param>
            <returns>A stream object that can be used to write data to the file.</returns>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.FileSystem">
            <summary>
            Gets the file system that the file belongs to.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.Comment">
            <summary>
            Gets the comment of the item stored in the archive.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.CompressedLength">
            <summary>
            Gets the compressed size in bytes of the file.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.CompressionRate">
            <summary>
            Gets the compression rate. equal to (1 - <see cref="P:ComponentPro.Compression.ArchiveItem.CompressedLength"/> / <see cref="P:ComponentPro.Compression.ArchiveItem.Length"/>) * 100.0
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.Checksum">
            <summary>
            Gets the CRC32 check sum of the file.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.Encrypted">
            <summary>
            Gets a boolean value indicating whether the file is encrypted with a <see cref="P:ComponentPro.Compression.Zip.Password"/> or <see cref="P:ComponentPro.Compression.RealTimeZip.Password"/>. For <see cref="T:ComponentPro.Compression.Zip"/> and <see cref="T:ComponentPro.Compression.RealTimeZip"/> classes only.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.EncryptionAlgorithm">
            <summary>
            Gets or sets the algorithm used to encrypt/decrypt the file. For <see cref="T:ComponentPro.Compression.Zip"/> and <see cref="T:ComponentPro.Compression.RealTimeZip"/> classes only.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.Attributes">
            <summary>
            Gets the external file attributes. These attributes will be set to extracted file.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.Length">
            <summary>
            Gets the uncompressed file size in bytes.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.CreationTime">
            <summary>
            Gets or sets the file creation date and time.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.LastAccessTime">
            <summary>
            Gets or sets file last access date and time.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.Name">
            <summary>
            Gets or sets name of the file.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.OriginalPath">
            <summary>
            Gets the original path of the item. For internal use only.
            e.g. If a <see cref="O:FileSystem.ListDirectory"/> method pass a relative path like 'Folder/SubFolder', the original path of the resulting items must be relative too.
            like 'Folder/SubFolder/file1'.
            </summary>        
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.FullName">
            <summary>
            Gets the full path name of the file.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.SymlinkPath">
            <summary>
            Gets the path this item points to if it is symlink, null otherwise.
            </summary>
            <value>The path this item points to if it is symlink, null otherwise.</value>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.LastWriteTime">
            <summary>
            Gets date and time when archive item was last written to (last modified time).
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.IsSymlink">
            <summary>
            Gets a boolean value indicating whether this is a symlink.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.IsDirectory">
            <summary>
            Gets the boolean flag indicating whether the archive item is a directory.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ArchiveItem.IsFile">
            <summary>
            Gets the boolean flag indicating whether the archive item is a file.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.ArchiveItemCollection">
            <summary>
            Represents a collection of <see cref="T:ComponentPro.Compression.ArchiveItem"/> objects.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.SaveProgressState">
            <summary>
            Defines the state for the <see cref="E:ComponentPro.Compression.ArchiverBase.SaveProgress"/> event.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.SaveProgressState.SaveArchive">
            <summary>
            The self-extracting archive is being saved to disk.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.SaveProgressState.BackupArchive">
            <summary>
            Backing up the archive before committing changes with the <see cref="M:ComponentPro.Compression.ArchiverBase.EndUpdate"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.SaveProgressState.PreserveFile">
            <summary>
            An unchanged file within the archive is being preserved.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.SaveProgressState.Rollback">
            <summary>
            Rolling back changes. This occurs when there was an error while committing changes with the <see cref="M:ComponentPro.Compression.ArchiverBase.EndUpdate"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.SaveProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Compression.ArchiverBase.SaveProgress"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.SaveProgressEventArgs.FileName">
            <summary>
            Gets or sets the file name to save.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.SaveProgressEventArgs.Cancel">
            <summary>
            Gets or sets a boolean value indicating whether to cancel the operation.
            </summary>
            <value><b>true</b> if you want to cancel the operation and throw a <see cref="T:ComponentPro.IO.FileSystemException"/> with <see cref="F:ComponentPro.IO.FileSystemExceptionStatus.OperationCanceled"/> status; otherwise is <c>false</c>. Default value is <b>false</b>.</value>
            <remarks>
            If you cancel the operation, the archive will probably be damaged and it may need to be loaded or created again.
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.SaveProgressEventArgs.TotalBytes">
            <summary>
            Gets the total number of bytes to save.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.SaveProgressEventArgs.BytesProcessed">
            <summary>
            Gets the number of bytes processed.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.SaveProgressEventArgs.Percentage">
            <summary>
            Gets the percentage of the process.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.SaveProgressEventArgs.State">
            <summary>
            Gets the progress state.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.BZip2Exception">
            <summary>
            Represents exceptions specific to Bzip2 algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.ZipException">
            <summary>
            Represents the exception that is thrown when an error occurs while using ComponentPro ZIP component.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ZipException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Compression.ZipException"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Compression.ZipException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZipException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the <see cref="T:ComponentPro.Compression.ZipException"/>.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:ComponentPro.Compression.ZipException.Status">
            <summary>
            Gets the code that describes more details about the exception.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ZipException.FileInfo">
            <summary>
            Gets the <see cref="T:ComponentPro.Compression.ArchiveItem"/> related to this exception.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.BZip2Exception.#ctor">
            <summary>
            Initialise a new instance of BZip2Exception.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.BZip2Exception.#ctor(System.String)">
            <summary>
            Initialise a new instance of BZip2Exception with its message set to message.
            </summary>
            <param name="message">The message describing the error.</param>
        </member>
        <member name="M:ComponentPro.Compression.BZip2Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initialise an instance of BZip2Exception
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ComponentPro.Compression.ZipPathStoringMode">
            <summary>
            Specifies how path information will be stored for the file or directory within the archive file.
            </summary>
            <remarks>
            <para>Use <c>NoPath</c> if you need to store all files and directories without path. 
            For example, <see cref="M:ComponentPro.Compression.ArchiverBase.AddFile(System.String)">AddFile</see>("C:\TEST\test.txt") adds file test.txt to the root directory within the archive regardless of the current working directory of the archive.</para>
            <para>Use <c>Relative</c> if you need to store path relative to certain directory. 
            You can change the current working directory with <see cref="M:ComponentPro.Compression.ArchiverBase.SetCurrentDirectory(System.String)"/> before adding files to archive. 
            In this case if you set current directory to "/My Folder/Test" and call <see cref="M:ComponentPro.Compression.ArchiverBase.AddFile(System.String)">AddFile</see>("C:\TEST\test.txt") the file test.txt will be stored as "/My Folder/Test/test.txt" within the archive. After that extract it by <see cref="O:ComponentPro.Compression.ArchiverBase.ExtractFiles"/>("*.*", @"c:\temp"), files test.txt will be extracted to "c:\temp\My Folder\Test".</para>
            <para>Use <c>FullPaths</c> if you need to store absolute path without the drive letter. In this case, file test.txt is stored within the archive as "/TEST/test.txt".</para>
            <para>Use <c>FullPathsIncludingTheDriveLetter</c> if you need to store absolute path with drive. In this case, file test.txt is stored within the archive as "/C_/TEST/test.txt".</para>
            </remarks>
        </member>
        <member name="F:ComponentPro.Compression.ZipPathStoringMode.NoPath">
            <summary>
            No path information stored.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipPathStoringMode.RelativePath">
            <summary>
            Store relative path information.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipPathStoringMode.FullPath">
            <summary>
            Store full path information without disk driver name.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipPathStoringMode.FullPathIncludingDriveLetter">
            <summary>
            Store absolute path information with disk driver name.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.ZipExceptionStatus">
            <summary>
            Specifies the status codes for the <see cref="T:ComponentPro.Compression.ZipException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.UnknownError">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.FileNotFound">
            <summary>
            File not found.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.InvalidOperation">
            <summary>
            Invalid operation.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.ShouldCreateSeparateArchivers">
            <summary>
            Gzip does not support adding more than one file to an archive.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.CannotOpenFile">
            <summary>
            Cannot open a file.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.FileError">
            <summary>
            File operation error.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.FileAlreadyExists">
            <summary>
            File already exits.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.CannotFitSfxStubOnVolume">
            <summary>
            Cannot fit SFX stub on volume.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.IncorrectPassword">
            <summary>
            Incorrect password for the protected archiver.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.UnknownCompressionMethod">
            <summary>
            Unknown compression method.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.DecompressionFailed">
            <summary>
            Decompression failed.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.CompressionFailed">
            <summary>
            Compression failed.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.OperationFailed">
            <summary>
            Operation failed.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.ZipExceptionStatus.DiskFull">
            <summary>
            Disk is full.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.Gzip">
            <summary>
            Represents GZip File System which contains members to work with gzip file format.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Compression.Gzip"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.#ctor(System.String)">
            <summary>
            Initializes new instance of the <see cref="T:ComponentPro.Compression.Gzip"/> class and open or create a new archive file.
            </summary>
            <param name="archiveFile">The archive file name.</param>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.Close">
            <summary>
            Closes the archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.OnBlankArchiveItemNameDetected(ComponentPro.Compression.BlankArchiveItemNameDetectedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.Gzip.BlankArchiveItemNameDetected"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.Compression.BlankArchiveItemNameDetectedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.SetFileComment(ComponentPro.Compression.ArchiveItem,System.String)">
            <summary>
            Updates comment of the specified file. An exception is thrown if the specified file does not exist. 
            </summary>
            <param name="comment">New comment.</param>
            <param name="fileInfo">File information.</param>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.SetFileComment(System.String,System.String)">
            <summary>
            Updates comment of the specified file. An exception is thrown if the specified file does not exist. 
            </summary>
            <param name="comment">New comment.</param>
            <param name="archiveItemPath">The path of the archive item to update comment.</param>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.CreateDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.DeleteFileSync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.DeleteDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.TransferDataFromStreamToFileSync(ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.TransferDataFromFileToStreamSync(System.Boolean,ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <summary>
            For internal uses only.
            </summary>
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to. 
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.Extract(ComponentPro.IO.FileInfoBase)">
            <summary>
            Extracts the first item found in the GZip archive.
            </summary>
            <param name="destinationFileInfo">The destination file.</param>
            <returns>The number of bytes extracted.</returns>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.Extract(System.String)">
            <summary>
            Extracts the first item found in the GZip archive.
            </summary>
            <param name="destinationFilePath">The path of the destination local file.</param>
            <returns>The number of bytes extracted.</returns>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.Extract(System.IO.Stream)">
            <summary>
            Extracts the first item found in the GZip archive.
            </summary>
            <param name="destStream">The destination stream.</param>
            <returns>The number of bytes extracted.</returns>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.SetLastWriteTimeSync(System.String,System.DateTime,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Gzip.ToString">
            <summary>
            Returns a string that represents the current archive.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.Gzip.BlankArchiveItemNameDetected">
            <summary>
            Occurs when a blank archive item name detected.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.Gzip.CompressionLevel">
            <summary>
            Gets and sets the compression level used for archive update (Low, Medium, and High). Default value is <c><see cref="P:ComponentPro.Compression.Gzip.CompressionLevel"/>.Low</c>.
            </summary>
            <remarks>
            This property determines the compression level for adding, moving or updating files. Set <b>CompressionLevel</b> to the desired value before adding, moving or updating files.
            </remarks>
        </member>
        <member name="T:ComponentPro.Compression.BlankArchiveItemNameDetectedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Compression.Gzip.BlankArchiveItemNameDetected"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.BlankArchiveItemNameDetectedEventArgs.ArchiveItemName">
            <summary>
            Gets or sets the volume file name.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.BlankArchiveItemNameDetectedEventArgs.Cancel">
            <summary>
            Gets or sets a boolean value indicating whether to cancel the operation.
            </summary>
            <value><b>true</b> if you want to cancel the operation; otherwise is <c>false</c>. Default value is <b>false</b>.</value>
        </member>
        <member name="P:ComponentPro.Compression.BlankArchiveItemNameDetectedEventArgs.Remove">
            <summary>
            Gets or sets a boolean value indicating whether to remove the blank archive item.
            </summary>
            <value><b>true</b> if you want to remove the blank archive item; otherwise is <c>false</c>. Default value is <b>false</b>.</value>
        </member>
        <member name="T:ComponentPro.Compression.Tar">
            <summary>
            Tar class provides essential members to create and open TAR archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Tar.#ctor">
            <summary>
            Initializes new instance of the <see cref="T:ComponentPro.Compression.Tar"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Tar.#ctor(System.String)">
            <summary>
            Initializes new instance of the <see cref="T:ComponentPro.Compression.Tar"/> class and open or create a new archive file.
            </summary>
            <param name="archiveFile">The archive file name.</param>
        </member>
        <member name="M:ComponentPro.Compression.Tar.OnIncorrectArchiveItemNameDetected(ComponentPro.Compression.IncorrectArchiveItemNameDetectedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.Tar.IncorrectArchiveItemNameDetected"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.Compression.IncorrectArchiveItemNameDetectedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Compression.Tar.ListAll(ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories within the archive that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>A collection of <see cref="T:ComponentPro.Compression.ArchiveItem"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Compression.Tar.TransferDataFromFileToStreamSync(System.Boolean,ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <summary>
            For internal uses only.
            </summary>
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Tar.GetSupportedChecksumTypes">
            <exclude/>
        </member>
        <member name="M:ComponentPro.Compression.Tar.GetFileChecksumSync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Tar.SetLastWriteTimeSync(System.String,System.DateTime,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Tar.ToString">
            <summary>
            Returns a string that represents the current archive.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.Tar.IncorrectArchiveItemNameDetected">
            <summary>
            Occurs when an archive item with incorrect name or path detected.
            </summary>
            <remarks>If the event is not handled and when the TAR archiver encounters an invalid file name, the item will be skipped.</remarks>
        </member>
        <member name="T:ComponentPro.Compression.IncorrectArchiveItemNameDetectedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Compression.Tar.IncorrectArchiveItemNameDetected"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.IncorrectArchiveItemNameDetectedEventArgs.FullName">
            <summary>
            Gets the current file name.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.IncorrectArchiveItemNameDetectedEventArgs.Skip">
            <summary>
            Gets or sets a boolean value indicating whether to skip the file.
            </summary>
            <value><b>true</b> if you want to cancel the operation; otherwise is <c>false</c>. Default value is <b>false</b>.</value>
        </member>
        <member name="T:ComponentPro.Compression.Tgz">
            <summary>
            Tgz class provides essential members to create and open TGZ archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Tgz.#ctor">
            <summary>
            Initializes new instance of the <see cref="T:ComponentPro.Compression.Tgz"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Tgz.#ctor(System.String)">
            <summary>
            Initializes new instance of the <see cref="T:ComponentPro.Compression.Tgz"/> class and open or create a new archive file.
            </summary>
            <param name="archiveFile">The archive file name.</param>
        </member>
        <member name="M:ComponentPro.Compression.Tgz.Open(System.IO.Stream,System.Boolean)">
            <summary>
            Opens or creates an archive file within a stream.
            </summary>
            <param name="stream">The stream descendant object with the archive contents.</param>
            <param name="create">A boolean flag indicating whether a file should be created.</param>
            <remarks>
            <p>
            If <paramref name="create"/> parameter is set to <b>true</b>, UltimateZip will create and open it. Open sets <see cref="P:ComponentPro.Compression.ArchiverBase.Opened"/> to <b>true</b>.
            </p>
            <p>
            To close the archive file, just call the <see cref="M:ComponentPro.Compression.Tgz.Close"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Compression.Tgz.Cancel(System.Object)">
            <summary>
            Cancels the current operation.
            </summary>
            <param name="state">The user-defined object associated with the file transfer operation, or null reference to cancel all the current file transfer operations.</param>
        </member>
        <member name="M:ComponentPro.Compression.Tgz.Close">
            <summary>
            Closes the archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Tgz.ToString">
            <summary>
            Returns a string that represents the current archive.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.RealTimeZip">
            <summary>
            RealTimeZip helps developer compress and add files to real-time zip stream, as well as extracting files.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds files from the specified source directory on the specified source file system to the specified directory within the archive.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to add.</param>
            <param name="sourceDirectoryPath">The path and name of the directory on the <paramref name="sourceFileSystem">source file system</paramref> where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(ftpSystem, "/MyDir/*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles(ftpSystem, "", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles(ftpSystem, "", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(@"C:\MyDir\*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles("", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles("", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="sourceFilesToAdd">The list of files and directories to add. 
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects (e.g. <code>AddFiles(new string[] {"c:\data\file1", "c:\text\doc.txt", "c:\dir1" }, ...)</code> or <code>AddFiles(new object[] {"file1", fileInfo1, fileInfo2 }, ...)</code>). This cannot be null or empty.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(ComponentPro.IO.SearchFileList,System.String)">
            <summary>
            Adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="fileList">The list of files and directories to add.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(ComponentPro.IO.SearchFileList,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="fileList">The list of files and directories to add.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition is the combination of the masks, if found, in the <paramref name="localDirectoryPath"/> and the <paramref name="searchCondition"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode)">
            <summary>
            Adds files from the specified local directory that match the specified search pattern to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to add files to this archive.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be added.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(System.String,System.String)">
            <summary>
            Adds all files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(System.String,System.Boolean)">
            <summary>
            Adds all files from the specified local directory to the current working directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFiles(System.String)">
            <summary>
            Adds all files from the specified local directory to the current working directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddDirectory(System.String,System.Boolean)">
            <summary>
            Adds an entire directory or a file from the disk file system to the current working directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path of the directory on the disk file system to add files to this archive.</param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddDirectory(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode)">
            <summary>
            Adds an entire directory or a file from the specified source file system to the specified directory in the archive.
            </summary>
            <param name="archiveDirectoryPath">The path of the archive directory to store added files.</param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <param name="localDirectoryPath">The path of the local directory to add files to the archive.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddDirectory(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds an entire directory or a file from the specified source file system to the archive.
            </summary>
            <param name="archiveDirectoryPath">The path of the archive directory to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="localDirectoryPath">The path of the local directory to add files to the archive.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddDirectory(ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Adds an entire directory or a file from the specified source file system to the current working directory in the archive.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to add files to the archive.</param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddDirectory(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean)">
            <summary>
            Adds an entire directory or a file from the specified source file system to the archive.
            </summary>
            <param name="archiveDirectoryPath">The path of the archive directory to store added files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to add files to the archive.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddDirectory(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Adds an entire directory or a file from the specified source file system to the archive.
            </summary>
            <param name="archiveDirectoryPath">The path of the archive directory to store added files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to add files to the archive.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.OnAddFilesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.RealTimeZip.AddFilesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous adds files from the specified source directory on the specified source file system to the specified directory within the archive.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to add.</param>
            <param name="sourceDirectoryPath">The path and name of the directory on the <paramref name="sourceFileSystem">source file system</paramref> where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(ftpSystem, "/MyDir/*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles(ftpSystem, "", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles(ftpSystem, "", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronous adds files from the specified source directory on the specified source file system to the specified directory within the archive.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to add.</param>
            <param name="sourceDirectoryPath">The path and name of the directory on the <paramref name="sourceFileSystem">source file system</paramref> where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(ftpSystem, "/MyDir/*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles(ftpSystem, "", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles(ftpSystem, "", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(@"C:\MyDir\*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles("", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles("", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronous adds files from the specified source directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            When the parameter <paramref name="sourceFilesToAdd"/> is null reference, this parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination archive directory. 
            For example: AddFiles(@"C:\MyDir\*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToAdd">The list of files and directories to add, 
            or null to add files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>AddFiles("", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>AddFiles("", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="sourceFilesToAdd">The list of files and directories to add. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This cannot be null or empty.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="sourceFilesToAdd">The list of files and directories to add. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (i.e <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This cannot be null or empty.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(ComponentPro.IO.SearchFileList,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="fileList">The list of files and directories to add.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(ComponentPro.IO.SearchFileList,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously adds files or directories in the specified list to the specified directory within the archive.
            </summary>
            <param name="fileList">The list of files and directories to add.</param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition is the combination of the masks, if found, in the <paramref name="localDirectoryPath"/> and the <paramref name="searchCondition"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously adds files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added. The final search condition is the combination of the masks, if found, in the <paramref name="localDirectoryPath"/> and the <paramref name="searchCondition"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="archiveDirectoryPath">The path of the directory within the archive to store added files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the specified directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="recursive">A boolean value indicating whether to add subdirectories in the specified directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the current directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFilesAsync(System.String,System.Object)">
            <summary>
            Asynchronously adds all files from the specified local directory to the current directory within the archive.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be added to the archive. 
            This parameter can include filtering masks to limit the files that are added. For example, if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working folder will be added. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be added. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, and VB extensions in "/mydir" will be added.
            If no masks specified, the whole content of the local directory should be added.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be added. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be added; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFile(System.String,System.String)">
            <summary>
            Adds a file with path specified by <paramref name="localFilePath"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="localFilePath">The path of the file to add to the archive.</param>
            <param name="archiveItemName">The archive item name.</param>
            <returns>The number of bytes read.</returns>
            <remarks><see cref="P:ComponentPro.Compression.RealTimeZip.PathStoringMode"/> does not have effect on this method.</remarks>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFile(System.String,System.String,System.String)">
            <summary>
            Adds a file with path specified by <paramref name="localFilePath"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="localFilePath">The path of the file to add to the archive.</param>
            <param name="archiveItemName">The archive item name.</param>
            <param name="comment">The comment of the archive item.</param>
            <returns>The number of bytes read.</returns>
            <remarks><see cref="P:ComponentPro.Compression.RealTimeZip.PathStoringMode"/> does not have effect on this method.</remarks>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFile(System.IO.Stream,System.String)">
            <summary>
            Adds a file with content in the specified <paramref name="sourceStream"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="archiveItemName">The archive item name.</param>
            <param name="sourceStream">The stream containing data to be added to the archive.</param>
            <returns>The number of bytes compressed. It's usually the stream length.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFile(System.IO.Stream,System.String,System.String)">
            <summary>
            Adds a file with content in the specified <paramref name="sourceStream"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="archiveItemName">The archive item name.</param>
            <param name="sourceStream">The stream containing data to be added to the archive.</param>
            <param name="fileComment">The comment of the archive item.</param>
            <returns>The number of bytes compressed. It's usually the stream length.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.OnCloseCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.RealTimeZip.CloseCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.CloseAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously closes the archive.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.CloseAsync(System.Object)">
            <summary>
            Asynchronously closes the archive.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.OnAddFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.RealTimeZip.AddFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously adds a file with path specified by <paramref name="localFilePath"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="localFilePath">The path of the file to add to the archive.</param>
            <param name="archiveItemName">The archive item name.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFileAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously adds a file with path specified by <paramref name="localFilePath"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="localFilePath">The path of the file to add to the archive.</param>
            <param name="archiveItemName">The archive item name.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFileAsync(System.String,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously adds a file with path specified by <paramref name="localFilePath"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="localFilePath">The path of the file to add to the archive.</param>
            <param name="archiveItemName">The archive item name.</param>
            <param name="comment">The comment of the archive item.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFileAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            Asynchronously adds a file with path specified by <paramref name="localFilePath"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="localFilePath">The path of the file to add to the archive.</param>
            <param name="archiveItemName">The archive item name.</param>
            <param name="comment">The comment of the archive item.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFileAsync(System.IO.Stream,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously adds a file with content in the specified <paramref name="sourceStream"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="sourceStream">The path of the file to add to the archive.</param>
            <param name="archiveItemName">The archive item name.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFileAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Asynchronously adds a file with content in the specified <paramref name="sourceStream"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="sourceStream">The path of the file to add to the archive.</param>
            <param name="archiveItemName">The archive item name.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFileAsync(System.IO.Stream,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously adds a file with content in the specified <paramref name="sourceStream"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="sourceStream">The stream containing data to be added to the archive.</param>
            <param name="archiveItemName">The archive item name.</param>
            <param name="comment">The comment of the archive item.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.AddFileAsync(System.IO.Stream,System.String,System.String,System.Object)">
            <summary>
            Asynchronously adds a file with content in the specified <paramref name="sourceStream"/> parameter to the archive. The archive item is to be saved with name specified in the <paramref name="archiveItemName"/> parameter.
            </summary>
            <param name="sourceStream">The stream containing data to be added to the archive.</param>
            <param name="archiveItemName">The archive item name.</param>
            <param name="comment">The comment of the archive item.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.OnExtractFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.RealTimeZip.ExtractFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ExtractFileAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously extracts the archive item found by the <see cref="M:ComponentPro.Compression.RealTimeZip.FindNextItemHeader"/> method to the specified output file.
            </summary>
            <param name="outputFile">The destination file on local disk to write the decompressed data to.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ExtractFileAsync(System.String,System.Object)">
            <summary>
            Asynchronously extracts the archive item found by the <see cref="M:ComponentPro.Compression.RealTimeZip.FindNextItemHeader"/> method to the specified output file.
            </summary>
            <param name="outputFile">The destination file on local disk to write the decompressed data to.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ExtractFileAsync(System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously extracts the archive item found by the <see cref="M:ComponentPro.Compression.RealTimeZip.FindNextItemHeader"/> method to the specified output stream.
            </summary>
            <param name="destinationStream">The stream to write the decompressed data to.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ExtractFileAsync(System.IO.Stream,System.Object)">
            <summary>
            Asynchronously extracts the archive item found by the <see cref="M:ComponentPro.Compression.RealTimeZip.FindNextItemHeader"/> method to the specified output stream.
            </summary>
            <param name="destinationStream">The stream to write the decompressed data to.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.OnPasswordNeeded(ComponentPro.Compression.PasswordNeededEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.RealTimeZip.PasswordNeeded"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.Compression.PasswordNeededEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.OnError(ComponentPro.Compression.RealTimeZipErrorEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.RealTimeZip.Error"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.Compression.RealTimeZipErrorEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.Cancel(System.Object)">
            <summary>
            Cancels the current operation.
            </summary>
            <param name="userState">The user-defined object associated with the file transfer operation, or null reference to cancel all the current file transfer operations.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.RenameSync(System.String,System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.SetLastWriteTimeSync(System.String,System.DateTime,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ResolveSymlinkSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Not supported.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>        
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.CreateSymlinkSync(System.String,System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Not supported.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="target">The target</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>        
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetItemInfo(System.String)">
            <summary>
            Gets the file information.
            </summary>
            <param name="path">The fully qualified file name.</param>
            <returns>An <see cref="T:ComponentPro.Compression.ArchiveItem"/> object, or a null reference if the file does not exist.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetItemInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetFileLength(System.String)">
            <summary>
            Gets the file length in bytes.
            </summary>
            <param name="filePath">The fully qualified file name.</param>
            <returns>The file length.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetFileLengthSync(System.String,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetLastWriteTime(System.String)">
            <summary>
            Gets the date and time when archive item was last written to (last modified time).
            </summary>
            <param name="path">The fully qualified file name.</param>
            <returns>The file last modification date and time.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetLastWriteTimeSync(System.String,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.SetCurrentDirectorySync(System.String,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetCurrentDirectorySync(System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.CreateFileInfo(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.Compression.ArchiveItem"/> class and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="originalPath">The original path.</param>
            <param name="isFile">Indicates whether this is a file.</param>
            <returns>The newly created <see cref="T:ComponentPro.Compression.ArchiveItem"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.CreateFileInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.CreateItemCollection">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetFileChecksumSync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetStreamForWriting(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            For internal uses only. Calling this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetStreamForReading(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            For internal uses only. Calling this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.Clone">
            <summary>
            Returns a copy of the current file system. Zip file system does not support Clonning. Calling this method will raise <see cref="T:System.NotSupportedException"/> exception.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.CreateDirectory(System.String)">
            <summary>
            Creates an empty directory within the archive.
            </summary>
            <param name="path">The directory path.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.CreateDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.DeleteFileSync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.DeleteDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ProcessException(System.Exception)">
            <summary>
            Processes and returns an exception.
            </summary>
            <param name="x">The input exception.</param>
            <returns>The processed exception.</returns>
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <param name="directoryPath">The path to test.</param>
            <returns><c>true</c> if path refers to an existing directory; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.DirectoryExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.FileExists(System.String)">
            <summary>
            Determines whether the given file path refers to an existing file.
            </summary>
            <param name="filePath">The file path to test.</param>
            <returns><c>true</c> if path refers to an existing file; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.FileExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ListAll">
            <summary>
            Lists all files and subdirectories within the archive.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.Compression.ArchiveItem"/>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ListAll(System.String)">
            <summary>
            Lists files and subdirectories within the archive that match the specified search condition.
            </summary>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>A collection of <see cref="T:ComponentPro.Compression.ArchiveItem"/>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ListAll(ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories within the archive that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>A collection of <see cref="T:ComponentPro.Compression.ArchiveItem"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ListDirectorySync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.IO.ListDirFlags,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ListNameSync(System.String,ComponentPro.IO.SearchCondition,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.TransferDataFromStreamToFileSync(ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <summary>
            For internal uses only. Copies content of the specified data stream to the specified file on the local disk.
            </summary>
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.TransferDataFromFileToStreamSync(System.Boolean,ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Compression.RealTimeZip"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Compression.RealTimeZip"/> class.
            </summary>
            <param name="stream">The stream object used for writting compressed data or extracting contents.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.Open(System.IO.Stream,System.Boolean)">
            <summary>
            Opens or creates an archive within a stream.
            </summary>
            <param name="stream">The stream used for compression or decompression.</param>
            <param name="createArchive">A boolean value indicating whether the archive should be created.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.Open(System.Boolean)">
            <summary>
            Opens or creates an archive within a stream.
            </summary>
            <param name="createArchive">A boolean value indicating whether the archive should be created.</param>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.Close">
            <summary>
            Closes the archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.GetSupportedChecksumTypes">
            <summary>
            Returns the supported checksum types.
            </summary>
            <returns>The supported checksum types.</returns>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ExtractFile(System.String)">
            <summary>
            Extracts the archive item found by the <see cref="M:ComponentPro.Compression.RealTimeZip.FindNextItemHeader"/> method to the specified output file.
            </summary>
            <param name="outputFile">The destination file on local disk to write the decompressed data to.</param>
            <returns>The number of bytes extracted or -1 if there was an error.</returns>
            <exception cref="T:ComponentPro.Compression.ZipException"><see cref="M:ComponentPro.Compression.RealTimeZip.FindNextItemHeader"/> was not called to find the next item header for the extraction or an error occured while extracting the item.</exception>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.ExtractFile(System.IO.Stream)">
            <summary>
            Extracts the archive item found by the <see cref="M:ComponentPro.Compression.RealTimeZip.FindNextItemHeader"/> method to the specified output stream.
            </summary>
            <param name="destinationStream">The stream to write the decompressed data to.</param>
            <returns>The number of bytes extracted or -1 if there was an error.</returns>
            <exception cref="T:ComponentPro.Compression.ZipException"><see cref="M:ComponentPro.Compression.RealTimeZip.FindNextItemHeader"/> was not called to find the next item header for the extraction or an error occured while extracting the item.</exception>
        </member>
        <member name="M:ComponentPro.Compression.RealTimeZip.FindNextItemHeader">
            <summary>
            Finds next archive item header in the <see cref="P:ComponentPro.Compression.RealTimeZip.CompressedStream"/>.
            </summary>
            <seealso cref="O:ExtractFile"/>
            <exception cref="T:ComponentPro.Compression.ZipException">If the expected archive item header not found in the <see cref="P:ComponentPro.Compression.RealTimeZip.CompressedStream"/> or the archive is damaged.</exception>
        </member>
        <member name="E:ComponentPro.Compression.RealTimeZip.AddFilesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:AddFilesAsync"/> operation completes.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.AsyncOperation">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="E:ComponentPro.Compression.RealTimeZip.CloseCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:CloseAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.RealTimeZip.AddFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:AddFileAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.RealTimeZip.ExtractFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ExtractFileAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.RealTimeZip.PasswordNeeded">
            <summary>
            Occurs when a password for the encrypted file is needed.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.RealTimeZip.Error">
            <summary>
            Occurs when an error has occurred.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>        
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.CanGetStreamForWriting">
            <summary>
            Returns a field indicating whether the system support getting stream for writting data to file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.CanGetStreamForReading">
            <summary>
            Returns a field indicating whether the system support getting stream for reading data from file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.FileSystemFeatures">
            <summary>
            Gets supported features.
            </summary>
            <exclude/>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.Comment">
            <summary>
            Gets or sets the comment of the archive file.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.CompressionLevel">
            <summary>
            Gets or sets the compression level used for adding files to the archive. Default value is <see cref="T:ComponentPro.Compression.CompressionLevel">Low</see>.
            </summary>
            <remarks>
            <p>For storing files only, you can set the <see cref="P:ComponentPro.Compression.RealTimeZip.CompressionLevel"/> to <see cref="T:ComponentPro.Compression.CompressionLevel">None</see>.</p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.CompressionMethod">
            <summary>
            Gets or sets the compression algorithm used to compress archive items. Default value is <c><see cref="P:ComponentPro.Compression.RealTimeZip.CompressionMethod"/>.Deflate</c>.
            </summary>
            <remarks>
            <see cref="P:ComponentPro.Compression.RealTimeZip.CompressionMethod">None</see> compression method is not supported.
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.EncryptionAlgorithm">
            <summary>
             Gets or sets the archive encryption algorithm. Default value is <c><see cref="P:ComponentPro.Compression.RealTimeZip.EncryptionAlgorithm"/>.None</c>.
            </summary>
             <remarks>
             RealTimeZip does not support <c>PkzipClassic</c> and <c>Unknown</c> algorithm.
             </remarks>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.Password">
            <summary>
            Gets or sets the password for files stored in the archive.
            </summary>
            <remarks>
            When <see cref="P:ComponentPro.Compression.RealTimeZip.Password"/> is not empty, <see cref="P:ComponentPro.Compression.RealTimeZip.EncryptionAlgorithm"/> will be set to <see cref="T:ComponentPro.Compression.EncryptionAlgorithm">Aes128</see>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.UseUnicodeFileNameExtraField">
            <summary>
            Gets or sets a boolean value indicating whether to use unicode extra field to store filename in unicode format. Default value is <c>false</c>.
            </summary>
            <remarks>Not all programs can read this field correctly.</remarks>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.StoreFileTime">
            <summary>
            Gets or sets a boolean value indicating whether to save file modification, last access and creation times. Default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.PathStoringMode">
            <summary>
            Gets or sets the path storing mode. It defines how path information will be stored for files and directories within the archive .
            </summary>
            <value>The path storing mode.</value>
            <remarks>This property only has effect on <see cref="O:AddFiles"/> methods.</remarks>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.UseZip64">
            <summary>
            Gets or sets a boolean value indicating whether to use Zip64 format to create archives over 4GB. Default value is <c>false</c> - Zip32 is used.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.CompressedStream">
            <summary>
            Specifies the compressed stream.
            </summary>
            <value>The compressed stream.</value>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZip.Opened">
            <summary>
            Gets a boolean value indicating whether the archive is opened.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.RealTimeZipErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Compression.RealTimeZip.Error"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZipErrorEventArgs.ArchiveItemName">
            <summary>
            Gets the archive item name that is being processed. or null reference if <see cref="T:ComponentPro.Compression.RealTimeZip"/> is writing data to a stream. In this case, the <see cref="P:ComponentPro.Compression.RealTimeZipErrorEventArgs.Cancel"/> property is available.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZipErrorEventArgs.Exception">
            <summary>
            Gets the exception object.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.RealTimeZipErrorEventArgs.Cancel">
            <summary>
            Gets a boolean value indicating whether to cancel the current operation. 
            </summary>
            <remarks>
            Only available when <see cref="T:ComponentPro.Compression.RealTimeZip"/> is writing data to a stream, indicating the <see cref="P:ComponentPro.Compression.RealTimeZipErrorEventArgs.ArchiveItemName"/> property is null reference.
            </remarks>
        </member>
        <member name="T:ComponentPro.Compression.Zip">
            <summary>
            Zip class provides essential members to create and open ZIP archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Zip.OnPasswordNeeded(ComponentPro.Compression.PasswordNeededEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.Zip.PasswordNeeded"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.Compression.PasswordNeededEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Compression.Zip.OnBlankVolumeRequested(ComponentPro.Compression.BlankVolumeRequestedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.Zip.BlankVolumeRequested"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.Compression.BlankVolumeRequestedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Compression.Zip.OnExistingVolumeRequested(ComponentPro.Compression.ExistingVolumeRequestedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.Zip.ExistingVolumeRequested"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.Compression.ExistingVolumeRequestedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Compression.Zip.OnDiskFull(ComponentPro.Compression.DiskFullEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Compression.Zip.DiskFull"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.Compression.DiskFullEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Compression.Zip.SetFileComment(ComponentPro.Compression.ArchiveItem,System.String)">
            <summary>
            Updates comment of the specified file. An exception is thrown if the specified file does not exist. 
            </summary>
            <param name="comment">New comment.</param>
            <param name="fileInfo">File information.</param>
        </member>
        <member name="M:ComponentPro.Compression.Zip.SetFileComment(System.String,System.String)">
            <summary>
            Updates comment of the specified file. An exception is thrown if the specified file does not exist. 
            </summary>
            <param name="comment">New comment.</param>
            <param name="archiveItemPath">The path of the archive item to update comment.</param>
        </member>
        <member name="M:ComponentPro.Compression.Zip.SetMultipleFilesComment(ComponentPro.IO.SearchCondition,System.String)">
            <summary>
            Updates comments of multiple files.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="comment">New comment.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Compression.Zip.SetMultipleFilesComment(System.String,System.String)">
            <summary>
            Updates comments of multiple files.
            </summary>
            <param name="searchPattern">The search pattern to match against the files. (null for searching all files).</param>
            <param name="comment">New comment.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Compression.Zip.ListAll(ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories within the archive that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>A collection of <see cref="T:ComponentPro.Compression.ArchiveItem"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Compression.Zip.TransferDataFromFileToStreamSync(System.Boolean,ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <summary>
            For internal uses only.
            </summary>
            <exclude/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Zip.#ctor">
            <summary>
            Creates new instance of the <see cref="T:ComponentPro.Compression.Zip"/> class and initializes its members with default values.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Zip.#ctor(System.String)">
            <summary>
            Initializes new instance of the <see cref="T:ComponentPro.Compression.Zip"/> class and open or create a new archive file.
            </summary>
            <param name="archiveFile">The archive file name.</param>
        </member>
        <member name="M:ComponentPro.Compression.Zip.Close">
            <summary>
            Closes the archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Zip.IsValidArchiveFile">
            <summary>
            Returns a boolean value indicating whether the opened archive is valid. 
            </summary>
            <returns><b>true</b> if the file is a valid archive; otherwise returns <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.Zip.SetLastWriteTimeSync(System.String,System.DateTime,System.ComponentModel.AsyncOperation)">
            <summary>
            Sets the date and time that the specified file was last written to. 
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Compression.Zip.Open(System.IO.Stream,System.Boolean)">
            <summary>
            Opens or creates an archive within a stream.
            </summary>
            <param name="stream">The stream descendant object with the archive contents.</param>
            <param name="create">A boolean value indicating whether if file should be created.</param>
            <remarks>
            Call <see cref="M:ComponentPro.Compression.ArchiverBase.Close"/> to close the archive file.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.Compression.Zip.CreateSfx(System.String)">
            <summary>
            Creates a self-extracting (SFX) archive.
            </summary>
            <param name="sfxFileName">The output self-extracting file.</param>
            <remarks>
            <see cref="P:ComponentPro.Compression.Zip.SfxStubFileName"/> must be set prior to calling this method.
            </remarks>
            <exception cref="T:ComponentPro.Compression.ZipException"><paramref name="sfxFileName"/> is empty or does not exists.</exception>
        </member>
        <member name="M:ComponentPro.Compression.Zip.TestPassword(System.String,System.String)">
            <summary>
            Returns a boolean value indicating whether the password is valid for specified encrypted file in archive.
            </summary>
            <param name="fileName">The archive item name being tested.</param>
            <param name="password">The password parameter is a password to check.</param>
            <returns><c>true</c> if the password is valid or the file is not encrypted; otherwise is <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.Compression.Zip.ToString">
            <summary>
            Returns a string that represents the current archive.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Zip.Repair(System.String)">
            <summary>
            Repairs the specified archive and save to the same file.
            </summary>
            <param name="sourceFileName">File path to the archive need to repair.</param>
        </member>
        <member name="M:ComponentPro.Compression.Zip.Repair(System.String,System.String)">
            <summary>
            Saves repaired archive to the file specified by the <paramref name="outputFileName"/> parameter.
            </summary>
            <param name="sourceFileName">File path to the archive need to repair.</param>
            <param name="outputFileName">File path to save the repaired file to or null to write to the same file specified by the <paramref name="sourceFileName"/> parameters.</param>
        </member>
        <member name="E:ComponentPro.Compression.Zip.PasswordNeeded">
            <summary>
            Occurs when a password for the encrypted file is needed.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.Zip.BlankVolumeRequested">
            <summary>
            Occurs when next volume should be inserted while writing a multi-volume archive.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.Zip.ExistingVolumeRequested">
            <summary>
            Occurs when a volume should be inserted while extracting or testing a multi-volume archive.
            </summary>
        </member>
        <member name="E:ComponentPro.Compression.Zip.DiskFull">
            <summary>
            Occurs when disk is full.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.Zip.CurrentVolumeFileName">
            <summary>
            Gets the current volume file name of a spanning/splitting archive.
            </summary>		
        </member>
        <member name="P:ComponentPro.Compression.Zip.CurrentVolumeNumber">
            <summary>
            Gets the current volume number of a spanning/splitting archive.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.Zip.StoreFileTime">
            <summary>
            Gets or sets a boolean value indicating whether to save NTFS Extra Field containing file modification, last access and creation time of source file. Default value is <c>true</c>.
            </summary>        
        </member>
        <member name="P:ComponentPro.Compression.Zip.StoreUnicodeName">
            <summary>
            Gets or sets a boolean value indicating whether unicode file names are saved in addition to filenames in standard OEM encoding.
            </summary>        
        </member>
        <member name="P:ComponentPro.Compression.Zip.Zip64Mode">
            <summary>
            Gets or sets the Zip64 mode indicating whether to use Zip64 format to create archives over 4GB and file added to the archive can be greater than 4GB.
            </summary>
            <remarks>
            <p>
            Use <see cref="T:ComponentPro.Compression.Zip64Mode">Auto</see> for auto-detection of the archive format depending on sizes of the files being added. Set this property to <see cref="T:ComponentPro.Compression.Zip64Mode">Always</see> to add files in Zip64 format regardless of file size. 
            <see cref="T:ComponentPro.Compression.Zip64Mode">Disabled</see> is the default value for creating archives in normal Zip format, compatible with most of archivers.
            </p>
            <p>
            NOTE: Zip64 format is not supported by some archivers. Nevertheless we do not guarantee that it is compatible with other programs.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.Zip.EncryptionAlgorithm">
            <summary>
            Gets or sets the algorithm to use to encrypt archive items.
            </summary>
            <seealso cref="E:ComponentPro.Compression.Zip.PasswordNeeded"/>
        </member>
        <member name="P:ComponentPro.Compression.Zip.SpanningMode">
            <summary>
            Gets the spanning mode describling how the archive file will be stored on disk.
            </summary>
            <value>The spanning mode specifying how to the archive file will be stored on disk: as a single file, as multiple files or it will be stored on removable disks.</value>
        </member>
        <member name="P:ComponentPro.Compression.Zip.CompressionLevel">
            <summary>
            Gets or sets the compression level used for adding files to the archive. Default value is <see cref="T:ComponentPro.Compression.CompressionLevel">Medium</see>.
            </summary>
            <remarks>
            <p>For storing files only, you can set the <see cref="P:ComponentPro.Compression.Zip.CompressionLevel"/> to <see cref="T:ComponentPro.Compression.CompressionLevel">None</see>.</p>
            <p>Setting this property will change the <see cref="P:ComponentPro.Compression.Zip.CompressionMode"/> property accordingly.</p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.Zip.CompressionMethod">
            <summary>
            Gets or sets the compression algorithm used to compress archive items. Default value is <c><see cref="P:ComponentPro.Compression.Zip.CompressionMethod"/>.Deflate</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.Zip.CompressionMode">
            <summary>
            Gets or sets the compression level used for adding files to the archive. Available values are from 0 to 9. 0 for no compression - storing files only. 9 for maximum compression rate. Default value is <c>6</c>.
            </summary>
            <remarks>
            <p>Setting this property will change the <see cref="P:ComponentPro.Compression.Zip.CompressionLevel"/> property accordingly.</p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.Zip.VolumeSettings">
            <summary>
            Gets the <see cref="P:ComponentPro.Compression.Zip.VolumeSettings"/> object which specifies how the archive will be splitted or spanned.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.Zip.SfxStubFileName">
            <summary>
            Gets or sets the file name of the executable stub.
            </summary>
            <remarks>
            <p>To create self-extracting archive, set <see cref="P:ComponentPro.Compression.Zip.SfxStubFileName"/> property to an managed .NET executable file which has the ability to extract files and create another archive by calling the <see cref="M:ComponentPro.Compression.ArchiverBase.Create(System.String)"/> or <see cref="M:ComponentPro.Compression.Zip.CreateSfx(System.String)"/> method.</p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.Zip.OpenCorruptedArchives">
            <summary>
            Gets or sets a boolean value indicating whether the corrupted archives can be opened. Default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.Zip.ExtractCorruptedFiles">
            <summary>
            Gets or sets a boolean value indicating whether the partially corrupted files can be extracted from damaged archive. Default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.Zip.Password">
            <summary>
            Gets or sets the password for encrypting files within the archive.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.Zip.Comment">
            <summary>
            Gets or sets the comment of the archive file.
            </summary>
            <remarks>
            <p>Set this property before opening or creating archive will throw an exception.</p>
            <p>If you need to set comment for each file in archive, use the <see cref="O:SetFileComment" /> method.</p>
            </remarks>
        </member>
        <member name="T:ComponentPro.Compression.CompressionMethod">
            <summary>
            Specifies the algorithms used to compress files.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.CompressionMethod.None">
            <summary>No compression.</summary>
        </member>
        <member name="F:ComponentPro.Compression.CompressionMethod.Deflate">
            <summary>
            Deflate compression algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.CompressionMethod.BZIP2">
            <summary>
            Bzip2 compression algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.CompressionMethod.PPMd">
            <summary>
            Ppmd compression algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.EncryptionAlgorithm">
            <summary>
            Specifies the encryption algorithms used to encrypt and decrypt archives.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.EncryptionAlgorithm.Aes128">
            <summary>
            Strong AES Encryption with 128-bit keys.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.EncryptionAlgorithm.Aes192">
            <summary>
            Strong AES Encryption with 192-bit keys.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.EncryptionAlgorithm.Aes256">
            <summary>
            Strong AES Encryption with 256-bit keys.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.EncryptionAlgorithm.None">
            <summary>
            No encryption.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Standard PKZIP encryption, considered weak by today's standards.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.EncryptionAlgorithm.Unknown">
            <summary>
            Encryption algorithm is not defined.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.SpanningMode">
            <summary>
            Specifies how the archive file will be stored on disk.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.SpanningMode.None">
            <summary>
            The archive will be stored as a single file.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.SpanningMode.Spanning">
            <summary>
            The archive file will be stored on removable disks.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.SpanningMode.Splitting">
            <summary>
            The archive will be stored as multiple  files.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.VolumeSettings">
            <summary>
            Provides settings for archive spanning and splitting.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.VolumeSettings.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.Compression.VolumeSettings"/> class with default parameters.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.VolumeSettings.VolumeNumberInFileName">
            <summary>
            Gets or sets a boolean value indicating whether volume number will be inserted in file name instead of file extension. 
            </summary>
            <remarks>
            <p>
            If the value is set <c>true</c>, volume file names will be like Archive_001.zip, Archive_002.zip, ... When it's <c>false</c> 
            volume file names will be like Archive.z01, Archive.z02, ... Default value is <c>false</c>.
            </p>
            <p>
            You can also specify custom name for each volume using <see cref="E:ComponentPro.Compression.Zip.BlankVolumeRequested"/> event handler.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.VolumeSettings.FirstVolumeSize">
            <summary>
            Gets or sets the size of the first volume (to reserve free space on first disk) in bytes. Default value is <c>0</c> - auto detect.
            </summary> 
            <remarks>
            This specifies the size of first volume, minimum size is 64 Kb. If it is set to 0 the size of the first volume will be the same as other volumes and will be defined by <see cref="P:ComponentPro.Compression.VolumeSettings.VolumeSize"/> value.
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.VolumeSettings.VolumeSize">
            <summary>
            Gets or sets the size of the volumes for archive splitting or spanning. Default value is <c><see cref="P:ComponentPro.Compression.VolumeSettings.VolumeSize"/>.AutoDetect</c>.
            </summary> 
            <remarks>
            This specifies the size of the volumes for archive splitting or spanning. If it is set to Custom, then <see cref="P:ComponentPro.Compression.VolumeSettings.CustomVolumeSize"/> will be used.
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.VolumeSettings.CustomVolumeSize">
            <summary>
            Gets or sets the custom size (in bytes) of the volumes for archive splitting or spanning. It's only effective when <see cref="P:ComponentPro.Compression.VolumeSettings.VolumeSize"/> is set to <c><see cref="F:ComponentPro.Compression.VolumeSize.Custom"/></c>.
            </summary>
            <remarks>
            This specifies the custom size of the volumes for archive splitting or spanning. This parameter can be used only when <see cref="P:ComponentPro.Compression.VolumeSettings.VolumeSize"/> is set to <see cref="F:ComponentPro.Compression.VolumeSize.Custom"/>.
            </remarks>
        </member>
        <member name="T:ComponentPro.Compression.VolumeSize">
            <summary>
            Specifies the size of the multi-spanning archive volumes.
            </summary>
            <remarks>
            <p>When <see cref="P:ComponentPro.Compression.VolumeSettings.VolumeSize"/> is set to <see cref="T:ComponentPro.Compression.VolumeSize">AutoDetect</see>, the volume size will be auto detected.</p>
            <p>To set custom volume size, please use <c>Custom</c></p>
            </remarks>
        </member>
        <member name="F:ComponentPro.Compression.VolumeSize.AutoDetect">
            <summary>
            Autodetect of the volume size.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.VolumeSize.Custom">
            <summary>
            Custom volume size. The volume size is specified in <see cref="P:ComponentPro.Compression.VolumeSettings.CustomVolumeSize"/> property.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.VolumeSize.Disk1_44MB">
            <summary>
            Volume size is 1.44 Mb (3.5" floppy disk).
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.VolumeSize.Disk100MB">
            <summary>
            Volume size is 100 Mb (IOMEGA disk).
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.VolumeSize.Disk200MB">
            <summary>
            Volume size is 200 Mb (MO disk).
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.VolumeSize.Disk600MB">
            <summary>
            Volume size is 600 Mb (MO disk).
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.VolumeSize.Disk650MB">
            <summary>
            Volume size is 650 Mb (74 Min. compact disk).
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.VolumeSize.Disk700MB">
            <summary>
            Volume size is 700 Mb (80 Min. compact disk).
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.VolumeSize.Disk4700MB">
            <summary>
            Volume size is 4700 Mb (DVD disk). 
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.Zip64Mode">
             <summary>
             Defines Zip 64 modes.
             </summary>
             <remarks>
             <p>By using <c>Auto</c> or <c>Always</c>, you can create archives or add files with size greater than 4GB.</p>
             <p>
             Use <see cref="T:ComponentPro.Compression.Zip64Mode">Auto</see> for auto-detection of the archive format depending on sizes of the files being added. Set this property to <see cref="T:ComponentPro.Compression.Zip64Mode">Always</see> to add files in Zip64 format regardless of file size. 
             <see cref="T:ComponentPro.Compression.Zip64Mode">Disabled</see> is the default value for creating archives in normal Zip format, compatible with most of archivers.
             </p>
             <p>
             NOTE: Zip64 format is not supported by some archivers. Nevertheless we do not guarantee that it is compatible with other programs.
             </p>
            </remarks>
        </member>
        <member name="F:ComponentPro.Compression.Zip64Mode.Disabled">
            <summary>
            A default value for creating archives in normal Zip format.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.Zip64Mode.Auto">
            <summary>
            Auto-detection of the archive format depending on sizes of the files being added.
            </summary>
        </member>
        <member name="F:ComponentPro.Compression.Zip64Mode.Always">
            <summary>
            Always create archives in Zip64 format.
            </summary>
        </member>
        <member name="T:ComponentPro.Compression.PasswordNeededEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Compression.Zip.PasswordNeeded"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.PasswordNeededEventArgs.FileName">
            <summary>
            Gets the current file name.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.PasswordNeededEventArgs.Password">
            <summary>
            Gets or sets the password for the decryption when extracting the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.PasswordNeededEventArgs.UpdateArchivePassword">
            <summary>
            Gets or sets a boolean value indicating whether to update the archive password.
            </summary>
            <value><b>true</b> if you want to update the archive password; otherwise is <c>false</c>. Default value is <b>false</b>.</value>
        </member>
        <member name="P:ComponentPro.Compression.PasswordNeededEventArgs.SkipFile">
            <summary>
            Gets or sets a boolean value indicating whether the current file will be skipped.
            </summary>
            <value><b>true</b> if you want to skip this file; otherwise is <c>false</c>. Default value is <b>false</b>.</value>
            <remarks>
            This property is not available for <see cref="T:ComponentPro.Compression.RealTimeZip"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Compression.PasswordNeededEventArgs.Cancel">
            <summary>
            Gets or sets a boolean value indicating whether to cancel the operation.
            </summary>
            <value><b>true</b> if you want to cancel the operation; otherwise is <c>false</c>. Default value is <b>false</b>.</value>
            <remarks>
            When this property is set to <c>true</c>, the library will throw a <see cref="T:ComponentPro.Compression.ZipException"/> exception with <see cref="F:ComponentPro.Compression.ZipExceptionStatus.IncorrectPassword"/> state.
            </remarks>
        </member>
        <member name="T:ComponentPro.Compression.BlankVolumeRequestedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Compression.Zip.BlankVolumeRequested"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.BlankVolumeRequestedEventArgs.VolumeFileName">
            <summary>
            Gets or sets the volume file name.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.BlankVolumeRequestedEventArgs.VolumeNumber">
            <summary>
            Gets the volume number.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.BlankVolumeRequestedEventArgs.Cancel">
            <summary>
            Gets or sets a boolean value indicating whether to cancel the operation.
            </summary>
            <value><b>true</b> if you want to cancel the operation; otherwise is <c>false</c>. Default value is <b>false</b>.</value>
        </member>
        <member name="T:ComponentPro.Compression.ExistingVolumeRequestedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Compression.Zip.ExistingVolumeRequested"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ExistingVolumeRequestedEventArgs.FirstVolume">
            <summary>
            Gets a boolean value indicating whether this is the first volume requested.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ExistingVolumeRequestedEventArgs.LastVolume">
            <summary>
            Gets a boolean value indicating whether this is the last volume requested.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ExistingVolumeRequestedEventArgs.VolumeFileName">
            <summary>
            Gets or sets the volume file name.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ExistingVolumeRequestedEventArgs.VolumeNumber">
            <summary>
            Gets the volume number.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ExistingVolumeRequestedEventArgs.Cancel">
            <summary>
            Gets or sets a boolean value indicating whether to cancel the operation.
            </summary>
            <value><b>true</b> if you want to cancel the operation; otherwise is <c>false</c>. Default value is <b>false</b>.</value>
        </member>
        <member name="T:ComponentPro.Compression.DiskFullEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Compression.Zip.DiskFull"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.DiskFullEventArgs.VolumeFileName">
            <summary>
            Gets or sets the volume file name.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.DiskFullEventArgs.VolumeNumber">
            <summary>
            Gets the volume number.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.DiskFullEventArgs.Cancel">
            <summary>
            Gets or sets a boolean value indicating whether to cancel the operation.
            </summary>
            <value><b>true</b> if you want to cancel the operation; otherwise is <c>false</c>. Default value is <b>false</b>.</value>
        </member>
        <member name="T:ComponentPro.Compression.Libs.ZLib.ZStreamException">
            <summary>
            Exceptions that occur in ZStream
            </summary>
            <exclude />
        </member>
        <member name="M:ComponentPro.Compression.Libs.ZLib.ZStreamException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.Libs.ZLib.ZStreamException.#ctor(System.String)">
            <summary>
            Constructor which takes one parameter - an error message
            </summary>
        </member>
    </members>
</doc>
