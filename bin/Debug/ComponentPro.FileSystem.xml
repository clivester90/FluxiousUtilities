<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.FileSystem</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.IO.FileSystemItemAlreadyExistsException">
            <summary>
            The exception that is thrown when an attempt to write a file that already exists on a file system fails.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileSystemException">
            <summary>
            Represents the exception that is thrown when an error occurs while a file operation is in progress.
            </summary>    
        </member>
        <member name="M:ComponentPro.IO.FileSystemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemException"/>
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemException.#ctor(System.String,ComponentPro.IO.FileSystemExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemException"/>
            </summary>
            <param name="message">The error message.</param>
            <param name="status">The exception status.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemException.#ctor(System.String,System.Exception,ComponentPro.IO.FileSystemExceptionStatus,ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemException"/>
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="status">The exception status.</param>
            <param name="sourceItem">The source <see cref="T:ComponentPro.IO.FileInfoBase"/> related to the error.</param>
            <param name="destinationItem">The destination <see cref="T:ComponentPro.IO.FileInfoBase"/> related to the error.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemException.#ctor(System.String,System.Exception,ComponentPro.IO.FileSystemExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemException"/> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.IO.FileSystemExceptionStatus"/> values.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the <see cref="T:ComponentPro.IO.FileSystemException"/>.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:ComponentPro.IO.FileSystemException.Cancel">
            <summary>
            Gets a boolean value indicating whether the operation has to be canceled.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemException.Status">
            <summary>
            Gets the exception status.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemException.SourceItem">
            <summary>
            Gets the source <see cref="T:ComponentPro.IO.FileInfoBase"/> that is related to the error.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemException.DestinationItem">
            <summary>
            Gets the destination <see cref="T:ComponentPro.IO.FileInfoBase"/> that is related to the error.
            In a multi-file transfer, this property is a null reference when the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.RetainFileList"/> property of a TransferOptions object is <c>false</c>(default behavior to reduce memory footprint).
            To have the destination item info available, set the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.RetainFileList"/> property to <c>true</c>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystemItemAlreadyExistsException.#ctor(ComponentPro.IO.FileInfoBase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemItemAlreadyExistsException"/> class.
            </summary>
            <param name="item">The item information.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemItemAlreadyExistsException.#ctor(ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemItemAlreadyExistsException"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="path">The item path.</param>
            <param name="isFile">Indicates whether the item is a file.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemItemAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemItemAlreadyExistsException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentPro.IO.FileSystemItemNotFoundException">
            <summary>
            The exception that is thrown when an attempt to access a file that does not exist on a file system fails.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystemItemNotFoundException.#ctor(ComponentPro.IO.FileInfoBase)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="item">The file object related to the error.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemItemNotFoundException.#ctor(ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="fileSystem">The file system related to the error.</param>
            <param name="path">The path to the item related to the error.</param>
            <param name="isFile">Indicates whether the item is a file or directory.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemItemNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="path">The path to the item related to the error.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemItemNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemItemNotFoundException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentPro.IO.FileSystemTransferStatistics">
            <summary>
            Represents the statistics of a multi-file operation.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystemTransferStatistics.SetTag(System.Int32,System.Object)">
            <summary>
            Assigns the specified user-defined object to the specified key.
            </summary>
            <param name="keyId">The unique key to keep track of the user-defined object.</param>
            <param name="userTag">The user-defined tag object, or a null reference to remove the key.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemTransferStatistics.GetTag(System.Int32)">
            <summary>
            Gets the user-defined object associated with the specified key.
            </summary>
            <param name="keyId">The key identifier to lookup for the user-defined object.</param>
            <returns>The user-defined object.</returns>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.Options">
            <summary>
            Gets the multi-file operation's options.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystemTransferStatistics.Progress">
            <summary>
            Occurs when a block of data is transferred or a file operation is being or has been executed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystemTransferStatistics.TransferConfirm">
            <summary>
            Occurs when an issue (e.g. existing file found, symlink detected or a transfer error encountered) has been detected while transferring files.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.TotalBytes">
            <summary>
            Gets the total number of bytes to transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.TotalFiles">
            <summary>
            Gets the total number of files to transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.TotalDirectories">
            <summary>
            Gets the total number of files to transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.FilesProcessed">
            <summary>
            Gets the total number of files successfully processed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.FilesSkipped">
            <summary>
            Gets the total number of files skipped.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.DirectoriesProcessed">
            <summary>
            Gets the total number of directories successfully processed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.DirectoriesSkipped">
            <summary>
            Gets the total number of directories skipped.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.TotalBytesTransferred">
            <summary>
            Gets the total number of bytes successfully transferred/processed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.TotalBytesSkipped">
            <summary>
            Gets the total number of bytes skipped.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.TotalPercentage">
            <summary>
            Gets the total progress percentage. 
            This property is only available when the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> property of the <see cref="T:ComponentPro.IO.TransferOptions"/> object has been set to true.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.LastException">
            <summary>
            Gets the last error encoutered while processing items.
            </summary>
            <remarks>
            Loop through the <see cref="P:ComponentPro.IO.FileSystemTransferStatistics.FileList"/> list and access the <see cref="P:ComponentPro.IO.ProgressFileItem.Error"/> to get error for each item.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.Started">
            <summary>
            Gets the start time of the operation.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.Ended">
            <summary>
            Gets the end time of the operation.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.ElapsedTime">
            <summary>
            Gets the amount of time that has passed since the operation started if the operation is still in progress; or the amount of time since the operation started to its end.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.BytesPerSecond">
            <summary>
            Gets the number of transferred bytes per second. It's only available when the transfer operation completes.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.FileList">
            <summary>
            Gets the list of files and directories that have been processed or being processed, or a null reference if <see cref="P:ComponentPro.IO.MultiFileOperationOptions.RetainFileList"/> is <c>false</c> (to reduce memory footprint while transferring multiple files by default).
            See example code of this property to know how to access the file list.
            </summary>
            <value>The files added to the queue if <see cref="P:ComponentPro.IO.MultiFileOperationOptions.RetainFileList"/> is <c>true</c>; otherwise, null.</value>
            <remarks>
            By default, <see cref="P:ComponentPro.IO.MultiFileOperationOptions.RetainFileList"/> is set to <c>false</c> to reduce memory footprint while executing multi-file operations, making this property always returns a null reference. 
            Set <see cref="P:ComponentPro.IO.MultiFileOperationOptions.RetainFileList"/> to true to retrieve the list of files and directories.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.Threads">
            <summary>
            Gets the list of <see cref="T:ComponentPro.IO.TransferThreadInfo"/> objects used in the multi-thread transfers. In single-thread transfers, this property returns null.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileContentComparer">
            <summary>
            Represents file content comparer.
            </summary>
            <remarks>
            This compares content of multiple files at the same time on-the-fly without retriving the whole file content. When it detects a difference or EOF is reached, the comparison of a file is complete.
            </remarks>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileContentComparer"/>
        </member>
        <member name="T:ComponentPro.IO.IoFileComparer">
            <summary>
            Defines the base File Content Comparer. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ComponentPro.IO.FileComparer" -->
        <member name="M:ComponentPro.IO.FileComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])">
            <summary>
            Compares the target files to the master file and returns values indicating whether the target files are equal to the master.
            </summary>
            <param name="masterFile">The master file.</param>
            <param name="targetFiles">The target files to compare.</param>
            <returns>A list of <see cref="T:ComponentPro.IO.FileComparisonResult"/> containing the result of the comparision.</returns>
            <remarks>
            When two file objects are compared in the synchronization process, if the target file is different to the master file (the result contains <see cref="T:ComponentPro.IO.FileComparisonResult"/>.NotEqual), then the target file will be replaced.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileComparer.op_Addition(ComponentPro.IO.FileComparer,ComponentPro.IO.FileComparer)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.AndFileComparer"/> object from the specified search conditions. It's similar to "a AND b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.AndFileComparer"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileComparer.op_BitwiseAnd(ComponentPro.IO.FileComparer,ComponentPro.IO.FileComparer)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.AndFileComparer"/> object from the specified search conditions. It equals to "a AND b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.AndFileComparer"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileComparer.op_BitwiseOr(ComponentPro.IO.FileComparer,ComponentPro.IO.FileComparer)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.OrFileComparer"/> object from the specified search conditions. It equals to "a OR b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.OrFileComparer"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileComparer.op_LogicalNot(ComponentPro.IO.FileComparer)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.NotFileComparer"/> object from the specified search condition. It equals to "NOT a".
            </summary>
            <param name="a">The search condition A.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.NotFileComparer"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.IoFileComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])">
            <summary>
            Compares the target files to the master file and returns values indicating whether the target files are equal to the master.
            </summary>
            <param name="masterFile">The master file.</param>
            <param name="targetFiles">The target files to compare.</param>
            <returns>A list of <see cref="T:ComponentPro.IO.FileComparisonResult"/> containing the result of the comparision.</returns>
            <remarks>
            When two file objects are compared in the synchronization process, if the target file is different to the master file (the result contains <see cref="T:ComponentPro.IO.FileComparisonResult"/>.NotEqual), then the target file will be replaced.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IoFileComparer.OnCompareFiles(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[],ComponentPro.IO.FileComparisonResult[]@,System.Boolean[])">
            <summary>
            Compares files and set results in the specified result list.
            </summary>
            <param name="masterFile">The master file.</param>
            <param name="targetFiles">The target files.</param>
            <param name="results">The result list.</param>
            <param name="overrideResults">A list of boolean values indicating the corresponding result in <paramref name="results"/> is overridden.</param>
        </member>
        <member name="M:ComponentPro.IO.FileContentComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileContentComparer"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileContentComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileContentComparer"/> class that can check whether interruped file is able to be resumed.
            </summary>
            <param name="checkForResumability"><c>true</c> to check the resumability of source and destination files.</param>
        </member>
        <member name="M:ComponentPro.IO.FileContentComparer.OnCompareFiles(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[],ComponentPro.IO.FileComparisonResult[]@,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:ComponentPro.IO.DiskFileInfoCollection">
            <summary>
            Represents a collection of <see cref="T:ComponentPro.IO.DiskFileInfo"/> objects.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileInfoCollection`1">
            <summary>
            Provides a container for a collection of <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.
            </summary>
            <typeparam name="TFileInfo">A File Info class that derives the <see cref="T:ComponentPro.IO.FileInfoBase"/> class.</typeparam>	
        </member>
        <member name="T:ComponentPro.IO.FileInfoCollection">
            <summary>
            Defines a collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Add(ComponentPro.IO.FileInfoBase)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to be added to the end of the collection.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Contains(ComponentPro.IO.FileInfoBase)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to locate in the collection.</param>
            <returns><c>true</c> if item is found in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an item with the specified name.
            </summary>
            <param name="name">The name of the item to locate in the collection.</param>
            <returns><c>true</c> if item with the specified name is found in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.CopyTo(ComponentPro.IO.FileInfoBase[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> to a one-dimensional
            <see cref="T:ComponentPro.IO.FileInfoBase"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based <see cref="T:ComponentPro.IO.FileInfoBase"/> array that is the destination of the elements copied from <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the length of array.  
            -or- The number of elements in the source list is greater than the available space from <paramref name="index"/> to the end of the destination array.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Remove(ComponentPro.IO.FileInfoBase)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.IndexOf(ComponentPro.IO.FileInfoBase)">
            <summary>
            Determines the index of a specific item on the list. 
            </summary>
            <param name="item">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to locate on the list.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Insert(System.Int32,ComponentPro.IO.FileInfoBase)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="item">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to insert. The value can be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.  -or- index is greater than <see cref="P:ComponentPro.IO.FileInfoCollection.Count"/>.</exception>
            <exception cref="T:System.ArgumentException">The file name is already on the list.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:ComponentPro.IO.FileInfoBase"/> at the specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.AddRange(ComponentPro.IO.FileInfoCollection)">
            <summary>
            Adds the elements of an <see cref="T:ComponentPro.IO.FileInfoCollection"/> to the end of the list.
            </summary>
            <param name="c">The <see cref="T:ComponentPro.IO.FileInfoCollection"/> whose elements should be added to the end of the list.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.AddRange(System.Collections.Generic.IEnumerable{ComponentPro.IO.FileInfoBase})">
            <summary>
            Adds the elements of the specified collection to the end of the list.
            </summary>
            <param name="c">The <see cref="T:ComponentPro.IO.FileInfoCollection"/> whose elements should be added to the end of the list.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Sort">
            <summary>
            Sorts the items in the entire <see cref="T:ComponentPro.IO.FileInfoCollection"/> alphabetically.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire <see cref="T:ComponentPro.IO.FileInfoCollection"/> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort alphabetically</param>
            <exception cref="T:System.InvalidOperationException">An error occurred while comparing two elements.</exception>
            <exception cref="T:System.ArgumentException">null is passed for comparer, and the elements in the list do not implement System.IComparable.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a section of <see cref="T:ComponentPro.IO.FileInfoCollection"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort alphabetically.</param>
            <exception cref="T:System.InvalidOperationException">An error occurred while comparing two elements.</exception>
            <exception cref="T:System.ArgumentException">null is passed for comparer, and the elements in the list do not implement System.IComparable.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.ToArray">
            <summary>
            Copies the elements of the <see cref="T:ComponentPro.IO.FileInfoCollection"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:ComponentPro.IO.FileInfoCollection"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Filter(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the names of files in the <see cref="T:ComponentPro.IO.FileInfoCollection"/> that match the specified <paramref name="regExp">search pattern</paramref>.
            </summary>
            <param name="regExp">The regular expression to match the names against.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Filter(System.String,System.Boolean)">
            <summary>
            Returns the names of files in the <see cref="T:ComponentPro.IO.FileInfoCollection"/> that match the specified <paramref name="searchPattern">search pattern</paramref>.
            </summary>
            <param name="searchPattern">The search string which may contain * and ? wildcards to match the items against. e.g <b>"my*"</b> searches for all files with names starting with <b>"my"</b>; <b>"*.txt"</b> searchs for all files with names ending with <b>".txt"</b>.</param>
            <param name="caseSensitive">If tree, perform unix-like case-sensitive matching.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.Filter(System.String)">
            <summary>
            Returns the names of files in the <see cref="T:ComponentPro.IO.FileInfoCollection"/> that match the specified <paramref name="searchPattern">search pattern</paramref>.
            </summary>
            <param name="searchPattern">The search string which may contain * and ? wildcards to match the items against. e.g <b>"my*"</b> searches for all files with names starting with <b>"my"</b>; <b>"*.txt"</b> searchs for all files with names ending with <b>".txt"</b>.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection.ToNameList(System.Boolean)">
            <summary>
            Returns the list of the full paths or names of the items in this object.
            </summary>
            <param name="includeDirectoryPath">Indicates whether to return the full paths or names of the items.</param>
            <returns></returns>
        </member>
        <member name="P:ComponentPro.IO.FileInfoCollection.UnfilteredCount">
            <summary>
            For internal uses only.
            </summary>        
            <excludeall/>
        </member>
        <member name="P:ComponentPro.IO.FileInfoCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoCollection.IsReadOnly">
            <summary>
            Indicates whether the collection is read-only. This return <c>false</c> by default.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ComponentPro.IO.FileInfoBase"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.IO.FileInfoBase"/> to get.</param>
            <value><see cref="T:ComponentPro.IO.FileInfoBase"/> of the specified index.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:ComponentPro.IO.FileInfoBase"/> of the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:ComponentPro.IO.FileInfoBase"/> to get.</param>
            <value><see cref="T:ComponentPro.IO.FileInfoBase"/> of the specified name.</value>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</returns>
            <remarks>
            A shallow copy of a collection copies only the elements
            of the collection, whether they are reference types or value
            types, but it does not copy the objects that the references
            refer to. The references in the new collection point to the same
            objects that the references in the original collection point to.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.GetEnumerator(System.Int32,System.Int32)">
            <summary>
            Returns an enumerator for a section of the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <param name="index">The zero-based starting index of the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> section that the enumerator should refer to.</param>
            <param name="count">The number of elements in the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> section that the enumerator should refer to.</param>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the specified section of the ArrayList.</returns>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Add(ComponentPro.IO.FileInfoBase)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to be added to the end of the collection. The value can't be null.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Add(`0)">
            <summary>
            Adds the <typeparamref name="TFileInfo"/> to the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <param name="item">The <typeparamref name="TFileInfo"/> to be added to the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.AddRange(ComponentPro.IO.FileInfoCollection)">
            <summary>
            Adds the elements of an <see cref="T:ComponentPro.IO.FileInfoCollection"/> to the end of the list.
            </summary>
            <param name="c">The <see cref="T:ComponentPro.IO.FileInfoCollection"/> whose elements should be added to the end of the list.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.AddRange(System.Collections.Generic.IEnumerable{ComponentPro.IO.FileInfoBase})">
            <summary>
            Adds the elements of the specified collection to the end of the list.
            </summary>
            <param name="c">The <see cref="T:ComponentPro.IO.FileInfoCollection"/> whose elements should be added to the end of the list.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the list.
            </summary>
            <param name="c">The <see cref="T:ComponentPro.IO.FileInfoCollection"/> whose elements should be added to the end of the list.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Remove(`0)">
            <summary>
            Removes the specified <typeparamref name="TFileInfo"/> from the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <param name="item">The <typeparamref name="TFileInfo"/> to remove from the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Remove(System.String)">
            <summary>
            Removes the <typeparamref name="TFileInfo"/> with the specified name from the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <param name="name">The name of <typeparamref name="TFileInfo"/> to remove from the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <typeparamref name="TFileInfo"/> at the specified index from the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <param name="index">The zero-based index of the <typeparamref name="TFileInfo"/> to remove.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.GetTotalSize">
            <summary>
            Gets the total size of files contained in the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <returns>The total size of files contained it the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Filter(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the names of files in the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> that match the specified <paramref name="regExp">search pattern</paramref>.
            </summary>
            <param name="regExp">The regular expression to match the names against.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="regExp"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Filter(System.String,System.Boolean)">
            <summary>
            Returns the names of files in the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> that match the specified <paramref name="searchPattern">search pattern</paramref>.
            </summary>
            <param name="searchPattern">The search string which may contain * and ? wildcards to match the items against. e.g <b>"my*"</b> searches for all files with names starting with <b>"my"</b>; <b>"*.txt"</b> searchs for all files with names ending with <b>".txt"</b>.</param>
            <param name="caseSensitive">If tree, perform unix-like case-sensitive matching.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="searchPattern"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="searchPattern"/> is empty or contains illegal mask.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Filter(System.String)">
            <summary>
            Returns the names of files in the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> that match the specified <paramref name="searchPattern">search pattern</paramref>.
            </summary>
            <param name="searchPattern">The search string which may contain * and ? wildcards to match the items against. e.g <b>"my*"</b> searches for all files with names starting with <b>"my"</b>; <b>"*.txt"</b> searchs for all files with names ending with <b>".txt"</b>.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="searchPattern"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="searchPattern"/> is empty or contains illegal mask.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Filter(ComponentPro.IO.SearchCondition)">
            <summary>
            Returns the list of files in the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> that match the specified search conditions.
            </summary>
            <param name="searchConditions">The search conditions to match against the files. (null reference (Nothing in VB.NET) for searching all files).</param>
            <returns>A <typeparamref name="TFileInfo"/> array containing the files in the specified directory that match the specified search conditions.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> to a compatible one-dimensional
            <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the length of array.  
            -or- The number of elements in the source list is greater than the available space from <paramref name="index"/> to the end of the destination array.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> to a one-dimensional
            <typeparamref name="TFileInfo"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based <typeparamref name="TFileInfo"/> array that is the destination of the elements copied from <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the length of array.  
            -or- The number of elements in the source list is greater than the available space from <paramref name="index"/> to the end of the destination array.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.CopyTo(ComponentPro.IO.FileInfoBase[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> to a one-dimensional
            <see cref="T:ComponentPro.IO.FileInfoBase"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based <see cref="T:ComponentPro.IO.FileInfoBase"/> array that is the destination of the elements copied from <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the length of array.  
            -or- The number of elements in the source list is greater than the available space from <paramref name="index"/> to the end of the destination array.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.IndexOf(ComponentPro.IO.FileInfoBase)">
            <summary>
            Determines the index of a specific item on the list. 
            </summary>
            <param name="item">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to locate on the list.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item on the list. 
            </summary>
            <param name="item">The <typeparamref name="TFileInfo"/> to locate on the list.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Insert(System.Int32,ComponentPro.IO.FileInfoBase)">
            <summary>
            Inserts an element into the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="item">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to insert. The value can be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.  -or- index is greater than <see cref="P:ComponentPro.IO.FileInfoCollection`1.Count"/>.</exception>
            <exception cref="T:System.ArgumentException">The file name is already on the list.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="item">The <typeparamref name="TFileInfo"/> to insert. The value can be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.  -or- index is greater than <see cref="P:ComponentPro.IO.FileInfoCollection`1.Count"/>.</exception>
            <exception cref="T:System.ArgumentException">The file name is already on the list.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Contains(`0)">
            <summary>
            Determines whether the item is in the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <param name="item">The item to locate in the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</param>
            <returns>True if the item is located in the collection; false otherwise.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Contains(System.String)">
            <summary>
            Determines whether the collection contains an item with the specified name.
            </summary>
            <param name="name">The name of the item to locate in the collection.</param>
            <returns><c>true</c> if item with the specified name is found in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Contains(ComponentPro.IO.FileInfoBase)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to locate in the collection. The value can be null.</param>
            <returns><c>true</c> if item is found in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Sort">
            <summary>
            Sorts the items in the entire <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> alphabetically.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort alphabetically. It can be an instance of the <see cref="T:ComponentPro.IO.FileInfoComparer"/>.</param>
            <exception cref="T:System.InvalidOperationException">An error occurred while comparing two elements.</exception>
            <exception cref="T:System.ArgumentException">null is passed for comparer, and the elements in the list do not implement System.IComparable.</exception>
            <seealso cref="T:ComponentPro.IO.FileInfoComparer"/>
        </member>
        <member name="M:ComponentPro.IO.FileInfoCollection`1.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a section of <see cref="T:ComponentPro.IO.FileInfoCollection`1"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort alphabetically. It can be an instance of the <see cref="T:ComponentPro.IO.FileInfoComparer"/>.</param>
            <exception cref="T:System.InvalidOperationException">An error occurred while comparing two elements.</exception>
            <exception cref="T:System.ArgumentException">null is passed for comparer, and the elements in the list do not implement System.IComparable.</exception>
            <seealso cref="T:ComponentPro.IO.FileInfoComparer"/>
        </member>
        <member name="P:ComponentPro.IO.FileInfoCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:ComponentPro.IO.FileInfoCollection`1"/>.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoCollection`1.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="TFileInfo"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <typeparamref name="TFileInfo"/> to get.</param>
            <value><typeparamref name="TFileInfo"/> of the specified index.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoCollection`1.Item(System.String)">
            <summary>
            Gets the <typeparamref name="TFileInfo"/> of the specified name.
            </summary>
            <param name="name">The name of the <typeparamref name="TFileInfo"/> to get.</param>
            <value><typeparamref name="TFileInfo"/> of the specified name.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoCollection`1.UnfilteredCount">
            <excludeall/>
            <summary>
            Gets the number of unfiltered items.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileComparisonResult">
            <summary>
            Represents the file comparison result.
            This result enum is used for the property <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.ComparisonResult"/>.
            </summary>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>        
        </member>
        <member name="F:ComponentPro.IO.FileComparisonResult.Equal">
            <summary>
            Source file and destination file are equal.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileComparisonResult.NotEqual">
            <summary>
            Source file and destination file are different.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileComparisonResult.Resumable">
            <summary>
            Destination file is not completely copied. This is used for <see cref="T:ComponentPro.IO.FileContentComparer"/>, <see cref="T:ComponentPro.IO.FileSizeComparer"/> and <see cref="T:ComponentPro.IO.FileChecksumComparer"/> classes.
            This options is only used if <see cref="P:ComponentPro.IO.QuickSyncOptions.AllowResuming"/> is true.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SymlinksResolveAction">
            <summary>
            Specifies actions taken on symlinks.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SymlinksResolveAction.Follow">
            <summary>
            Resolve and follow the symlink. Following a link may lead to recursive link problem. 
            When the component detects recursive links a <see cref="T:ComponentPro.IO.FileSystemException"/> with <see cref="F:ComponentPro.IO.FileSystemExceptionStatus.RecursiveLinkDetected"/> status is raised.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SymlinksResolveAction.FollowAndIgnoreRecursiveSymlinks">
            <summary>
            Resolve and follow the symlink. Recursive links are to be ignored.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SymlinksResolveAction.Skip">
            <summary>
            Skip the symlink - the default behavior for the multi-file transfer operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SymlinksResolveAction.Confirm">
            <summary>
            Raise the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event to confirm <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NextAction">next action</see> on the symlink.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileChecksumType">
            <summary>
            Specifies the type of checksum used for the <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksum"/> method.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileChecksumType.Crc">
            <summary>Cyclic Redundancy Check (CRC-32).</summary>
        </member>
        <member name="F:ComponentPro.IO.FileChecksumType.MD5">
            <summary>Message-Digest algorithm 5.</summary>
        </member>
        <member name="F:ComponentPro.IO.FileChecksumType.SHA1">
            <summary>Secure Hash Alogrithm.</summary>
        </member>
        <member name="F:ComponentPro.IO.FileChecksumType.SHA224">
            <summary>Secure Hash Alogrithm.</summary>
        </member>
        <member name="F:ComponentPro.IO.FileChecksumType.SHA256">
            <summary>Secure Hash Alogrithm.</summary>
        </member>
        <member name="F:ComponentPro.IO.FileChecksumType.SHA384">
            <summary>Secure Hash Alogrithm.</summary>
        </member>
        <member name="F:ComponentPro.IO.FileChecksumType.SHA512">
            <summary>Secure Hash Alogrithm.</summary>
        </member>
        <member name="T:ComponentPro.IO.FileOverwriteMode">
            <summary>
            Specifies actions to resolve file existing issue.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.Confirm">
            <summary>
            Raise the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event to confirm next action on an existing file.
            By handling the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event, the program can let user decide whether to overwrite the existing files.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.Skip">
            <summary>
            Skip existing files.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.Overwrite">
            <summary>
            Overwrite existing files without confirmation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.OverwriteOlderFiles">
            <summary>
            Overwrite existing files without confirmation if they are older than source files.
            If the File System is SFTP or FTP, using this mode is not recommended because modification dates are often misreported by FTP and SFTP servers, making this mode unreliable.
            We strongly recommend to use the <see cref="F:ComponentPro.IO.FileOverwriteMode.CustomCompare"/> mode and set the <see cref="P:ComponentPro.IO.TransferOptions.Comparer"/> property to a <see cref="T:ComponentPro.IO.FileComparer">file comparer</see> 
            or develop a custom solution by handling the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            Make sure your system time is synchronized with the destination file system/server. 
            If the source or destination file system is <see cref="T:ComponentPro.IO.IRemoteFileSystem"/> and the time differs (e.g. different timezone), specify a timezone offset in the <see cref="P:ComponentPro.IO.FileSystem.ServerTimeZoneOffset"/> property.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.OverwriteNewerFiles">
            <summary>
            Overwrite existing files without confirmation if they are newer than source files.
            If the File System is SFTP or FTP, using this mode is not recommended because modification dates are often misreported by FTP and SFTP servers, making this mode unreliable.
            We strongly recommend to use the <see cref="F:ComponentPro.IO.FileOverwriteMode.CustomCompare"/> mode and set the <see cref="P:ComponentPro.IO.TransferOptions.Comparer"/> property to a <see cref="T:ComponentPro.IO.FileComparer">file comparer</see> 
            or develop a custom solution by handling the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            Make sure your system time is synchronized with the destination file system/server. 
            If the source or destination file system is <see cref="T:ComponentPro.IO.IRemoteFileSystem"/> and the time differs (e.g. different timezone), specify a timezone offset in the <see cref="P:ComponentPro.IO.FileSystem.ServerTimeZoneOffset"/> property.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.OverwriteFilesWithDifferentLastModifiedTime">
            <summary>
            Overwrite existing files without confirmation if they are newer or older than source files.
            If the File System is SFTP or FTP, using this mode is not recommended because modification dates are often misreported by FTP and SFTP servers, making this mode unreliable.
            We strongly recommend to use the <see cref="F:ComponentPro.IO.FileOverwriteMode.CustomCompare"/> mode and set the <see cref="P:ComponentPro.IO.TransferOptions.Comparer"/> property to a <see cref="T:ComponentPro.IO.FileComparer">file comparer</see> 
            or develop a custom solution by handling the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            Make sure your system time is synchronized with the destination file system/server. 
            If the source or destination file system is <see cref="T:ComponentPro.IO.IRemoteFileSystem"/> and the time differs (e.g. different timezone), specify a timezone offset in the <see cref="P:ComponentPro.IO.FileSystem.ServerTimeZoneOffset"/> property.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.OverwriteFilesWithDifferentSizes">
            <summary>
            Overwrite existing files with different sizes. The destination file will be overwritten without confirmation if it is different to the source file in length.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.OverwriteFilesWithDifferentChecksums">
            <summary>
            Overwrite existing files with different checksums. The destination file will be overwritten without confirmation if its checksum is different to the source file's.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.CustomCompare">
            <summary>
            Use <see cref="P:ComponentPro.IO.TransferOptions.Comparer"/> to compare source and destination files. 
            If the return value of the <see cref="M:ComponentPro.IO.FileComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])"/> method indicate that the source and destination files are equal, the existing will be skipped; otherwise, it will be overwritten.
            </summary>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileAttributesComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileContentComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileLastWriteTimeComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileSizeComparer"/>
            <seealso cref="T:ComponentPro.IO.FileComparer"/>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.ResumeFileTransfer">
            <summary>
            Resume file transfer. Not available in file move mode. 
            If the destination file size is less than the source file size, the component will resume file transfer. 
            If there is no difference in file length, the destination file wont be overwritten.
            If the destination file size is greater than the source file size, the destination file will be overwritten.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOverwriteMode.Rename">
            <summary>
            Use a different name for an existing file. 
            New name is generated from the current item according the pattern specified in <see cref="P:ComponentPro.IO.TransferOptions.RenamingPattern"/> ("filename[number].extension" by default).
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferThreadState">
            <summary>
            Defines the state of transfer threads.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferThreadState.Stopped">
            <summary>
            Thread is stopped.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferThreadState.Processing">
            <summary>
            Thread is processing a file or directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferThreadState.Idle">
            <summary>
            Thread is idle and waiting for a new item to process.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferThreadState.Pausing">
            <summary>
            Thread is being paused.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferThreadState.Paused">
            <summary>
            Thread is paused.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferThreadState.Stopping">
            <summary>
            Thread is being stopped.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.GetItemInfoParts">
            <summary>
            Indicates which information of the source file will be obtained before transferring.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.GetItemInfoParts.None">
            <summary>
            Dont get file information before transferring. Using this state may cause the client to raise "Item not found" error.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.GetItemInfoParts.Length">
            <summary>
            Get file length before transferring.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.GetItemInfoParts.Time">
            <summary>
            Get file time before transferring.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.GetItemInfoParts.All">
            <summary>
            Get all the necessary file information before transferring.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.CanGetStreamResult">
            <summary>
            Defines checking result for the <see cref="M:ComponentPro.IO.FileSystem.GetStreamForWriting(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)"/> and <see cref="M:ComponentPro.IO.FileSystem.GetStreamForReading(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)"/> methods of a file system.
            </summary>
            <excludeall/>
        </member>
        <member name="F:ComponentPro.IO.CanGetStreamResult.Yes">
            <summary>
            The file system absolutely supports the requested feature.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.CanGetStreamResult.No">
            <summary>
            The file system does not support the requested feature.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.CanGetStreamResult.TargetFirst">
            <summary>
            The file transferrer should check this feature on the target file system first.
            </summary>        
        </member>
        <member name="T:ComponentPro.IO.AndFileComparer">
            <summary>
            Represents a logical AND operation on a set of <see cref="T:ComponentPro.IO.FileComparer"/> object.
            </summary>
            <seealso cref="T:ComponentPro.IO.NotFileComparer"/>
            <seealso cref="T:ComponentPro.IO.OrFileComparer"/>
        </member>
        <member name="M:ComponentPro.IO.AndFileComparer.#ctor(ComponentPro.IO.FileComparer[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.AndFileComparer"/> class.
            </summary>
            <param name="comparers">A list of file comparers.</param>
        </member>
        <member name="M:ComponentPro.IO.AndFileComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])">
            <summary>
            Compares the target files to the master file and returns values indicating whether the target files are equal to the master.
            </summary>
            <param name="masterFile">The first file.</param>
            <param name="targetFiles">The second file.</param>
            <returns>True if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.OrFileComparer">
            <summary>
            Represents a logical OR operation on a set of <see cref="T:ComponentPro.IO.FileComparer"/> object.
            </summary>
            <seealso cref="T:ComponentPro.IO.NotFileComparer"/>
            <seealso cref="T:ComponentPro.IO.AndFileComparer"/>
        </member>
        <member name="M:ComponentPro.IO.OrFileComparer.#ctor(ComponentPro.IO.FileComparer[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.OrFileComparer"/> class.
            </summary>
            <param name="comparers">A list of file comparers.</param>
        </member>
        <member name="M:ComponentPro.IO.OrFileComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])">
            <summary>
            Compares the target files to the master file and returns values indicating whether the target files are equal to the master.
            </summary>
            <param name="masterFile">The first file.</param>
            <param name="targetFiles">The second file.</param>
            <returns>True if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.NotFileComparer">
            <summary>
            Represents a logical NOT operation on a <see cref="T:ComponentPro.IO.FileComparer"/> object.
            </summary>
            <seealso cref="T:ComponentPro.IO.AndFileComparer"/>
            <seealso cref="T:ComponentPro.IO.OrFileComparer"/>
        </member>
        <member name="M:ComponentPro.IO.NotFileComparer.#ctor(ComponentPro.IO.FileComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NotSearchCondition"/> class.
            </summary>
            <param name="comparer">A file comparer.</param>
        </member>
        <member name="M:ComponentPro.IO.NotFileComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])">
            <summary>
            Compares the target files to the master file and returns values indicating whether the target files are equal to the master.
            </summary>
            <param name="masterFile">The first file.</param>
            <param name="targetFiles">The second file.</param>
            <returns>True if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.FileSystemNotSupportedException">
            <summary>
            The exception that is thrown when an attempt to use an unsupported function on a file system fails.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystemNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemNotSupportedException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentPro.IO.FileSystemOperationCanceledException">
            <summary>
            The exception that is thrown when user cancels a file operation that is still in process.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystemOperationCanceledException.#ctor(System.String,ComponentPro.IO.FileInfoBase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemOperationCanceledException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="file">The file info object, or null of no file specified.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemOperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystemOperationCanceledException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentPro.IO.FileSystem">
            <summary>
            The base class for a file system (e.g. Sftp, Ftp, Scp, Local Disk and Zip).
            </summary>
        </member>
        <member name="T:ComponentPro.IO.IFileSystem">
            <summary>
            The base class for a file system (e.g. Sftp, Ftp, Scp, Local Disk and Zip).
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates an empty directory.
            </summary>
            <param name="path">The directory path to create.</param>
            <returns>Path of the newly created directory, or null if not available.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">The name of the directory to delete.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Lists all files and subdirectories in the specified directory.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="recursive"><c>true</c> to search for files and directories recursively; otherwise, <c>false</c> to search in the specified directory only.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <remarks>
            The <see cref="O:Search"/> methods can also be used to search for files and directories recursively.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory">
            <summary>
            Lists all files and subdirectories in the current working directory. This method returns the list of files and subdirectories in the first level of the current directory only.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <remarks>
            To list files and directories recursively, use the <see cref="O:Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory(ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition. This method returns the list of files and subdirectories in the first level of the current directory only.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <remarks>
            To list files and directories recursively, use the <see cref="O:Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory(System.String)">
            <summary>
            Lists files and subdirectories in the specified directory. This method returns the list of files and subdirectories in the first level of the specified directory only. To scan subdirectories deeply, use the <see cref="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)"/> method.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <remarks>
            To list files and directories recursively, use the <see cref="O:Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition. This method returns the list of files and subdirectories in the first level of the specified directory only. To scan subdirectories deeply, use the <see cref="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)"/> method.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="path">The name of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <remarks>
            To list files and directories recursively, use the <see cref="O:Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition,System.Int32)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition. This method returns the list of files and subdirectories in the first level of the specified directory only. To scan subdirectories deeply, use the <see cref="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)"/> method.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="path">The name of the directory to list.</param>
            <param name="flags">The special flags. 1 - indicates that the result always includes subdirectories.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <remarks>
            This method is for advanced usage only.
            To list files and directories recursively, use the <see cref="O:Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListName">
            <summary>
            Returns a list of file and directory names in the current directory.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListName(System.String)">
            <summary>
            Returns a list of file and directory names.
            </summary>
            <param name="path">The name of directory to list.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListName(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns a list of file and directory names.
            </summary>
            <param name="path">The name of directory to list.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <param name="directoryPath">The path to test.</param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CombinePath(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>The combined path string.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CombinePath(System.String[])">
            <summary>
            Combines path strings.
            </summary>
            <param name="paths">The paths.</param>
            <returns>The combined path string.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A System.String containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns System.String.Empty if path does not contain directory information.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>A System.String consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if path contains an absolute path; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFullPath(System.String)">
            <summary>
            Returns a full path of the specified path.
            </summary>
            <param name="path">The input path.</param>
            <returns>The full path.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if the path is a null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of the path.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.FileExists(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Determines whether at least one file found that matches the specified search condition in the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory containing files to check.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>true if the caller has the required permissions and the directory contains at least one file that matches the specified search condition; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time at which the specified file was last written.
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the size of the specified file.
            </summary>
            <param name="filePath">The path of the file.</param>
            <returns>file size in bytes.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetItemInfo(System.String)">
            <summary>
            Returns a <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory.
            </summary>
            <param name="path">The name of the file or directory to get information.</param>
            <returns>An <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory, 
            or a null reference (Nothing in VB.NET) if the specified file or directory not found.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteFile(ComponentPro.IO.FileInfoBase)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="fileInfo">File information.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileChecksum(ComponentPro.IO.FileChecksumType,System.String)">
            <summary>
            Returns the checksum of the specified file.
            </summary>
            <param name="type">Desired checksum type (the system / server must support it).</param>
            <param name="path">Path of the file to get checksum.</param>
            <returns>Checksum of the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.NotSupportedException">The file system does not support getting file checksum.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileChecksum(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64)">
            <summary>
            Returns the checksum of the specified file.
            </summary>
            <param name="type">Desired checksum type (the system / server must support it).</param>
            <param name="path">Path of the file to get checksum.</param>
            <param name="offset">The offset in file where reading will start.</param>
            <param name="count">The maximum number of bytes to read or -1 to read the whole file.</param>
            <returns>Checksum of the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.NotSupportedException">The file system does not support getting file checksum.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a symlink.
            </summary>
            <param name="path">The path of the symlink.</param>
            <param name="target">The path to the target directory or file to which the specified <paramref name="path"/> is linked.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ResolveSymlink(System.String)">
            <summary>
            Resolves a symlink.
            </summary>
            <param name="path">The path of the symlink to resolve.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.NormalizePath(System.String)">
            <summary>
            Normalizes a path. This method normalizes path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if directory separator character is '/'.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.NormalizePath(System.String,System.Boolean,ComponentPro.OptionValue,ComponentPro.OptionValue)">
            <summary>
            Normalizes a path. This method normalizes path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if directory separator character is '/'.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="normalizeSpecialDirs">A boolean value indicating whether to normalize special directories like '.' and '..' found in the path. It treats '.' dir as the current directory and '..' as the upper directory.</param>
            <param name="persistEndSeparator">An option value indicating whether a separator at the end of the path is to be removed if present. Yes - to always include the ending separator, No - to remove if present, Auto - to keep the last character as it is.</param>
            <param name="persistLeadingSeparator">An option value indicating whether a separator at the beginning of the path is to be removed if present. Yes - to always include the leading separator, No - to remove if present, Auto - to keep the first character as it is.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.NormalizePath(System.String,System.Char[],System.Boolean,ComponentPro.OptionValue,ComponentPro.OptionValue)">
            <summary>
            Normalizes a path. This method normalizes path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if directory separator characters are '/' and '\' respectively.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="separators">The path separator characters (e.g. '/' and '\' characters). The first separator in the list will be used to construct the final path. Remote file systems (e.g. Ftp, Sftp, Scp, etc.) usually use '/' character as the first separator.</param>
            <param name="normalizeSpecialDirs">A boolean value indicating whether to normalize special directories like '.' and '..' found in the path. It treats '.' dir as the current directory and '..' as the upper directory.</param>
            <param name="persistEndSeparator">An option value indicating whether a separator at the end of the path is to be removed if present. Yes - to always include the ending separator, No - to remove if present, Auto - to keep the last character as it is.</param>
            <param name="persistLeadingSeparator">An option value indicating whether a separator at the beginning of the path is to be removed if present. Yes - to always include the leading separator, No - to remove if present, Auto - to keep the first character as it is.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyTo(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFileName">The destination file path.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyTo(System.String,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Copies a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyTo(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64)">
            <summary>
            Copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file to copy.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">Length of the data to transfer in bytes, or -1 to transfer the whole file.</param>
            <param name="destinationFile">The destination file information.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyTo(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64)">
            <summary>
            Copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyTo(System.String,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64)">
            <summary>
            Copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyTo(ComponentPro.IO.FileInfoBase,System.Int64,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Copies or resumes copy a file from this file system to a stream.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyTo(System.String,System.Int64,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Copies or resumes copy a file from this file system to a stream.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFrom(System.IO.Stream,ComponentPro.IO.FileInfoBase)">
            <summary>
            Copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFrom(System.IO.Stream,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64)">
            <summary>
            Copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFrom(System.IO.Stream,System.String)">
            <summary>
            Copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The path of the destination file on this system.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFrom(System.IO.Stream,System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The destination file path on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Cancel">
            <summary>
            Cancels all the operations.
            </summary>
            <return><c>true</c> if an operation is being canceled; otherwise, <c>false</c>.</return>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Cancel(System.Object)">
            <summary>
            Cancels the file transfer operation associated with the specified user-defined object.
            </summary>
            <param name="userState">The user-defined object associated with the file transfer operation, or null reference to cancel all the current file transfer operations.</param>
            <return><c>true</c> if an operation is found and being canceled; otherwise, <c>false</c>.</return>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.IsCanceling">
            <summary>
            Returns a boolean value indicating whether user has called the <see cref="M:ComponentPro.IO.IFileSystem.Cancel"/> method.
            </summary>
            <returns><c>true</c> if user has called the <see cref="M:ComponentPro.IO.IFileSystem.Cancel"/> method; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.IsCanceling(System.Object)">
            <summary>
            Returns a boolean value indicating whether user has called the <see cref="M:ComponentPro.IO.IFileSystem.Cancel"/> method for an asynchronous operation specified by the <paramref name="userState"/>.
            </summary>
            <param name="userState">User-defined object to identify the transfer.</param>
            <returns><c>true</c> if user has called the <see cref="M:ComponentPro.IO.IFileSystem.Cancel"/> method; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the file system.
            </summary>
            <returns>A string containing the path of the current working directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SetCurrentDirectory(System.String)">
            <summary>
            Sets the file system's current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetSupportedChecksumTypes">
            <summary>
            Returns checksum types supported by the file system.
            </summary>
            <returns>Checksum types supported by the file system.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateFileInfo(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="isFile">Indicates whether the item is a file.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>
            <remarks>
            This method does not try to find and load information about the specified file or directory on the file system.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateFileInfo(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="originalPath">The original path of the file.</param>
            <param name="isFile">Indicates whether the item is a file.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>
            <remarks>
            This method does not try to find and load information about the specified file or directory on the file system.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateFileInfo(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information. When the specified item exists the <see cref="T:ComponentPro.IO.FileInfoBase"/> instance will contain the information of the existing item.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>
            <remarks>
            This method tries to find the specified file or directory on the file system. If found its information will be loaded to the <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateDirectoryAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.CreateDirectory(System.String)"/> operation.
            Creates an empty directory.
            </summary>
            <param name="path">Pathname of the new directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateDirectoryAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.CreateDirectory(System.String)"/> operation.
            Creates an empty directory.
            </summary>
            <param name="path">Pathname of the new directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SetCurrentDirectoryAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.SetCurrentDirectory(System.String)"/> operation.
            </summary>
            <param name="path">Path of the directory to change to.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SetCurrentDirectoryAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.SetCurrentDirectory(System.String)"/> operation.
            </summary>
            <param name="path">Path of the directory to change to.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetCurrentDirectoryAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously gets the current working directory of the file system.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetCurrentDirectoryAsync(System.Object)">
            <summary>
            Asynchronously gets the current working directory of the file system.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteFileAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously deletes the specified file.
            </summary>
            <param name="path">The path to the file to be deleted.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteFileAsync(System.String,System.Object)">
            <summary>
            Asynchronously deletes the specified file.
            </summary>
            <param name="path">The path to the file to be deleted.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteFileAsync(ComponentPro.IO.FileInfoBase,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously deletes the specified file.
            </summary>
            <param name="fileInfo">The file to be deleted.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="fileInfo"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteFileAsync(ComponentPro.IO.FileInfoBase,System.Object)">
            <summary>
            Asynchronously deletes the specified file.
            </summary>
            <param name="fileInfo">The file to be deleted.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="fileInfo"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DirectoryExistsAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Boolean},System.Object)">
            <summary>
            Asynchronously detects whether the specified directory exists on the file system.
            </summary>
            <param name="directoryPath">The path of the directory to check.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DirectoryExistsAsync(System.String,System.Object)">
            <summary>
            Asynchronously detects whether the specified directory exists on the file system.
            </summary>
            <param name="directoryPath">The path of the directory to check.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.FileExistsAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Boolean},System.Object)">
            <summary>
            Asynchronous detects whether the specified file exists on the file system.
            </summary>
            <param name="filePath">The path of the file to check.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.FileExistsAsync(System.String,System.Object)">
            <summary>
            Asynchronous detects whether the specified file exists on the file system.
            </summary>
            <param name="filePath">The path of the file to check.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.FileExistsAsync(System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Boolean},System.Object)">
            <summary>
            Asynchronously determines whether at least one file found that matches the specified search condition in the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory to check.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.FileExistsAsync(System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously determines whether at least one file found that matches the specified search condition in the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory to check.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetLastWriteTimeAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.DateTime},System.Object)">
            <summary>
            Asynchronous retrieves the modification date and time of the specified file.
            </summary>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetLastWriteTimeAsync(System.String,System.Object)">
            <summary>
            Asynchronous retrieves the modification date and time of the specified file.
            </summary>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileLengthAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously retrieves the size of the specified file.
            </summary>
            <param name="filePath">The path of the file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileLengthAsync(System.String,System.Object)">
            <summary>
            Asynchronously retrieves the size of the specified file.
            </summary>
            <param name="filePath">The path of the file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetItemInfoAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoBase},System.Object)">
            <summary>
            Asynchronously retrieves a <see cref="T:ComponentPro.IO.FileInfoBase"/> containing the information about the specified file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetItemInfoAsync(System.String,System.Object)">
            <summary>
            Asynchronously retrieves a <see cref="T:ComponentPro.IO.FileInfoBase"/> containing the information about the specified file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectoryAsync(System.String,ComponentPro.IO.SearchCondition,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Asynchronously lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="flags">A boolean value indicating whether to always include subdirectories.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exclude/>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectoryAsync(System.String,ComponentPro.IO.SearchCondition,System.Int32,System.Object)">
            <summary>
            Asynchronously lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="flags">A boolean value indicating whether to always include subdirectories.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exclude/>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectoryAsync(System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Asynchronously lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectoryAsync(System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectoryAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectoryAsync(System.String,System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectoryAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories in the current directory.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectoryAsync(System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories in the specified directory.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectoryAsync(ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories that match the search condition in the current directory.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectoryAsync(ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories that match the search condition in the current directory.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListNameAsync(System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.ListName(System.String,ComponentPro.IO.SearchCondition)"/> operation.
            Retrieves the list of file and directory names in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListNameAsync(System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.ListName(System.String,ComponentPro.IO.SearchCondition)"/> operation.
            Retrieves the list of file and directory names in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListNameAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.ListName(System.String)"/> operation.
            Retrieves the list of file and directory names in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListNameAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.ListName(System.String)"/> operation.
            Retrieves the list of file and directory names in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListNameAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.ListName"/> operation.
            Retrieves the list of file and directory names in the current directory.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListNameAsync(System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.ListName"/> operation.
            Retrieves the list of file and directory names in the current directory.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.RenameAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> operation.
            Renames a file or directory on the file system.
            </summary>
            <param name="path">The pathname of the file to be renamed.</param>
            <param name="newPath">The pathname to rename the file to.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="newPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> or <paramref name="newPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.RenameAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> operation.
            Renames a file or directory on the file system.
            </summary>
            <param name="path">The pathname of the file to be renamed.</param>
            <param name="newPath">The pathname to rename the file to.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="newPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> or <paramref name="newPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SetLastWriteTimeAsync(System.String,System.DateTime,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.SetLastWriteTime(System.String,System.DateTime)"/> operation.
            Sets the modification date and time of the specified file.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="newDateTime">The date and time to set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SetLastWriteTimeAsync(System.String,System.DateTime,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.IFileSystem.SetLastWriteTime(System.String,System.DateTime)"/> operation.
            Sets the modification date and time of the specified file.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="newDateTime">The date and time to set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.Checksum},System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksum"/> operation.
            Retrieves the checksum of the specified file.
            </summary>
            <param name="type">Desired checksum type (the file system must support it).</param>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="offset">The offset in remote file where reading will start.</param>
            <param name="length">The maximum number of bytes to read or -1 to read the whole file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksum"/> operation.
            Retrieves the size of the specified file.
            </summary>
            <param name="type">Desired checksum type (the file system must support it).</param>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="offset">The offset in remote file where reading will start.</param>
            <param name="length">The maximum number of bytes to read or -1 to read the whole file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.Checksum},System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksum"/> operation.
            Retrieves the checksum of the specified file.
            </summary>
            <param name="type">Desired checksum type (the file system must support it).</param>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksum"/> operation.
            Retrieves the size of the specified file.
            </summary>
            <param name="type">Desired checksum type (the file system must support it).</param>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateSymlinkAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CreateSymlink"/> operation.
            Creates a symlink.
            </summary>
            <param name="path">The path of the symlink.</param>
            <param name="target">The path to the target directory or file to which the specified <paramref name="path"/> is linked.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateSymlinkAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CreateSymlink"/> operation.
            Creates a symlink.
            </summary>
            <param name="path">The path of the symlink.</param>
            <param name="target">The path to the target directory or file to which the specified <paramref name="path"/> is linked.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ResolveSymlinkAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.ResolveSymlink"/> operation.
            Resolves a symlink.
            </summary>
            <param name="path">The path of the symlink to resolve.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ResolveSymlinkAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.ResolveSymlink"/> operation.
            Resolves a symlink.
            </summary>
            <param name="path">The path of the symlink to resolve.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileSystem,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFileName">The destination file path.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileSystem,System.String,System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFileName">The destination file path.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(System.String,ComponentPro.IO.FileSystem,System.String,System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file to copy.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">Length of the data to transfer in bytes, or -1 to transfer the whole file.</param>
            <param name="destinationFile">The destination file information.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file to copy.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">Length of the data to transfer in bytes, or -1 to transfer the whole file.</param>
            <param name="destinationFile">The destination file information.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(System.String,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(System.String,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,System.IO.Stream,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,System.IO.Stream,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(System.String,System.Int64,System.IO.Stream,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyToAsync(System.String,System.Int64,System.IO.Stream,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFromAsync(System.IO.Stream,ComponentPro.IO.FileInfoBase,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFromAsync(System.IO.Stream,ComponentPro.IO.FileInfoBase,System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFromAsync(System.IO.Stream,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFromAsync(System.IO.Stream,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFromAsync(System.IO.Stream,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The path of the destination file on this system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFromAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The path of the destination file on this system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFromAsync(System.IO.Stream,System.Int64,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The destination file path on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CopyFromAsync(System.IO.Stream,System.Int64,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The destination file path on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="directoryPath">The path and name of the directory to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, the whole content of the specified directory should be deleted.
            Attention: some servers may be case-sensitive!</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <remarks>
            <p>Empty directories are to be removed. This method does not build directory hierarchy before deleting items.</p>
            <p>For more advanced files and directories deletion, use the <see cref="O:ComponentPro.IO.FileSystem.Delete"/> methods.</p>
            </remarks>
            <returns>The statistics of the multi-file operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while deleting the directory.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes files or directories and, if indicated, any subdirectories matching the specified search condition on the <paramref name="filesToDelete"/> list.
            </summary>
            <param name="filesToDelete">List of files and directories to remove. 
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.IO.IFileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/>(new string[] {"file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.IO.IFileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/>(new object[] {"file1", fileInfo1, fileInfo2 }...)</code>) This parameter cannot be null or empty.</param>
            <param name="recursive"><c>true</c> to remove subdirectories, and files in path; otherwise, <c>false</c> to remove files in the first level directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
            <remarks>
            This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Delete(System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes files and directories matching the specified search condition in the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted. The final search condition is a combination of the masks, if found, in the <paramref name="baseDirectoryPath"/> and the <paramref name="searchCondition"/> parameters.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself will be removed.
            Attention: some servers may be case-sensitive!</param>
            <param name="recursive"><c>true</c> to remove subdirectories, and files in path; otherwise, <c>false</c> to remove files in the first level directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
            <remarks>Empty directories are to be removed. This method does not build directory hierarchy before deleting items.</remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Delete(System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes files and directories in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself will be removed.
            Attention: some servers may be case-sensitive!</param>
            <param name="recursive"><c>true</c> to delete files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to delete files in the first level directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <remarks>
            This method does not build directory hierarchy before deleting items.
            </remarks>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Delete(System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes files and directories matching the specified search condition in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted. The final search condition is a combination of the masks, if found, in the <paramref name="baseDirectoryPath"/> and the <paramref name="searchCondition"/> parameters.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself will be removed.
            Attention: some servers may be case-sensitive!</param>
            <param name="recursive"><c>true</c> to delete files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to delete files in the first level directory only.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Delete(System.String,System.Boolean)">
            <summary>
            Deletes files and directories in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself will be removed.
            Attention: some servers may be case-sensitive!</param>
            <param name="recursive"><c>true</c> to delete files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to delete files in the first level directory only.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Delete(System.String)">
            <summary>
            Deletes the specified file or content of the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself will be removed.
            Attention: some servers may be case-sensitive!</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
            <remarks>
            Files, subdirectories and empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Delete(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes files matching the specified search condition in the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted. The final search condition is a combination of the masks, if found, in the <paramref name="baseDirectoryPath"/> and the <paramref name="searchCondition"/> parameters.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: <c><see cref="M:ComponentPro.IO.IFileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/>("/MyDir/*.txt", ...)</c> - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This list may contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="buildTree"><c>true</c> to build directory hierarchy to show progress of the entire operation before deleting; otherwise, <c>false</c>.</param>
            <param name="recursive"><c>true</c> to remove subdirectories, and files in path; otherwise, <c>false</c> to remove files in the first level directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Delete(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,ComponentPro.IO.MultiFileOperationOptions)">
            <summary>
            Deletes files or directories in the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator character like '/' or '\', the containing directory is to be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself are removed.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: <c><see cref="M:ComponentPro.IO.IFileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/></c>("/MyDir/*.txt", ...) - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="options">The delete options.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This optional list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.IO.IFileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/>("", false, new string[] {"file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.IO.IFileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/>("", false, new object[] {"file1", fileInfo1, fileInfo2 }...)</code>).</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteDirectoryAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="directoryPath">The path of the directory that contains files to be deleted.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="recursive">true to remove files in the specified directory and subdirectories; false to remove files in the specified directory only.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
            <returns>An object that references the asynchronous operation.</returns>        
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteDirectoryAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="directoryPath">The path of the directory that contains files to be deleted.</param>
            <param name="recursive">true to remove files in the specified directory and subdirectories; false to remove files in the specified directory only.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
            <returns>An object that references the asynchronous operation.</returns>        
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteDirectoryAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes the specified empty directory.
            </summary>
            <param name="path">Path of the empty directory to delete.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteDirectoryAsync(System.String,System.Object)">
            <summary>
            Asynchronously deletes the specified empty directory.
            </summary>
            <param name="path">Path of the empty directory to delete.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes files or directories and, if indicated, any subdirectories matching the specified search condition on the <paramref name="filesToDelete"/> list. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. This parameter cannot be null or empty.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            This method does not build directory hierarchy before deleting items.
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously deletes files or directories and, if indicated, any subdirectories matching the specified search condition on the <paramref name="filesToDelete"/> list. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. This parameter cannot be null or empty.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>This method does not build directory hierarchy before deleting items.</remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Asynchronously deletes files or directories and, if indicated, any subdirectories matching the specified search condition on the <paramref name="filesToDelete"/> list. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. This parameter cannot be null or empty.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <remarks>This method does not build directory hierarchy before deleting items.</remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <remarks>Empty directories are to be removed. This method does not build directory hierarchy before deleting items.</remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>    
            <remarks>Empty directories are to be removed. This method does not build directory hierarchy before deleting items.</remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>This method does not build directory hierarchy before deleting items.</remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            This method does not build directory hierarchy before deleting items.
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>Empty directories are to be removed. This method does not build directory hierarchy before deleting items.</remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory recursively. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory recursively. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove or null when <paramref name="filesToDelete"/> is specified and a base path for the list is not needed.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: DeleteAsync("/MyDir/*.txt", ...) - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances.</param>
            <param name="buildTree"><c>true</c> to build directory hierarchy to show progress of the entire operation before deleting; otherwise, <c>false</c>.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove or null when <paramref name="filesToDelete"/> is specified and a base path for the list is not needed.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: DeleteAsync("/MyDir/*.txt", ...) - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances.</param>
            <param name="buildTree"><c>true</c> to build directory hierarchy to show progress of the entire operation before deleting; otherwise, <c>false</c>.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,ComponentPro.IO.MultiFileOperationOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes files in the specified directory with the specified options.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove or null when <paramref name="filesToDelete"/> is specified and a base path for the list is not needed.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: DeleteAsync("/MyDir/*.txt", ...) - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="options">The delete options.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This parameter cannot be null or empty.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,ComponentPro.IO.MultiFileOperationOptions,System.Object)">
            <summary>
            Asynchronously deletes files in the specified directory with the specified options.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove or null when <paramref name="filesToDelete"/> is specified and a base path for the list is not needed.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: DeleteAsync("/MyDir/*.txt", ...) - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="options">The delete options.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This parameter cannot be null or empty.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySize(System.String)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <returns>The directory size in bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySize(System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>The directory size in bytes.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySize(System.String,System.Boolean)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <returns>The directory size in bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySizeAsync(System.String,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously calculates total size of the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySizeAsync(System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously calculates total size of the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySizeAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySizeAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySizeAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySizeAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySizeAsync(System.String,System.Object)">
            <summary>
            Asynchronously returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.QuickSynchronize(System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions)">
            <summary>
            Synchronizes the specified local directory with the specified source directory with the specified options.
            </summary>
            <param name="localDirectory">The local directory to synchronize.</param>
            <param name="sourceDirectory">The source directory on this file system to synchronize with the <paramref name="localDirectory"/> directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the <paramref name="sourceDirectory"/> is the master directory, meaning the content of the <paramref name="localDirectory"/> will be identical to <paramref name="sourceDirectory"/>'s; 
            otherwise, the content of the <paramref name="sourceDirectory"/> will be identical to <paramref name="localDirectory"/>'s.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <seealso cref="E:ComponentPro.IO.IFileSystem.Progress"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectory"/>, <paramref name="localDirectory"/>, or <paramref name="options"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceDirectory"/> or <paramref name="localDirectory"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.QuickSynchronize(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions)">
            <summary>
            Synchronizes the specified directory on the specified destination file system with the specified source directory with the specified options.
            </summary>
            <param name="destination">The destination <see cref="T:ComponentPro.IO.FileSystem"/>.</param>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <seealso cref="E:ComponentPro.IO.IFileSystem.Progress"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectory"/>, <paramref name="destDirectory"/>, <paramref name="options"/>, or <paramref name="destination"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceDirectory"/> or <paramref name="destDirectory"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.QuickSynchronizeAsync(System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="localDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.QuickSynchronizeAsync(System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="localDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.QuickSynchronizeAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destination">The destination file system.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.QuickSynchronizeAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destination">The destination file system.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)">
            <summary>
            Searches for files and directories that match the specified search pattern, if specified, in the <paramref name="directoryPath"/>.
            </summary>
            <param name="directoryPath">The directory path to search. This parameter accepts wildcards masks. If this parameter does not contain any wildcards masks, the method searches for all files and directories.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="searchFor">The search file types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while searching for files and directories.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileFoundDelegate)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search. This parameter accepts wildcard masks. When specified, the search pattern extracted from this parameter is combined with the <paramref name="searchCondition"/> parameter using the AND logical operator.</param>
            <param name="recursive"><c>true</c> to search for files and directories recursively; otherwise, <c>false</c> to search in the specified directory only.</param>
            <param name="searchCondition">The search conditions to match against the files. When this parameter is a null reference, the wildcard masks extracted from the <paramref name="directoryPath"/> parameter are to be used. If both are not specified, the resulting list should contain all files and subdirectories in the searching directory.</param>
            <param name="searchFor">The search file types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while searching for files and directories.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SearchAsync(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="itemTypes">The search item types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SearchAsync(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate,System.Object)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="itemTypes">The search item types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SearchAsync(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileFoundDelegate,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search.</param>
            <param name="recursive">Indicates whether the library will search for files in the first level directory only, 
            files in the first level directory and all its subdirectories, or 
            files in the first level directory and its subdirectories matching the <paramref name="searchCondition"/>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="itemTypes">The search item types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SearchAsync(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileFoundDelegate,System.Object)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search.</param>
            <param name="recursive">Indicates whether the library will search for files in the first level directory only, 
            files in the first level directory and all its subdirectories, or 
            files in the first level directory and its subdirectories matching the <paramref name="searchCondition"/>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="itemTypes">The search item types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Move(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Moves files that match the search condition specified in the <paramref name="options"/> parameter 
            from the specified directory to the destination directory using multiple threads.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="itemsToMove"/> is a null reference, this can contain wildcard masks. 
            For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. 
            For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="itemsToMove">The list of file names or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to move (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>), 
            or a null reference to transfer files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options">options parameter</paramref>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of concurrent threads used to transfer/move files, or 0 to transfer/move files in single-thread mode.</param>
            <param name="waitForThreads">A boolean value indicating whether the method will block the execution until all threads have finished. This parameter is only used when the <paramref name="threads"/> parameter is greater than 0.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Move(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Moves files on the <paramref name="itemsToMove"/> list that match the search condition specified in the <paramref name="options"/> parameter 
            to the destination directory using multiple threads.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="itemsToMove">The list of file names or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to move. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Move(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Moves files that match the search condition specified in the <paramref name="options"/> parameter 
            from the specified directory to the destination directory using multiple threads.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Move(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Moves all files in the specified directory to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Move(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Move(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move.
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Move(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files from the specified directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="itemsToMove"/> is a null reference, this can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="itemsToMove">The list of files and directories to move, or a null reference to transfer files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Move(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files on the <paramref name="itemsToMove"/> list that match the search condition specified in the <paramref name="options"/> parameter to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="itemsToMove">The list of files and directories to move. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Move(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files from the specified directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move.
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Move(System.String,System.String)">
            <summary>
            Moves all files in the specified directory to the specified destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously moves files that match the search condition specified in the <paramref name="options">options</paramref> parameter 
            from the specified directory to the destination directory on this file system.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            When the parameter <paramref name="itemsToMove"/> is a null reference, this can contain wildcard masks. 
            For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. 
            For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="itemsToMove">The list of files and directories to move, or a null reference to transfer files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously moves files that match the search condition specified in the <paramref name="options">options</paramref> parameter 
            from the specified directory to the destination directory on this file system.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            When the parameter <paramref name="itemsToMove"/> is a null reference, this can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="itemsToMove">The list of files and directories to move, or a null reference to transfer files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Moves files on the <paramref name="itemsToMove"/> list that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="itemsToMove">The list of files and directories to move. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Moves files on the <paramref name="itemsToMove"/> list that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="itemsToMove">The list of files and directories to move. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Moves files from the specified directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Moves files from the specified directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.String,System.String,System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction,System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search condition to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.MoveAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search condition to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.TransferConfirm">
            <summary>
            Occurs when the file system has detected an issue while transferring files such as existing file found, symlink detected or an error encountered.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.UniqueId">
            <summary>
            Gets the unique object id.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.ThreadId">
            <summary>
            Gets the thread id.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.InvalidFileNameChars">
            <summary>
            Gets or sets an array containing the characters that are not allowed in file or directory names, or null if this file system accepts all characters in file name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.InvalidFileNameCharsSubstitution">
            <summary>
            Gets or sets the substitution character that will replace the <see cref="P:ComponentPro.IO.IFileSystem.InvalidFileNameChars">invalid characters</see> found in file or directory name while copying files from another file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.FileSystemFeatures">
            <summary>
            Gets the supported features.
            </summary>
            <exclude/>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.CreateDirectoryCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CreateDirectoryAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.SetCurrentDirectoryCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.SetCurrentDirectoryAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.GetCurrentDirectoryCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetCurrentDirectoryAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.DeleteFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.DeleteFileAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.DirectoryExistsCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.DirectoryExistsAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.FileExistsCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.FileExistsAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.GetLastWriteTimeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetLastWriteTimeAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.GetFileLengthCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileLengthAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.GetItemInfoCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetItemInfoAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.ListDirectoryCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.ListDirectoryAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.ListNameCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.ListNameAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.RenameCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.RenameAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.SetLastWriteTimeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.SetLastWriteTimeAsync"/> operation completes.
            </summary>
            <remarks>
            In .NET 4.5 and higher it's recommended to use <c>async</c> and <c>await</c> modifiers for asynchronous operations.
            </remarks>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.GetFileChecksumCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksumAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.CreateSymlinkCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CreateSymlinkAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.ResolveSymlinkCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.ResolveSymlinkAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.CopyToCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CopyToAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.CopyFromCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CopyFromAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.DeleteDirectoryCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.DeleteDirectoryAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.DeleteCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.DeleteAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.GetDirectorySizeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetDirectorySizeAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.QuickSynchronizeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.QuickSynchronizeAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.Progress">
            <summary>
            Occurs when a block of data is transferred, or a file operation is being or has been executed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.ThreadStateChanged">
            <summary>
            Occurs when the state of the thread is changed while in a multi-thread file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.FileInfoPartsToGetBeforeTransferring">
            <summary>
            Specifies which information of the source file will be obtained before transferring.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.ProgressInterval">
            <summary>
            Gets or sets the length of the interval in milliseconds between the <see cref="E:ComponentPro.IO.IFileSystem.Progress"/> events fired during transfer. The default value is 100 ms.
            </summary>
            <remarks>
            If set to zero(0), the <see cref="E:ComponentPro.IO.IFileSystem.Progress"/> event is fired for every data block transferred. 
            In GUI applications, displaying a progress bar and messages too many times may affect the application performance. Increase this property to avoid that.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.ServerTimeZoneOffset">
            <summary>
            This value is used to synchronize the CreationTime and LastWriteTime of files after a transfer. The default value is TimeSpan.Zero.
            </summary>
            <remarks>
            When a file is copied from this file system to another one and the <see cref="P:ComponentPro.IO.IFileSystem.RestoreFileProperties"/> option is enabled, 
            the file's <see cref="P:ComponentPro.IO.FileInfoBase.CreationTime"/> and <see cref="P:ComponentPro.IO.FileInfoBase.LastWriteTime"/> will be added with this value. 
            Likewise, <see cref="P:ComponentPro.IO.FileInfoBase.CreationTime"/> and <see cref="P:ComponentPro.IO.FileInfoBase.LastWriteTime"/> of a file that is copied from another file system will be subtracted from this value.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.RestoreFileProperties">
            <summary>
            Gets or sets a boolean value indicating whether to restore file properties including <see cref="P:ComponentPro.IO.FileInfoBase.LastWriteTime"/> 
            and <see cref="P:ComponentPro.IO.FileInfoBase.CreationTime"/> after downloading or uploading if possible.
            </summary>
            <remarks>
            Use the <see cref="P:ComponentPro.IO.IFileSystem.ServerTimeZoneOffset"/> to adjust the <see cref="P:ComponentPro.IO.FileInfoBase.LastWriteTime"/> and <see cref="P:ComponentPro.IO.FileInfoBase.CreationTime"/> of the files to be copied.
            </remarks>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.SearchCompleted">
            <summary>
            Occurs when an <see cref="O:ComponentPro.IO.FileSystem.SearchAsync">asynchronous search operation</see> completes.
            </summary>
            <remarks>
            In .NET 4.5 and higher it's recommended to use <c>async</c> and <c>await</c> modifiers for asynchronous operations.
            </remarks>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.MoveCompleted">
            <summary>
            Occurs after a <see cref="O:ComponentPro.IO.FileSystem.MoveAsync"/> call has been completed.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ProcessException(System.Exception)">
            <summary>
            Handles an exception.
            </summary>
            <param name="x">The exception.</param>
            <returns>The processed exception.</returns>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EnsureFileSystem(ComponentPro.IO.FileSystem,System.Object[],System.Object[])">
            <summary>
            Ensures the underlying connection is alive.
            </summary>
            <excluded/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the file system.
            </summary>
            <returns>A string containing the path of the current working directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetCurrentDirectorySync(System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SetCurrentDirectory(System.String)">
            <summary>
            Sets the file system's current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.IsRootPath(System.String)">
            <summary>
            Indicates whether the given path is the root path or not.
            </summary>
            <param name="path">The path to check.</param>
            <returns>true of the given path is the root path; otherwise false.</returns>
            <remarks>
            The user's homepage path might be set to the root path but 
            the root path is not the user's homepage.
            </remarks>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetSupportedChecksumTypes">
            <summary>
            Returns checksum types supported by the file system.
            </summary>
            <returns>Checksum types supported by the file system.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SetCurrentDirectorySync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Sets the current directory.
            </summary>
            <param name="path">The path to the new directory.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateSymlinkSync(System.String,System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Creates a symlink.
            </summary>
            <param name="path">The path of the symlink.</param>
            <param name="target">The path to the target directory or file to which the specified <paramref name="path"/> is linked.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ResolveSymlinkSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Resolves a symlink.
            </summary>
            <param name="path">The path of the symlink to resolve.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileChecksumSync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the calculated checksum of the specified type.
            </summary>
            <param name="type">The checksum type.</param>
            <param name="path">The path to the file to calculate checksum.</param>
            <param name="offset">The file offset.</param>
            <param name="count">The number of bytes to calculate.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The calculated checksum.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateFileInfo(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="isFile">Indicates whether the item is a file.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>
            <remarks>
            This method does not try to find and load information about the specified file or directory on the file system.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateFileInfo(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="originalPath">The original path of the file.</param>
            <param name="isFile">Indicates whether the item is a file.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>
            <remarks>
            This method does not try to find and load information about the specified file or directory on the file system.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateFileInfo(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information. When the specified item exists the <see cref="T:ComponentPro.IO.FileInfoBase"/> instance will contain the information of the existing item.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>
            <remarks>
            This method tries to find the specified file or directory on the file system. If found its information will be loaded to the <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateFileInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information. When the specified item exists the <see cref="T:ComponentPro.IO.FileInfoBase"/> instance will contain the information of the existing item.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="infoParts">Indicates what information of the file will be filled.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>        
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateItemCollection">
            <excludeall/>
            <summary>
            Creates a collection of the <see cref="T:ComponentPro.IO.FileInfoBase"/>.
            </summary>
            <returns>The collection of the <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnCopyToCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.CopyToCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> containg the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFile">The destination file information.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileSystem,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFileName">The destination file path.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileSystem,System.String,System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFileName">The destination file path.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(System.String,ComponentPro.IO.FileSystem,System.String,System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file to copy.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">Length of the data to transfer in bytes, or -1 to transfer the whole file.</param>
            <param name="destinationFile">The destination file information.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file to copy.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">Length of the data to transfer in bytes, or -1 to transfer the whole file.</param>
            <param name="destinationFile">The destination file information.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(System.String,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(System.String,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,System.IO.Stream,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(ComponentPro.IO.FileInfoBase,System.Int64,System.IO.Stream,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(System.String,System.Int64,System.IO.Stream,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToAsync(System.String,System.Int64,System.IO.Stream,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnCopyFromCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.CopyFromCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> containg the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFromAsync(System.IO.Stream,ComponentPro.IO.FileInfoBase,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFromAsync(System.IO.Stream,ComponentPro.IO.FileInfoBase,System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFromAsync(System.IO.Stream,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFromAsync(System.IO.Stream,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFromAsync(System.IO.Stream,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The path of the destination file on this system.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFromAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The path of the destination file on this system.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFromAsync(System.IO.Stream,System.Int64,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The destination file path on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFromAsync(System.IO.Stream,System.Int64,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The destination file path on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="directoryPath">The path and name of the directory to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, the whole content of the specified directory should be deleted.
            Attention: some servers may be case-sensitive!</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <remarks>
            <p>Empty directories are to be removed. This method does not build directory hierarchy before deleting items.</p>
            <p>For more advanced files and directories deletion, use the <see cref="O:ComponentPro.IO.FileSystem.Delete"/> methods.</p>
            </remarks>
            <returns>The statistics of the multi-file operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while deleting the directory.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes files or directories and, if indicated, any subdirectories matching the specified search condition on the <paramref name="filesToDelete"/> list.
            </summary>
            <param name="filesToDelete">List of files and directories to remove. 
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.IO.FileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/>(new string[] {"file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.IO.FileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/>(new object[] {"file1", fileInfo1, fileInfo2 }...)</code>) This parameter cannot be null or empty.</param>
            <param name="recursive"><c>true</c> to remove subdirectories, and files in path; otherwise, <c>false</c> to remove files in the first level directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
            <remarks>
            This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Delete(System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes files and directories matching the specified search condition in the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted. The final search condition is a combination of the masks, if found, in the <paramref name="baseDirectoryPath"/> and the <paramref name="searchCondition"/> parameters.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself will be removed.
            Attention: some servers may be case-sensitive!</param>
            <param name="recursive"><c>true</c> to remove subdirectories, and files in path; otherwise, <c>false</c> to remove files in the first level directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
            <remarks>Empty directories are to be removed. This method does not build directory hierarchy before deleting items.</remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Delete(System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes files and directories in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself will be removed.
            Attention: some servers may be case-sensitive!</param>
            <param name="recursive"><c>true</c> to delete files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to delete files in the first level directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <remarks>
            This method does not build directory hierarchy before deleting items.
            </remarks>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Delete(System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes files and directories matching the specified search condition in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted. The final search condition is a combination of the masks, if found, in the <paramref name="baseDirectoryPath"/> and the <paramref name="searchCondition"/> parameters.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself will be removed.
            Attention: some servers may be case-sensitive!</param>
            <param name="recursive"><c>true</c> to delete files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to delete files in the first level directory only.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Delete(System.String,System.Boolean)">
            <summary>
            Deletes files and directories in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself will be removed.
            Attention: some servers may be case-sensitive!</param>
            <param name="recursive"><c>true</c> to delete files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to delete files in the first level directory only.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Delete(System.String)">
            <summary>
            Deletes the specified file or content of the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself will be removed.
            Attention: some servers may be case-sensitive!</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
            <remarks>
            Files, subdirectories and empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Delete(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes files matching the specified search condition in the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted. The final search condition is a combination of the masks, if found, in the <paramref name="baseDirectoryPath"/> and the <paramref name="searchCondition"/> parameters.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: <c><see cref="M:ComponentPro.IO.FileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/>("/MyDir/*.txt", ...)</c> - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This list may contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="buildTree"><c>true</c> to build directory hierarchy to show progress of the entire operation before deleting; otherwise, <c>false</c>.</param>
            <param name="recursive"><c>true</c> to remove subdirectories, and files in path; otherwise, <c>false</c> to remove files in the first level directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Delete(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,ComponentPro.IO.MultiFileOperationOptions)">
            <summary>
            Deletes files or directories in the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The path and name of the directory containing contents to remove.
            This parameter can include filtering masks to limit the files that are deleted. For example, if ""(empty string) is specified, the entire contents of the current working folder will be deleted. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be deleted. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be deleted.
            If no masks specified, files and subdirectories in the specified directory should be deleted. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator character like '/' or '\', the containing directory is to be removed. For example, if "/folder/" is used, files and subdirectories of "/folder" folder and itself are removed.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: <c><see cref="M:ComponentPro.IO.FileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/></c>("/MyDir/*.txt", ...) - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="options">The delete options.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This optional list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.IO.FileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/>("", false, new string[] {"file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.IO.FileSystem.Delete(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)"/>("", false, new object[] {"file1", fileInfo1, fileInfo2 }...)</code>).</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySize(System.String)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <returns>The directory size in bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySize(System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>The directory size in bytes.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySize(System.String,System.Boolean)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <returns>The directory size in bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnGetDirectorySizeCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.GetDirectorySizeCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySizeAsync(System.String,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously calculates total size of the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySizeAsync(System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously calculates total size of the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySizeAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySizeAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySizeAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySizeAsync(System.String,System.Object)">
            <summary>
            Asynchronously returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)">
            <summary>
            Searches for files and directories that match the specified search pattern, if specified, in the <paramref name="directoryPath"/>.
            </summary>
            <param name="directoryPath">The directory path to search. This parameter accepts wildcards masks. If this parameter does not contain any wildcards masks, the method searches for all files and directories.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="searchFor">The search file types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while searching for files and directories.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileFoundDelegate)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search. This parameter accepts wildcard masks. When specified, the search pattern extracted from this parameter is combined with the <paramref name="searchCondition"/> parameter using the AND logical operator.</param>
            <param name="recursive"><c>true</c> to search for files and directories recursively; otherwise, <c>false</c> to search in the specified directory only.</param>
            <param name="searchCondition">The search conditions to match against the files. When this parameter is a null reference, the wildcard masks extracted from the <paramref name="directoryPath"/> parameter are to be used. If both are not specified, the resulting list should contain all files and subdirectories in the searching directory.</param>
            <param name="searchFor">The search file types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while searching for files and directories.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnQuickSynchronizeCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.QuickSynchronizeCompleted"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.QuickSynchronizeAsync(System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="localDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.QuickSynchronizeAsync(System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="localDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.QuickSynchronizeAsync(ComponentPro.IO.FileSystem,ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="source">The source file system.</param>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destination">The destination file system.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.QuickSynchronizeAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destination">The destination file system.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.QuickSynchronizeAsync(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destination">The destination file system.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnSearchCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileInfoCollection})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.SearchCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
            <remarks>
            In .NET 4.5 and higher it's recommended to use <c>async</c> and <c>await</c> modifiers for asynchronous operations.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SearchAsync(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="itemTypes">The search item types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SearchAsync(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate,System.Object)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search.</param>
            <param name="recursive">true to search for files and directories in the specified directory and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="itemTypes">The search item types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SearchAsync(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileFoundDelegate,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search.</param>
            <param name="recursive">Indicates whether the library will search for files in the first level directory only, 
            files in the first level directory and all its subdirectories, or 
            files in the first level directory and its subdirectories matching the <paramref name="searchCondition"/>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="itemTypes">The search item types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SearchAsync(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileFoundDelegate,System.Object)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search.</param>
            <param name="recursive">Indicates whether the library will search for files in the first level directory only, 
            files in the first level directory and all its subdirectories, or 
            files in the first level directory and its subdirectories matching the <paramref name="searchCondition"/>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="itemTypes">The search item types.</param>
            <param name="fileFound">A method that is called when a file matching the search condition is found.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SearchAsync(System.String,ComponentPro.IO.SearchOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search.</param>
            <param name="options">The search options.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SearchAsync(System.String,ComponentPro.IO.SearchOptions,System.Object)">
            <summary>
            Searches for files and directories that match the specified search conditions.
            </summary>
            <param name="directoryPath">The directory path to search.</param>
            <param name="options">The search options.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>A list of found files and directories represented by <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">An error occurred while calculating the directory size.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFiles(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Transfers files from the specified source file system to the specified destination file system.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceBaseDirectoryPath">The path of the source directory containing files to transfer.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: TransferFilesAsync(ftpSys, "/MyDir", null, zipSys, "/ZipDir", ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToTransfer">A list of files to transfer, or a null reference to transfer files specified by the <paramref name="options"/> parameter. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories or null if this item is not a directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFiles(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Transfers files from the specified source file system to the specified destination file system.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceBaseDirectoryPath">The path of the source directory containing files to transfer.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories or null if this item is not a directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFiles(ComponentPro.IO.FileSystem,ComponentPro.IO.SearchFileList,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Transfers files from the specified source file system to the specified destination file system.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="fileList">The search file list.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories or null if this item is not a directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFiles(ComponentPro.IO.FileSystem,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Transfers files from the specified source file system to the specified destination file system.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFilesToTransfer">A list of files to transfer, or a null reference to transfer files specified by the <paramref name="options"/> parameter. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories or null if this item is not a directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFiles(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Transfers files from the specified source file system to the specified destination file system using multiple threads.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceBaseDirectoryPath">The path of the source directory containing files to transfer.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: TransferFilesAsync(ftpSys, "/MyDir", null, zipSys, "/ZipDir", ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToTransfer">A list of files to transfer, or a null reference to transfer files specified by the <paramref name="options"/> parameter. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <param name="threads">The number of concurrent threads used to transfer files, or 0 to transfer files in single-thread mode.</param>
            <param name="waitForThreads">A boolean value indicating whether the method will block the execution until all threads have finished. This parameter is only used when the <paramref name="threads"/> parameter is greater than 0.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories or null if this item is not a directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFiles(ComponentPro.IO.FileSystem,ComponentPro.IO.SearchFileList,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Transfers files from the specified source file system to the specified destination file system using multiple threads.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="fileList">The search file list.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <param name="threads">The number of concurrent threads used to transfer files, or 0 to transfer files in single-thread mode.</param>
            <param name="waitForThreads">A boolean value indicating whether the method will block the execution until all threads have finished. This parameter is only used when the <paramref name="threads"/> parameter is greater than 0.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories or null if this item is not a directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFilesAsync(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously transfers files from the specified source file system to the specified destination file system.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceBaseDirectoryPath">The path of the source directory containing files to transfer.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFilesAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously transfers files from the specified source file system to the specified destination file system.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceBaseDirectoryPath">The path of the source directory containing files to transfer.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: TransferFilesAsync(ftpSys, "/MyDir", null, zipSys, "/ZipDir", ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="sourceFilesToTransfer">A list of files to transfer, or a null reference to transfer files specified by the <paramref name="options"/> parameter. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFilesAsync(ComponentPro.IO.FileSystem,ComponentPro.IO.SearchFileList,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously transfers files from the specified source file system to the specified destination file system.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="fileList">The search file list.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFilesAsync(ComponentPro.IO.FileSystem,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously transfers files from the specified source file system to the specified destination file system.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceFilesToTransfer">A list of files to transfer, or a null reference to transfer files specified by the <paramref name="options"/> parameter. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Move(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Moves files that match the search condition specified in the <paramref name="options"/> parameter 
            from the specified directory to the destination directory using multiple threads.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="itemsToMove"/> is a null reference, this can contain wildcard masks. 
            For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. 
            For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="itemsToMove">The list of file names or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to move (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>), 
            or a null reference to transfer files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options">options parameter</paramref>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of concurrent threads used to transfer/move files, or 0 to transfer/move files in single-thread mode.</param>
            <param name="waitForThreads">A boolean value indicating whether the method will block the execution until all threads have finished. This parameter is only used when the <paramref name="threads"/> parameter is greater than 0.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Move(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Moves files on the <paramref name="itemsToMove"/> list that match the search condition specified in the <paramref name="options"/> parameter 
            to the destination directory using multiple threads.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="itemsToMove">The list of file names or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to move. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Move(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Moves files that match the search condition specified in the <paramref name="options"/> parameter 
            from the specified directory to the destination directory using multiple threads.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Move(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Moves all files in the specified directory to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Move(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Move(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move.
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Move(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files from the specified directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="itemsToMove"/> is a null reference, this can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="itemsToMove">The list of files and directories to move, or a null reference to transfer files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Move(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files on the <paramref name="itemsToMove"/> list that match the search condition specified in the <paramref name="options"/> parameter to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="itemsToMove">The list of files and directories to move. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Move(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files from the specified directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move.
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Move(System.String,System.String)">
            <summary>
            Moves all files in the specified directory to the specified destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnMoveFilesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.MoveCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously moves files that match the search condition specified in the <paramref name="options">options</paramref> parameter 
            from the specified directory to the destination directory on this file system.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            When the parameter <paramref name="itemsToMove"/> is a null reference, this can contain wildcard masks. 
            For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. 
            For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="itemsToMove">The list of files and directories to move, or a null reference to transfer files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            </param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.String,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously moves files that match the search condition specified in the <paramref name="options">options</paramref> parameter 
            from the specified directory to the destination directory on this file system.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            When the parameter <paramref name="itemsToMove"/> is a null reference, this can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="itemsToMove">The list of files and directories to move, or a null reference to transfer files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Moves files on the <paramref name="itemsToMove"/> list that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="itemsToMove">The list of files and directories to move. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Moves files on the <paramref name="itemsToMove"/> list that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="itemsToMove">The list of files and directories to move. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Moves files from the specified directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Moves files from the specified directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.String,System.String,System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction,System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search pattern to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search condition to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.MoveAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Moves files in the specified directory that match the specified search condition to the destination directory.
            This method only moves the items of the specified directory if the <paramref name="sourcePath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To move the whole directory, use the <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> method instead.
            </summary>
            <param name="sourcePath">The path of the directory containing files and subdirectories to move. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be moved. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be moved; the destination directory will contain "folder" directory and its contents.
            <param name="destinationPath">The path of the destination directory.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnDeleteDirectoryCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.DeleteDirectoryCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectoryAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="directoryPath">The path of the directory that contains files to be deleted.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="recursive">true to remove files in the specified directory and subdirectories; false to remove files in the specified directory only.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
            <returns>An object that references the asynchronous operation.</returns>        
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectoryAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="directoryPath">The path of the directory that contains files to be deleted.</param>
            <param name="recursive">true to remove files in the specified directory and subdirectories; false to remove files in the specified directory only.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
            <returns>An object that references the asynchronous operation.</returns>        
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectoryAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes the specified empty directory.
            </summary>
            <param name="path">Path of the empty directory to delete.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectoryAsync(System.String,System.Object)">
            <summary>
            Asynchronously deletes the specified empty directory.
            </summary>
            <param name="path">Path of the empty directory to delete.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnDeleteCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.DeleteCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes files or directories and, if indicated, any subdirectories matching the specified search condition on the <paramref name="filesToDelete"/> list. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. This parameter cannot be null or empty.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            This method does not build directory hierarchy before deleting items.
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.Collections.IEnumerable,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously deletes files or directories and, if indicated, any subdirectories matching the specified search condition on the <paramref name="filesToDelete"/> list. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. This parameter cannot be null or empty.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>This method does not build directory hierarchy before deleting items.</remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <remarks>Empty directories are to be removed. This method does not build directory hierarchy before deleting items.</remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>    
            <remarks>Empty directories are to be removed. This method does not build directory hierarchy before deleting items.</remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>This method does not build directory hierarchy before deleting items.</remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            This method does not build directory hierarchy before deleting items.
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>Empty directories are to be removed. This method does not build directory hierarchy before deleting items.</remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="recursive"><c>true</c> to search for files, directories, and subdirectories in <paramref name="baseDirectoryPath"/>; otherwise, <c>false</c> to search for files only.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory recursively. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Object)">
            <summary>
            Asynchronously deletes all files in the specified directory recursively. 
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
            <remarks>
            Empty directories are to be removed. This method does not build directory hierarchy before deleting items.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove or null when <paramref name="filesToDelete"/> is specified and a base path for the list is not needed.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: DeleteAsync("/MyDir/*.txt", ...) - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances.</param>
            <param name="buildTree"><c>true</c> to build directory hierarchy to show progress of the entire operation before deleting; otherwise, <c>false</c>.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously deletes files matching the specified search condition in the specified directory.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove or null when <paramref name="filesToDelete"/> is specified and a base path for the list is not needed.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: DeleteAsync("/MyDir/*.txt", ...) - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances.</param>
            <param name="buildTree"><c>true</c> to build directory hierarchy to show progress of the entire operation before deleting; otherwise, <c>false</c>.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,ComponentPro.IO.MultiFileOperationOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously deletes files in the specified directory with the specified options.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove or null when <paramref name="filesToDelete"/> is specified and a base path for the list is not needed.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: DeleteAsync("/MyDir/*.txt", ...) - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="options">The delete options.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This parameter cannot be null or empty.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.Boolean,ComponentPro.IO.MultiFileOperationOptions,System.Object)">
            <summary>
            Asynchronously deletes files in the specified directory with the specified options.
            This method only deletes the items in the specified directory if the <paramref name="baseDirectoryPath"/> parameter does not end with a directory separator (e.g. '/' or '\').
            To remove the whole directory, you should add a directory separator character at the end of that parameter.
            </summary>
            <param name="baseDirectoryPath">The base directory to search for files and directories to remove or null when <paramref name="filesToDelete"/> is specified and a base path for the list is not needed.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory in the <paramref name="baseDirectoryPath"/> parameter should also be deleted. 
            For example: DeleteAsync("/MyDir/*.txt", ...) - if this parameter is <c>true</c>, 
            "MyDir" is also deleted if this folder is empty after all ".txt" files within "MyDir" have been deleted; 
            otherwise <c>false</c>, "MyDir" is not included in the deletion process.</param>
            <param name="options">The delete options.</param>
            <param name="filesToDelete">List of files and directories to remove. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This parameter cannot be null or empty.</param>
            <param name="deleteEmptyDirectory"><c>true</c> to remove empty directories; otherwise, <c>false</c>.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>                
        </member>
        <member name="M:ComponentPro.IO.FileSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSystem"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EnsuresDirectoryCreated(System.String)">
            <summary>
            Ensures the specified directory exists on the file system. If the specified directory does not exist, a new one is to be created.
            </summary>
            <param name="directoryPath">The directory path to check and create if needed.</param>
            <remarks>
            This method checks if the directory and its parents exist. If one of them does not exist, the specified directory is created.
            </remarks>
            <returns><c>true</c> if the directory already exists; otherwise, the specified directory does not exist before calling this method, and it has been created.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EnsuresDirectoryCreatedSync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Ensures the specified directory exists on the file system. If the specified directory does not exist, a new one will be created.
            </summary>
            <param name="directoryPath">The directory path to check and create if needed.</param>
            <param name="progressItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
            <returns><c>true</c> if the directory already exists; otherwise, the specified directory does not exist before calling this method, and it has been created.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateDirectory(System.String)">
            <summary>
            Creates an empty directory.
            </summary>
            <param name="path">The directory path to create.</param>
            <returns>Path of the newly created directory, or null if not available.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Creates the specified directory.
            </summary>
            <param name="path">The path to the directory to create.</param>
            <param name="currentProgressFile">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The path to the newly created directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">The name of the directory to delete.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">The name of the directory to delete.</param>
            <param name="currentProgressFile">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Lists all files and subdirectories in the specified directory.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="recursive"><c>true</c> to search for files and directories recursively; otherwise, <c>false</c> to search in the specified directory only.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <remarks>
            The <see cref="O:Search"/> methods can also be used to search for files and directories recursively.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory">
            <summary>
            Lists all files and subdirectories in the current working directory. This method returns the list of files and subdirectories in the first level of the current directory only.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <remarks>
            To list files and directories recursively, use the <see cref="O:Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory(ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition. This method returns the list of files and subdirectories in the first level of the current directory only.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <remarks>
            To list files and directories recursively, use the <see cref="O:Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory(System.String)">
            <summary>
            Lists files and subdirectories in the specified directory. This method returns the list of files and subdirectories in the first level of the specified directory only. To scan subdirectories deeply, use the <see cref="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)"/> method.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <remarks>
            To list files and directories recursively, use the <see cref="O:Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition. This method returns the list of files and subdirectories in the first level of the specified directory only. To scan subdirectories deeply, use the <see cref="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)"/> method.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="path">The name of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <remarks>
            To list files and directories recursively, use the <see cref="O:Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition,System.Int32)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition. This method returns the list of files and subdirectories in the first level of the specified directory only. To scan subdirectories deeply, use the <see cref="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)"/> method.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="path">The name of the directory to list.</param>
            <param name="flags">The special flags. 1 - indicates that the result always includes subdirectories.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <remarks>
            This method is for advanced usage only.
            To list files and directories recursively, use the <see cref="O:Search"/> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectorySync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.IO.ListDirFlags,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition. This method returns the list of files and subdirectories in the first level of the specified directory only. To scan subdirectories deeply, use the <see cref="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)"/> method.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <param name="basePath">The base path for the <paramref name="searchCondition"/>.</param>
            <param name="searchCondition">The search condition.</param>
            <param name="flags">The listing flags.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The list of files or directories found.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListName">
            <summary>
            Returns a list of file and directory names in the current directory.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListName(System.String)">
            <summary>
            Returns a list of file and directory names.
            </summary>
            <param name="path">The name of directory to list.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListName(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns a list of file and directory names.
            </summary>
            <param name="path">The name of directory to list.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListNameSync(System.String,ComponentPro.IO.SearchCondition,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns a list of items' names.
            </summary>
            <param name="path">The path of the directory to retrive names.</param>
            <param name="searchCondition">The search condition.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The list of items' names.</returns>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <param name="directoryPath">The path to test.</param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DirectoryExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <param name="directoryPath">The path to test.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the specified directory exists; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ValidatePath(System.String,System.String)">
            <summary>
            Validates the specified path. <paramref name="path">Path</paramref> must not be a null reference or empty. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ValidatePathCanBeEmpty(System.String,System.String)">
            <summary>
            Validates the specified path. <paramref name="path">Path</paramref> must not be a null reference. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CombinePath(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>The combined path string.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CombinePath(System.String[])">
            <summary>
            Combines path strings.
            </summary>
            <param name="paths">The paths.</param>
            <returns>The combined path string.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A System.String containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns System.String.Empty if path does not contain directory information.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>A System.String consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if path contains an absolute path; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFullPath(System.String)">
            <summary>
            Returns a full path of the specified path.
            </summary>
            <param name="path">The input path.</param>
            <returns>The full path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFullPathSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns a full path of the specified path.
            </summary>
            <param name="path">The input path.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The full path.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFullPathSync(System.String,System.String,System.Boolean)">
            <summary>
            Returns a full path of the specified path.
            </summary>
            <param name="currentPath">The current path.</param>
            <param name="path">The input path.</param>
            <param name="normalizeSpecialDirs">Indicates whether to normalize the special directory characters like ".." -> parent dir, "." -> current dir.</param>
            <returns>The full path.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if the path is a null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of the path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.FileExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if the path is a null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of the path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.FileExists(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Determines whether at least one file found that matches the specified search condition in the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory containing files to check.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>true if the caller has the required permissions and the directory contains at least one file that matches the specified search condition; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.FileExistsSync(System.String,ComponentPro.IO.SearchCondition,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Determines whether at least one file found that matches the specified search condition in the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory containing files to check.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the caller has the required permissions and the directory contains at least one file that matches the specified search condition; otherwise, false.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.RenameSync(System.String,System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
            <param name="currentProgressItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time at which the specified file was last written.
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. 
            This value is expressed in local time in most case. However, some FTP and SFTP servers explicitly want this value to be in UTC. In this case, you will need to use <see cref="M:System.DateTime.ToUniversalTime"/> method.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SetLastWriteTimeSync(System.String,System.DateTime,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Sets the date and time at which the specified file was last written.
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. 
            This value is expressed in local time in most case. However, some FTP and SFTP servers explicitly want this value to be in UTC. In this case, you will need to use <see cref="M:System.DateTime.ToUniversalTime"/> method.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. 
            This value is expressed in local time in most case. However, some FTP and SFTP servers explicitly want this value to be in UTC. In this case, you will need to use <see cref="M:System.DateTime.ToUniversalTime"/> method.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetLastWriteTimeSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. 
            This value is expressed in local time in most case. However, some FTP and SFTP servers explicitly want this value to be in UTC. In this case, you will need to use <see cref="M:System.DateTime.ToUniversalTime"/> method.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileLength(System.String)">
            <summary>
            Gets the size of the specified file.
            </summary>
            <param name="filePath">The path of the file.</param>
            <returns>file size in bytes.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileLengthSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the size of the specified file, in bytes.
            </summary>
            <param name="filePath">The path to the file to get size.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The length of the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferDataFromStreamToFileSync(ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            This allow you to copy data from a stream or a <paramref name="currentProgressFileItem"/> to a file on this system.
            </summary>
            <param name="currentProgressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="source">The source stream.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferDataFromFileToStreamSync(System.Boolean,ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Transfers data contents of a file on the system to a data stream.
            </summary>
            <param name="forComparison">true to indicate that this transfer is for a file comparison; otherwise, false.</param>
            <param name="currentProgressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="destinationStream">The destination file stream.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The number of bytes transferred.</returns>        
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetStreamForWriting(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns a Stream for writing data to the specified file.
            </summary>
            <param name="file">The file to write to.</param>
            <param name="offset">The position at which data will be written to.</param>
            <param name="asyncOp">The asynchronous operation object.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetStreamForReading(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns a Stream for reading data from the specified file.
            </summary>
            <param name="file">The file to read.</param>
            <param name="offset">The position at which data will be read from.</param>
            <param name="asyncOp">The asynchronous operation object.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetItemInfo(System.String)">
            <summary>
            Returns a <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory.
            </summary>
            <param name="path">The name of the file or directory to get information.</param>
            <returns>An <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory, 
            or a null reference (Nothing in VB.NET) if the specified file or directory not found.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetItemInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns a <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory.
            </summary>
            <param name="path">The name of the file or directory to get information.</param>
            <param name="parts">Specifies what information of the file to retrive.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>An <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory, 
            or a null reference (Nothing in VB.NET) if the specified file or directory not found.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteFile(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteFileSync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The path to the file to delete.</param>
            <param name="currentProgressFile">The <see cref="T:ComponentPro.IO.ProgressFileItem"/> object.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteFile(ComponentPro.IO.FileInfoBase)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="fileInfo">File information.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileChecksum(ComponentPro.IO.FileChecksumType,System.String)">
            <summary>
            Returns the checksum of the specified file.
            </summary>
            <param name="type">Desired checksum type (the system / server must support it).</param>
            <param name="path">Path of the file to get checksum.</param>
            <returns>Checksum of the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.NotSupportedException">The file system does not support getting file checksum.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileChecksum(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64)">
            <summary>
            Returns the checksum of the specified file.
            </summary>
            <param name="type">Desired checksum type (the system / server must support it).</param>
            <param name="path">Path of the file to get checksum.</param>
            <param name="offset">The offset in file where reading will start.</param>
            <param name="count">The maximum number of bytes to read or -1 to read the whole file.</param>
            <returns>Checksum of the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.NotSupportedException">The file system does not support getting file checksum.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a symlink.
            </summary>
            <param name="path">The path of the symlink.</param>
            <param name="target">The path to the target directory or file to which the specified <paramref name="path"/> is linked.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ResolveSymlink(System.String)">
            <summary>
            Resolves a symlink.
            </summary>
            <param name="path">The path of the symlink to resolve.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.NormalizePath(System.String)">
            <summary>
            Normalizes a path. This method normalizes path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if directory separator character is '/'.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.NormalizePath(System.String,System.Boolean,ComponentPro.OptionValue,ComponentPro.OptionValue)">
            <summary>
            Normalizes a path. This method normalizes path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if directory separator character is '/'.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="normalizeSpecialDirs">A boolean value indicating whether to normalize special directories like '.' and '..' found in the path. It treats '.' dir as the current directory and '..' as the upper directory.</param>
            <param name="persistEndSeparator">An option value indicating whether a separator at the end of the path is to be removed if present. Yes - to always include the ending separator, No - to remove if present, Auto - to keep the last character as it is.</param>
            <param name="persistLeadingSeparator">An option value indicating whether a separator at the beginning of the path is to be removed if present. Yes - to always include the leading separator, No - to remove if present, Auto - to keep the first character as it is.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.NormalizePath(System.String,System.Char[],System.Boolean,ComponentPro.OptionValue,ComponentPro.OptionValue)">
            <summary>
            Normalizes a path. This method normalizes path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if directory separator characters are '/' and '\' respectively.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="separators">The path separator characters (e.g. '/' and '\' characters). The first separator in the list will be used to construct the final path. Remote file systems (e.g. Ftp, Sftp, Scp, etc.) usually use '/' character as the first separator.</param>
            <param name="normalizeSpecialDirs">A boolean value indicating whether to normalize special directories like '.' and '..' found in the path. It treats '.' dir as the current directory and '..' as the upper directory.</param>
            <param name="persistEndSeparator">An option value indicating whether a separator at the end of the path is to be removed if present. Yes - to always include the ending separator, No - to remove if present, Auto - to keep the last character as it is.</param>
            <param name="persistLeadingSeparator">An option value indicating whether a separator at the beginning of the path is to be removed if present. Yes - to always include the leading separator, No - to remove if present, Auto - to keep the first character as it is.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase)">
            <summary>
            Copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFile">The destination file information.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFileName">The destination file path.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(System.String,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Copies a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64)">
            <summary>
            Copies a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file to copy.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">Length of the data to transfer in bytes, or -1 to transfer the whole file.</param>
            <param name="destinationFile">The destination file information.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(ComponentPro.IO.FileInfoBase,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64)">
            <summary>
            Copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(System.String,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64)">
            <summary>
            Copies or resumes copy a file from this file system to another file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(ComponentPro.IO.FileInfoBase,System.Int64,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Copies or resumes copy a file from this file system to a stream.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(System.String,System.Int64,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Copies or resumes copy a file from this file system to a stream.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destStream">The destination stream to receive the file content.</param>
            <param name="length">Length of the data to transfer, or -1 to transfer the whole file.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToSync(ComponentPro.IO.FileInfoBase,System.String,System.Int64,ComponentPro.IO.FileSystem,ComponentPro.IO.FileInfoBase,System.String,System.Int64,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            Copies a source file to the specified destination file.
            </summary>
            <param name="sourceFileInfo"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceOffset"></param>
            <param name="destinationFileSystem"></param>
            <param name="destinationFileInfo"></param>
            <param name="destinationFilePath"></param>
            <param name="destinationOffset"></param>
            <param name="length"></param>
            <param name="asyncOp"></param>
            <returns></returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToSync(ComponentPro.IO.FileInfoBase,System.String,System.IO.Stream,System.Int64,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            Copies a source file to the specified destination file.
            </summary>
            <param name="sourceFileInfo"></param>
            <param name="sourceFilePath"></param>
            <param name="output"></param>
            <param name="sourceOffset"></param>
            <param name="length"></param>
            <param name="asyncOp"></param>
            <returns></returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyToSync(ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Copies the source file to the destination file specified in the <paramref name="currentProgressFileItem"/> parameter.
            </summary>
            <param name="currentProgressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetCommonChecksumAlgorithms(ComponentPro.IO.FileSystem,ComponentPro.IO.FileSystem)">
            <summary>
            Gets checksum algorithms that both file system have in common.
            </summary>
            <param name="xsystem">The first system.</param>
            <param name="ysystem">The second system.</param>
            <returns>The list of checksum algorithms that both file system have in common; or a null reference if they dont have any common checksum algorithms.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CalculateTimeDiff(ComponentPro.IO.FileSystem,ComponentPro.IO.FileSystem)">
            <summary>
            Calculates the time difference between the source and the dest file systems.
            This function utilizes the <see cref="P:ComponentPro.IO.FileSystem.ServerTimeZoneOffset"/> property to calculate the time difference.
            </summary>
            <param name="src">The source file system.</param>
            <param name="dest">The dest file system.</param>
            <returns>The calculated time difference.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFrom(System.IO.Stream,ComponentPro.IO.FileInfoBase)">
            <summary>
            Copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFrom(System.IO.Stream,System.Int64,ComponentPro.IO.FileInfoBase,System.Int64,System.Int64)">
            <summary>
            Copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destinationFile">The destination file on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFrom(System.IO.Stream,System.String)">
            <summary>
            Copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The path of the destination file on this system.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFrom(System.IO.Stream,System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Copies data in a stream to the specified destination file on this system.
            </summary>
            <param name="source">The source data.</param>
            <param name="destFilePath">The destination file path on this system.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <param name="length">The number of bytes to transfer.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Clone">
            <excludeall/>
            <summary>
            Creates a copy of the current file system.
            </summary>
            <returns>The cloned file system.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyMembersToAnotherSystem(ComponentPro.IO.FileSystem)">
            <excludeall/>
            <summary>
            Copies members to another file system. For internal threading uses only.
            </summary>
            <param name="dest"></param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnTransferConfirm(ComponentPro.IO.TransferConfirmEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.TransferConfirmEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Cancel">
            <summary>
            Cancels all the operations.
            </summary>
            <return><c>true</c> if an operation is being canceled; otherwise, <c>false</c>.</return>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Cancel(System.Object)">
            <summary>
            Cancels the file transfer operation associated with the specified user-defined object.
            </summary>
            <param name="userState">The user-defined object associated with the file transfer operation, or null reference to cancel all the current file transfer operations.</param>
            <return><c>true</c> if an operation is found and being canceled; otherwise, <c>false</c>.</return>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.IsCanceling">
            <summary>
            Returns a boolean value indicating whether user has called the <see cref="M:ComponentPro.IO.FileSystem.Cancel"/> method.
            </summary>
            <returns><c>true</c> if user has called the <see cref="M:ComponentPro.IO.FileSystem.Cancel"/> method; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.IsCanceling(System.Object)">
            <summary>
            Returns a boolean value indicating whether user has called the <see cref="M:ComponentPro.IO.FileSystem.Cancel"/> method for an asynchronous operation specified by the <paramref name="userState"/>.
            </summary>
            <param name="userState">User-defined object to identify the transfer.</param>
            <returns><c>true</c> if user has called the <see cref="M:ComponentPro.IO.FileSystem.Cancel"/> method; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnProgress(ComponentPro.IO.FileSystemProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.FileSystemProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnThreadStateChanged(ComponentPro.IO.TransferThreadStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.ThreadStateChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.TransferThreadStateChangedEventArgs"/> that contains the event data.</param>        
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnCreateDirectoryCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.CreateDirectoryCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateDirectoryAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.CreateDirectory(System.String)"/> operation.
            Creates an empty directory.
            </summary>
            <param name="path">Pathname of the new directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateDirectoryAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.CreateDirectory(System.String)"/> operation.
            Creates an empty directory.
            </summary>
            <param name="path">Pathname of the new directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnSetCurrentDirectoryCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.SetCurrentDirectoryCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SetCurrentDirectoryAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetCurrentDirectory(System.String)"/> operation.
            </summary>
            <param name="path">Path of the directory to change to.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SetCurrentDirectoryAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetCurrentDirectory(System.String)"/> operation.
            </summary>
            <param name="path">Path of the directory to change to.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnGetCurrentDirectoryCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.GetCurrentDirectoryCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetCurrentDirectoryAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously gets the current working directory of the file system.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetCurrentDirectoryAsync(System.Object)">
            <summary>
            Asynchronously gets the current working directory of the file system.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnDeleteFileCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.DeleteFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteFileAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously deletes the specified file.
            </summary>
            <param name="path">The path to the file to be deleted.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteFileAsync(System.String,System.Object)">
            <summary>
            Asynchronously deletes the specified file.
            </summary>
            <param name="path">The path to the file to be deleted.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteFileAsync(ComponentPro.IO.FileInfoBase,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously deletes the specified file.
            </summary>
            <param name="fileInfo">The file to be deleted.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="fileInfo"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteFileAsync(ComponentPro.IO.FileInfoBase,System.Object)">
            <summary>
            Asynchronously deletes the specified file.
            </summary>
            <param name="fileInfo">The file to be deleted.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="fileInfo"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnDirectoryExistsCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Boolean})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.DirectoryExistsCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventHandler`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DirectoryExistsAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Boolean},System.Object)">
            <summary>
            Asynchronously detects whether the specified directory exists on the file system.
            </summary>
            <param name="directoryPath">The path of the directory to check.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DirectoryExistsAsync(System.String,System.Object)">
            <summary>
            Asynchronously detects whether the specified directory exists on the file system.
            </summary>
            <param name="directoryPath">The path of the directory to check.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnFileExistsCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Boolean})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.FileExistsCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.FileExistsAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Boolean},System.Object)">
            <summary>
            Asynchronous detects whether the specified file exists on the file system.
            </summary>
            <param name="filePath">The path of the file to check.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.FileExistsAsync(System.String,System.Object)">
            <summary>
            Asynchronous detects whether the specified file exists on the file system.
            </summary>
            <param name="filePath">The path of the file to check.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.FileExistsAsync(System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Boolean},System.Object)">
            <summary>
            Asynchronously determines whether at least one file found that matches the specified search condition in the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory to check.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.FileExistsAsync(System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously determines whether at least one file found that matches the specified search condition in the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory to check.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnGetLastWriteTimeCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.DateTime})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.GetLastWriteTimeCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetLastWriteTimeAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.DateTime},System.Object)">
            <summary>
            Asynchronous retrieves the modification date and time of the specified file.
            </summary>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetLastWriteTimeAsync(System.String,System.Object)">
            <summary>
            Asynchronous retrieves the modification date and time of the specified file.
            </summary>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnGetFileLengthCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.GetFileLengthCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileLengthAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously retrieves the size of the specified file.
            </summary>
            <param name="filePath">The path of the file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileLengthAsync(System.String,System.Object)">
            <summary>
            Asynchronously retrieves the size of the specified file.
            </summary>
            <param name="filePath">The path of the file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnGetItemInfoCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileInfoBase})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.GetItemInfoCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetItemInfoAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoBase},System.Object)">
            <summary>
            Asynchronously retrieves a <see cref="T:ComponentPro.IO.FileInfoBase"/> containing the information about the specified file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetItemInfoAsync(System.String,System.Object)">
            <summary>
            Asynchronously retrieves a <see cref="T:ComponentPro.IO.FileInfoBase"/> containing the information about the specified file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnListDirectoryCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileInfoCollection})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.ListDirectoryCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectoryAsync(System.String,ComponentPro.IO.SearchCondition,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Asynchronously lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="flags">A boolean value indicating whether to always include subdirectories.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exclude/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectoryAsync(System.String,ComponentPro.IO.SearchCondition,System.Int32,System.Object)">
            <summary>
            Asynchronously lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="flags">A boolean value indicating whether to always include subdirectories.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exclude/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectoryAsync(System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Asynchronously lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectoryAsync(System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectoryAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectoryAsync(System.String,System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectoryAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories in the current directory.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectoryAsync(System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories in the specified directory.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectoryAsync(ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileInfoCollection},System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories that match the search condition in the current directory.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectoryAsync(ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously retrieves the list of files and directories that match the search condition in the current directory.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnListNameCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String[]})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.ListNameCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> containg the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListNameAsync(System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListName(System.String,ComponentPro.IO.SearchCondition)"/> operation.
            Retrieves the list of file and directory names in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListNameAsync(System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListName(System.String,ComponentPro.IO.SearchCondition)"/> operation.
            Retrieves the list of file and directory names in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListNameAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListName(System.String)"/> operation.
            Retrieves the list of file and directory names in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListNameAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListName(System.String)"/> operation.
            Retrieves the list of file and directory names in the specified directory.
            </summary>
            <param name="path">The path of the directory, or null for current directory. 
            If the file system is FTP, consider changing the current directory before listing because many FTP servers do not support LIST command with parameter.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListNameAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListName"/> operation.
            Retrieves the list of file and directory names in the current directory.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListNameAsync(System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListName"/> operation.
            Retrieves the list of file and directory names in the current directory.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnRenameCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.RenameCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.RenameAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> operation.
            Renames a file or directory on the file system.
            </summary>
            <param name="path">The pathname of the file to be renamed.</param>
            <param name="newPath">The pathname to rename the file to.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="newPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> or <paramref name="newPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.RenameAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> operation.
            Renames a file or directory on the file system.
            </summary>
            <param name="path">The pathname of the file to be renamed.</param>
            <param name="newPath">The pathname to rename the file to.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="newPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> or <paramref name="newPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnSetLastWriteTimeCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.SetLastWriteTimeCompleted"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
            <remarks>
            In .NET 4.5 and higher it's recommended to use <c>async</c> and <c>await</c> modifiers for asynchronous operations.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SetLastWriteTimeAsync(System.String,System.DateTime,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetLastWriteTime(System.String,System.DateTime)"/> operation.
            Sets the modification date and time of the specified file.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="newDateTime">The date and time to set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SetLastWriteTimeAsync(System.String,System.DateTime,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetLastWriteTime(System.String,System.DateTime)"/> operation.
            Sets the modification date and time of the specified file.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="newDateTime">The date and time to set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnGetFileChecksumCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.Checksum})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.GetFileChecksumCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.Checksum},System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksum"/> operation.
            Retrieves the checksum of the specified file.
            </summary>
            <param name="type">Desired checksum type (the file system must support it).</param>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="offset">The offset in remote file where reading will start.</param>
            <param name="length">The maximum number of bytes to read or -1 to read the whole file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksum"/> operation.
            Retrieves the size of the specified file.
            </summary>
            <param name="type">Desired checksum type (the file system must support it).</param>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="offset">The offset in remote file where reading will start.</param>
            <param name="length">The maximum number of bytes to read or -1 to read the whole file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.Checksum},System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksum"/> operation.
            Retrieves the checksum of the specified file.
            </summary>
            <param name="type">Desired checksum type (the file system must support it).</param>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileChecksumAsync(ComponentPro.IO.FileChecksumType,System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksum"/> operation.
            Retrieves the size of the specified file.
            </summary>
            <param name="type">Desired checksum type (the file system must support it).</param>
            <param name="path">The path of the file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnCreateSymlinkCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.CreateSymlinkCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateSymlinkAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CreateSymlink"/> operation.
            Creates a symlink.
            </summary>
            <param name="path">The path of the symlink.</param>
            <param name="target">The path to the target directory or file to which the specified <paramref name="path"/> is linked.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateSymlinkAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CreateSymlink"/> operation.
            Creates a symlink.
            </summary>
            <param name="path">The path of the symlink.</param>
            <param name="target">The path to the target directory or file to which the specified <paramref name="path"/> is linked.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnResolveSymlinkCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.ResolveSymlinkCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ResolveSymlinkAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.ResolveSymlink"/> operation.
            Resolves a symlink.
            </summary>
            <param name="path">The path of the symlink to resolve.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ResolveSymlinkAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="O:ComponentPro.IO.FileSystem.ResolveSymlink"/> operation.
            Resolves a symlink.
            </summary>
            <param name="path">The path of the symlink to resolve.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetItemInfoPartsBeforeTransferring(ComponentPro.IO.FileSystem,System.Boolean)">
            <summary>
            Indicates whether the file system should obtains information of the source files before transferring.
            </summary>
            <param name="anotherFileSystem">Source or destination file system to check.</param>
            <param name="copyToAnotherFileSystem">Indicates whether to copy to the <paramref name="anotherFileSystem"/>.</param>
            <value><c>true</c> if the file system should call <see cref="M:ComponentPro.IO.FileSystem.GetItemInfo(System.String)"/> to obtain information of source files before transferring; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.QuickSynchronize(System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions)">
            <summary>
            Synchronizes the specified local directory with the specified source directory with the specified options.
            </summary>
            <param name="localDirectory">The local directory to synchronize.</param>
            <param name="sourceDirectory">The source directory on this file system to synchronize with the <paramref name="localDirectory"/> directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the <paramref name="sourceDirectory"/> is the master directory, meaning the content of the <paramref name="localDirectory"/> will be identical to <paramref name="sourceDirectory"/>'s; 
            otherwise, the content of the <paramref name="sourceDirectory"/> will be identical to <paramref name="localDirectory"/>'s.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectory"/>, <paramref name="localDirectory"/>, or <paramref name="options"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceDirectory"/> or <paramref name="localDirectory"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.QuickSynchronize(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions)">
            <summary>
            Synchronizes the specified directory on the specified destination file system with the specified source directory with the specified options.
            </summary>
            <param name="destination">The destination <see cref="T:ComponentPro.IO.FileSystem"/>.</param>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectory"/>, <paramref name="destDirectory"/>, <paramref name="options"/>, or <paramref name="destination"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceDirectory"/> or <paramref name="destDirectory"/> contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.QuickSynchronize(ComponentPro.IO.FileSystem,ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.QuickSyncOptions)">
            <summary>
            Synchronizes the specified directory on the specified destination file system with the source directory on the specified source file system with the specified options.
            </summary>
            <param name="source">The source <see cref="T:ComponentPro.IO.FileSystem"/>.</param>
            <param name="destination">The destination <see cref="T:ComponentPro.IO.FileSystem"/>.</param>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="options">The <see cref="T:ComponentPro.IO.QuickSyncOptions"/> object.</param>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectory"/>, <paramref name="destDirectory"/>, <paramref name="options"/>, <paramref name="source"/>, or <paramref name="destination"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceDirectory"/> or <paramref name="destDirectory"/> contains illegal path characters.</exception>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.InvalidFileNameChars">
            <summary>
            Gets or sets an array containing the characters that are not allowed in file or directory names, or null if this file system accepts all characters in file name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.InvalidFileNameCharsSubstitution">
            <summary>
            Gets or sets the substitution character that will replace the <see cref="P:ComponentPro.IO.FileSystem.InvalidFileNameChars">invalid characters</see> found in file or directory name while copying files from another file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.FileSystemFeatures">
            <summary>
            Gets the supported features.
            </summary>
            <exclude/>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.CanGetStreamForWriting">
            <summary>
            Returns a value indicating whether the system supports getting stream for writting data to file.
            </summary>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.CanGetStreamForReading">
            <summary>
            Returns a value indicating whether the system supports getting stream for reading data from file.
            </summary>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.CopyToCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CopyToAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.CopyFromCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CopyFromAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.GetDirectorySizeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetDirectorySizeAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.QuickSynchronizeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.QuickSynchronizeAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.SearchCompleted">
            <summary>
            Occurs when an <see cref="O:ComponentPro.IO.FileSystem.SearchAsync">asynchronous search operation</see> completes.
            </summary>
            <remarks>
            In .NET 4.5 and higher it's recommended to use <c>async</c> and <c>await</c> modifiers for asynchronous operations.
            </remarks>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.MoveCompleted">
            <summary>
            Occurs after a <see cref="O:ComponentPro.IO.FileSystem.MoveAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.DeleteDirectoryCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.DeleteDirectoryAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.DeleteCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.DeleteAsync"/> operation completes.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.LoopCurrentState">
            <exclude/>        
        </member>
        <member name="P:ComponentPro.IO.FileSystem.LoopsTotal">
            <exclude/>        
        </member>
        <member name="E:ComponentPro.IO.FileSystem.TransferConfirm">
            <summary>
            Occurs when the file system has detected an issue while transferring files such as existing file found, symlink detected or an error encountered.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.UniqueId">
            <summary>
            Gets the unique id of the current object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.ThreadId">
            <summary>
            Gets the thread id that the current object is using.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.Progress">
            <summary>
            Occurs when a block of data is transferred, or a file operation is being or has been executed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.ThreadStateChanged">
            <summary>
            Occurs when the state of the thread is changed while in a multi-thread file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.CreateDirectoryCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CreateDirectoryAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.SetCurrentDirectoryCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.SetCurrentDirectoryAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.GetCurrentDirectoryCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetCurrentDirectoryAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.DeleteFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.DeleteFileAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.DirectoryExistsCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.DirectoryExistsAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.FileExistsCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.FileExistsAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.GetLastWriteTimeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetLastWriteTimeAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.GetFileLengthCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileLengthAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.GetItemInfoCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetItemInfoAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.ListDirectoryCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.ListDirectoryAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.ListNameCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.ListNameAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.RenameCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.RenameAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.SetLastWriteTimeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.SetLastWriteTimeAsync"/> operation completes.
            </summary>
            <remarks>
            In .NET 4.5 and higher it's recommended to use <c>async</c> and <c>await</c> modifiers for asynchronous operations.
            </remarks>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.GetFileChecksumCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.GetFileChecksumAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.CreateSymlinkCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.CreateSymlinkAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.ResolveSymlinkCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.FileSystem.ResolveSymlinkAsync"/> operation completes.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.BytesPerSecondUpdateInterval">
            <summary>
            Gets or sets the number of milliseconds to update the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.BytesPerSecond"/> property. The default value is 400 ms.
            </summary>
            <seealso cref="T:ComponentPro.IO.FileSystemProgressEventArgs"/>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.FileInfoPartsToGetBeforeTransferring">
            <summary>
            Specifies which information of the source file will be obtained before transferring.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.ProgressInterval">
            <summary>
            Gets or sets the length of the interval in milliseconds between the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> events fired during transfer. The default value is 100 ms.
            </summary>
            <remarks>
            If set to zero(0), the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event is fired for every data block transferred. 
            In GUI applications, displaying a progress bar and messages too many times may affect the application performance. Increase this property to avoid that.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.ServerTimeZoneOffset">
            <summary>
            This value is used to synchronize the CreationTime and LastWriteTime of files after a transfer. The default value is TimeSpan.Zero.
            </summary>
            <remarks>
            When a file is copied from this file system to another one and the <see cref="P:ComponentPro.IO.FileSystem.RestoreFileProperties"/> option is enabled, 
            the file's <see cref="P:ComponentPro.IO.FileInfoBase.CreationTime"/> and <see cref="P:ComponentPro.IO.FileInfoBase.LastWriteTime"/> will be added with this value. 
            Likewise, <see cref="P:ComponentPro.IO.FileInfoBase.CreationTime"/> and <see cref="P:ComponentPro.IO.FileInfoBase.LastWriteTime"/> of a file that is copied from another file system will be subtracted from this value.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.RestoreFileProperties">
            <summary>
            Gets or sets a boolean value indicating whether to restore file properties including <see cref="P:ComponentPro.IO.FileInfoBase.LastWriteTime"/> 
            and <see cref="P:ComponentPro.IO.FileInfoBase.CreationTime"/> after downloading or uploading if possible.
            </summary>
            <remarks>
            Use the <see cref="P:ComponentPro.IO.FileSystem.ServerTimeZoneOffset"/> to adjust the <see cref="P:ComponentPro.IO.FileInfoBase.LastWriteTime"/> and <see cref="P:ComponentPro.IO.FileInfoBase.CreationTime"/> of the files to be copied.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.TraceSource">
            <summary>
            Gets or sets the source object for all log messages generated by this object. If not set, the property returns the current object.
            </summary>
            <remarks>
            It is handy to set this property to a different object other than this object in some situation where all log messages should come from a single source.
            For example, in a build system, uploading files is just a child task of a main one, by assigning this property to the main task, 
            you can categorize all messages that come from the main task.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.TraceListenerManager">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.IO.FileSystem.TraceListenerManager"/> object to which the log messages generated by this object are sent. 
            If not set, the <see cref="F:ComponentPro.Diagnostics.XTrace.Default"/> trace listener manager is used. If this property is set to null, all messages from this object wont be logged.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.Transferrer">
            <summary>
            Represents the base multi-file transferrer.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.Transferrer.#ctor(ComponentPro.Diagnostics.ITraceSource,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.Transferrer"/> class.
            </summary>
            <param name="owner">The owner object.</param>
            <param name="threadIdStart">The starting thread ID number.</param>
            <param name="multiThreads">Indicates that whether this is a multi-thread transfer.</param>
        </member>
        <member name="M:ComponentPro.IO.Transferrer.OnItemProcessed(ComponentPro.IO.TransferQueueItemProcessedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.Transferrer.ItemProcessed"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:ComponentPro.IO.Transferrer.Stop">
            <summary>
            Stops the transferrer.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.Transferrer.Clear">
            <summary>
            Stops and clears the queue.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.Transferrer.Wait(System.Boolean)">
            <summary>
            Waits until all threads are paused or completed.
            </summary>
            <param name="waitForCompletion"><c>true</c> to wait for all threads of the queue to complete; or <c>false</c> to wait for the threads to be completely paused.</param>
        </member>
        <member name="M:ComponentPro.IO.Transferrer.Reset">
            <summary>
            Stops and reset the queue.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.Transferrer.Sort(System.Boolean)">
            <summary>
            Sorts the file list by priority.
            </summary>
            <param name="ascending"><c>true</c> to sort the items with ascending order - items with lower priority will be processed first; otherwise, <c>false</c> - descending order, items with higher priority will be processed first.</param>
        </member>
        <member name="M:ComponentPro.IO.Transferrer.Sort(System.Collections.Generic.IComparer{ComponentPro.IO.ProgressFileItem})">
            <summary>
            Sorts the processing list by the specified comparer.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:ComponentPro.IO.Transferrer.Dispose">
            <summary>
            Releases the used resources.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.Transferrer.ItemProcessed">
            <summary>
            Occurs when an item is processed.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.ITransferThreadInfoCollection">
            <summary>
            Defines the generalized collection of <see cref="T:ComponentPro.IO.TransferThreadInfo"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.ITransferThreadInfoCollection.PauseAll">
            <summary>
            Pauses all threads.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.ITransferThreadInfoCollection.ResumeAll">
            <summary>
            Resumes all threads.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.ITransferThreadInfoCollection.StopAll">
            <summary>
            Stops all threads.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.ITransferThreadInfoCollection.WaitAll(System.Boolean)">
            <summary>
            Waits until all threads are paused or completed.
            </summary>
            <param name="waitForCompletion"><c>true</c> to wait for all threads of the queue to complete; or <c>false</c> to wait for the threads to be completely paused.</param>
        </member>
        <member name="P:ComponentPro.IO.ITransferThreadInfoCollection.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The item index</param>
            <returns></returns>
        </member>
        <member name="P:ComponentPro.IO.ITransferThreadInfoCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileInfoComparisonMethod">
            <summary>
            Defines the possible comparison types for the <see cref="T:ComponentPro.IO.FileInfoComparer"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileInfoComparisonMethod.Name">
            <summary>
            Compare by <see cref="P:ComponentPro.IO.FileInfoBase.Name"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileInfoComparisonMethod.Size">
            <summary>
            Compare by <see cref="P:ComponentPro.IO.FileInfoBase.Length"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileInfoComparisonMethod.CreationDate">
            <summary>
            Compare by <see cref="P:ComponentPro.IO.FileInfoBase.CreationTime"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileInfoComparisonMethod.LastWriteTime">
            <summary>
            Compare by <see cref="P:ComponentPro.IO.FileInfoBase.LastWriteTime"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileInfoComparisonMethod.LastAccessTime">
            <summary>
            Compare by <see cref="P:ComponentPro.IO.FileInfoBase.LastAccessTime"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileInfoComparisonMethod.Attributes">
            <summary>
            File attributes.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileInfoComparisonMethod.Type">
            <summary>
            Compare by file type in the following order: Directory, File, and Symlink.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TimeResolution">
            <summary>
            Specifies the time resolutions used for comparisons.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TimeResolution.None">
            <summary>
            Time is taken as is.
            </summary>
            <remarks>
            Useful when working with NTFS file system.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TimeResolution.Seconds">
            <summary>
            The smallest time unit for comparisons is one second. Milliseconds are ignored.
            E.g. 11:33:55.999 is rounded to 11:33:55.000.
            </summary>
            <remarks>
            Useful when working with some UNIX FTP or SFTP servers.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TimeResolution.TwoSeconds">
            <summary>
            The smallest time unit for comparisons is two seconds. So odd seconds are rounded to lower even value; milliseconds are ignored.
            E.g. 11:33:55.999 is rounded to 11:33:54.000.
            </summary>
            <remarks>
            Useful when working with FAT file system (.NET CF, MS-DOS).
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TimeResolution.Minutes">
            <summary>
            The smallest time unit for comparisons is one minute. Seconds are ignored.
            E.g. 11:33:55.234 is rounded to 11:33.
            </summary>
            <remarks>
            Useful when working with some UNIX FTP or SFTP servers.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TimeResolution.Days">
            <summary>
            The smallest time unit for comparisons is one day. Time component is ignored.
            E.g. 2012-12-12 11:33:55.999 is rounded to 2012-12-12 00:00:00.000.
            </summary>
            <remarks>
            Useful when working with some UNIX FTP or SFTP servers.
            </remarks>
        </member>
        <member name="T:ComponentPro.IO.AndComparer">
            <summary>
            Represents an AND logical comparison of objects.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.AndComparer.#ctor(System.Collections.IComparer[])">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.IO.AndComparer"/>.
            </summary>
            <param name="comparers">An array of comparers to use.</param>
        </member>
        <member name="M:ComponentPro.IO.AndComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer interface implementation. Compares two instances of provided objects.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the result of x and y comparison.
            Value Less than zero means x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
        </member>
        <member name="T:ComponentPro.IO.FileInfoComparer">
            `<summary>
            Class used to compare <see cref="T:ComponentPro.IO.FileInfoBase"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoComparer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.IO.FileInfoComparer"/> with default sorting by file name and with ascending sort mode.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoComparer.#ctor(ComponentPro.IO.FileInfoComparisonMethod)">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.IO.FileInfoComparer"/> with specified comparer type and ascending sort mode.
            </summary>
            <param name="comparerType">The comparison method.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoComparer.#ctor(ComponentPro.IO.FileInfoComparisonMethod,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.IO.FileInfoComparer"/> with specified comparer type and ascending sort mode.
            </summary>
            <param name="comparerType">The comparison method.</param>
            <param name="ascending">Ascending or decending.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoComparer.#ctor(ComponentPro.IO.FileInfoComparisonMethod,System.Boolean,ComponentPro.IO.TimeResolution)">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.IO.FileInfoComparer"/> with specified comparer type, ascending sort mode and time comparison granularity.
            </summary>
            <param name="comparerType">The comparison method.</param>
            <param name="ascending">Ascending or decending.</param>
            <param name="timeResolution">The granularity for time comparisons.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer interface implementation. Compares two instances of <see cref="T:ComponentPro.IO.FileInfoBase"/>.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>Value greater than zero when x is greater then y, zero when they are equal a or less than zero when x is lesser than y.</returns>
        </member>
        <member name="P:ComponentPro.IO.FileInfoComparer.ComparerType">
            <summary>
            Gets or sets the compare type.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoComparer.TimeResolution">
            <summary>
            Gets or sets the granularity for time comparisons.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoComparer.Ascending">
            <summary>
            Gets or sets a boolean value indicating whether to compare items in ascending or decending mode.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.MultiFileOperationOptions">
            <summary>
            Represents the options for multi-file operations.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.MultiFileOperationOptions.#ctor(System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            </summary>
            <param name="buildTree">Indicates whether the directory tree should be retrieved before transferring files. By setting this property to true, the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalPercentage"/> property will be made available.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.MultiFileOperationOptions.#ctor(ComponentPro.IO.SearchCondition)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.MultiFileOperationOptions"/> class.
            This constructor sets <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> to true, <see cref="P:ComponentPro.IO.MultiFileOperationOptions.Recursive"/> to Recursive, and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SymlinksResolveAction"/> to <see cref="T:ComponentPro.IO.SymlinksResolveAction">Skip</see>.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.MultiFileOperationOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.MultiFileOperationOptions"/> class. Search for all files and subdirectories.
            This constructor sets <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> to <c>false</c>, <see cref="P:ComponentPro.IO.MultiFileOperationOptions.Recursive"/> to Recursive, 
            and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SymlinksResolveAction"/> to <see cref="T:ComponentPro.IO.SymlinksResolveAction">Skip</see>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.MultiFileOperationOptions.Clone">
            <summary>
            Creates a shallow copy of this instance.
            </summary>
            <returns>The cloned <see cref="T:ComponentPro.IO.MultiFileOperationOptions"/>.</returns>
        </member>
        <member name="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree">
            <summary>
            Gets or sets a boolean value indicating whether to retrieve directory structure before the multi-file operation (e.g. transferring or deleting multiple files and directories).
            </summary>
            <remarks>
            Setting this option to <c>true</c> makes <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalRemainingTime"/>, <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalSize"/>, <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalFiles"/>, and <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalPercentage"/> available when handling the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event.
            The directory structure information retrieval may take time.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.MultiFileOperationOptions.RetainFileList">
            <summary>
            Gets or sets a boolean value indicating whether to retain the <see cref="P:ComponentPro.IO.FileSystemTransferStatistics.FileList"/> list while executing the multi-file operation and after it completes, 
            making it possible to access information of all processed files and directories.
            </summary>
            <value><c>true</c> to retain the <see cref="P:ComponentPro.IO.FileSystemTransferStatistics.FileList"/> list; otherwise, <c>false</c>.</value>
            <remarks>
            By default, this property is <c>false</c> to minimize memory footprint while executing the operation. By setting this property to <c>true</c>, 
            the operation will need some extra memory. When processing many files (i.e. 100k files), you may want to leave this property as default (<c>false</c>) to reduce the memory needed to store the list.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.MultiFileOperationOptions.Recursive">
            <summary>
            Gets or sets the recursion mode indicating whether to allow scanning subdirectories for files. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MultiFileOperationOptions.SymlinksResolveAction">
            <summary>
            Specifies action taken when a symlink has been found.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition">
            <summary>
            Specifies search condition.
            </summary>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.NotSearchCondition"/>
        </member>
        <member name="P:ComponentPro.IO.MultiFileOperationOptions.SrcConnectionParameters">
            <summary>
            Specifies the source file system's connection parameters. This option is for <see cref="T:ComponentPro.IO.IRemoteFileSystem">remote file system</see>, including FTP, SFTP, and SCP file systems only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MultiFileOperationOptions.SrcAuthenticationParameters">
            <summary>
            Specifies the source file system's authentication parameters. This option is for <see cref="T:ComponentPro.IO.IRemoteFileSystem">remote file system</see>, including FTP, SFTP, and SCP file systems only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MultiFileOperationOptions.DestConnectionParameters">
            <summary>
            Specifies the source file system's connection parameters. This option is for <see cref="T:ComponentPro.IO.IRemoteFileSystem">remote file system</see>, including FTP, SFTP, and SCP file systems only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MultiFileOperationOptions.DestAuthenticationParameters">
            <summary>
            Specifies the source file system's authentication parameters. This option is for <see cref="T:ComponentPro.IO.IRemoteFileSystem">remote file system</see>, including FTP, SFTP, and SCP file systems only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath">
            <summary>
            Gets or sets a boolean value indicating whether to combine (<see cref="T:ComponentPro.IO.AndSearchCondition">AND logical operator</see>) the wildcard masks found in the source path method parameter with the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> property in this transfer option object.
            </summary>
            <remarks>
            <p>
            If the source path does not contain wildcard masks, this field is ignored.
            </p>
            <p>
            If the source path contains wildcard masks, and this field is set to <c>true</c>, then the <see cref="T:ComponentPro.IO.AndSearchCondition">AND logical operator</see> is used; otherwise, if this field is set to <c>false</c>, the <see cref="T:ComponentPro.IO.OrSearchCondition">OR logical operator</see> is used.
            For example, in a call to the <see cref="O:ComponentPro.IO.FileSystem.Delete"/>, you specify <b>"C:\temp\*.tmp"</b> as the source path and your <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> is <see cref="T:ComponentPro.IO.AttributeSearchCondition"/>(<see cref="T:System.IO.FileAttributes"/>.Hidden). 
            If this field is true, the <see cref="T:ComponentPro.IO.FileSystem"/> will search for all hidden files with <b>.tmp</b> extensions; false means the <see cref="T:ComponentPro.IO.FileSystem"/> will search for files with <b>.tmp</b> extensions or with hidden attributes.
            </p>
            </remarks>
            <value>
            The default value is <c>true</c>.
            </value>
        </member>
        <member name="T:ComponentPro.IO.SearchAction">
            <summary>
            Defines the actions used to determine whether to add files to the search result returned by the <see cref="O:ComponentPro.IO.FileSystem.Search"/> methods.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchAction.None">
            <summary>
            Dont add the item. If the item is a directory and the recursive parameter is set, children item of the folder are to be scanned.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchAction.Add">
            <summary>
            Add the file or folder parameter in <see cref="T:ComponentPro.IO.FileFoundDelegate"/> to the resulting list.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchAction.DontScanChildren">
            <summary>
            Dont scan the children of the folder parameter in <see cref="T:ComponentPro.IO.FileFoundDelegate"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchAction.Cancel">
            <summary>
            Peacefully quit the search operation and return the resulting file list as it is.
            Unlike <see cref="O:ComponentPro.IO.FileSystem.Cancel"/>, this does not raise the <see cref="T:ComponentPro.IO.FileSystemException"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SearchOptions">
            <summary>
            Represents the options for search operations.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.SearchOptions.Clone">
            <summary>
            Creates a shallow copy of this instance.
            </summary>
            <returns>The cloned <see cref="T:ComponentPro.IO.SearchOptions"/>.</returns>
        </member>
        <member name="P:ComponentPro.IO.SearchOptions.Recursive">
            <summary>
            Gets or sets the recursion mode indicating whether to allow scanning subdirectories for files. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SearchOptions.ExploreMode">
            <summary>
            Gets or sets the option indicating whether to allow searching for items even the their parent directories are excluded in the <see cref="P:ComponentPro.IO.SearchOptions.SearchCondition"/>. 
            The default value is <c>true</c>.
            This option is not used when <see cref="P:ComponentPro.IO.SearchOptions.Recursive"/> is <c>false</c> or <see cref="P:ComponentPro.IO.SearchOptions.ItemTypes"/> does not include <see cref="F:ComponentPro.IO.SearchConditionFileTypes.Directory"/>.
            e.g., if the <see cref="P:ComponentPro.IO.SearchOptions.SearchCondition"/> indicates that 'bin' and 'obj' folders are excluded, this option is <c>true</c> and <see cref="P:ComponentPro.IO.SearchOptions.ItemTypes"/> is Any, 
            items in 'bin' and 'obj' are still returned; otherwise, items in these folders are not returned.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SearchOptions.ItemTypes">
            <summary>
            Gets or sets the item types.
            Default value is <see cref="F:ComponentPro.IO.SearchConditionFileTypes.Any"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SearchOptions.SearchCondition">
            <summary>
            Gets or sets the search conditions to match against the files, or a null reference to search for all files.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SearchOptions.FileFound">
            <summary>
            Gets or sets the delegate that is invoked when an item is found.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileFoundDelegate">
            <summary>
            Represents the method that is called when a file is found while <see cref="O:ComponentPro.IO.FileSystem.Search">searching for files and directories</see>.
            </summary>
            <param name="f">An <see cref="T:ComponentPro.IO.FileInfoBase"/> that contains the file information.</param>
            <return><see cref="F:ComponentPro.IO.SearchAction.Add"/> if the file is to be added to the resulting list; <see cref="F:ComponentPro.IO.SearchAction.None"/> to ignore the file; <see cref="F:ComponentPro.IO.SearchAction.Cancel"/> to cancel searching.</return>
        </member>
        <member name="T:ComponentPro.IO.MemoryFileSystem">
            <summary>
            Represents the file system that resides in memory.
            </summary>
            <remarks>
            This file system is case-sensitive.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.MemoryFileSystem.Default">
            <summary>
            The default memory file system.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.GetSupportedChecksumTypes">
            <summary>
            Returns checksum types supported by the file system.
            </summary>
            <returns>Checksum types supported by the file system.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.DeleteFileSync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The path to the file to delete.</param>
            <param name="item">The <see cref="T:ComponentPro.IO.ProgressFileItem"/> object.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.FileExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if the path is a null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of the path.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.RenameSync(System.String,System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
            <param name="item">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.SetLastWriteTimeSync(System.String,System.DateTime,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Sets the date and time at which the specified file was last written.
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.GetLastWriteTimeSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.GetFileLengthSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the size of the specified file, in bytes.
            </summary>
            <param name="filePath">The path to the file to get size.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The length of the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.CreateFileInfo(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.MemoryFileInfo"/> and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="originalPath">The original path of the file.</param>
            <param name="isFile">Indicates whether this is a file.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.MemoryFileInfo"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.CreateFileInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information. When the specified item exists the <see cref="T:ComponentPro.IO.FileInfoBase"/> instance will contain the information of the existing item.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="infoParts">Indicates what information of the file will be filled.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>        
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.CreateItemCollection">
            <excludeall/>
            <summary>
            Creates a collection of the <see cref="T:ComponentPro.IO.FileInfoBase"/>.
            </summary>
            <returns>The collection of the <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.DeleteDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">The name of the directory to delete.</param>
            <param name="item">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.TransferDataFromStreamToFileSync(ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            This allow you to copy data from a stream or a <paramref name="currentProgressFileItem"/> to a file on this system.
            </summary>
            <param name="currentProgressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="source">The source stream.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.TransferDataFromFileToStreamSync(System.Boolean,ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Transfers data contents of a file on the system to a data stream.
            </summary>
            <param name="forComparison">true to indicate that this transfer is for a file comparison; otherwise, false.</param>
            <param name="currentProgressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="destinationStream">The destination file stream.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The number of bytes transferred.</returns>        
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.GetStreamForWriting(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns a Stream for writing data to the specified file.
            </summary>
            <param name="file">The file to write to.</param>
            <param name="offset">The position at which data will be written to.</param>
            <param name="asyncOp">The asynchronous operation object.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.GetStreamForReading(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns a Stream for reading data from the specified file.
            </summary>
            <param name="file">The file to read.</param>
            <param name="offset">The position at which data will be read from.</param>
            <param name="asyncOp">The asynchronous operation object.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.GetItemInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns a <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory.
            </summary>
            <param name="path">The name of the file or directory to get information.</param>
            <param name="parts">Specifies what information of the file to retrive.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>An <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory, 
            or a null reference (Nothing in VB.NET) if the specified file or directory not found.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.CreateDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Creates the specified directory.
            </summary>
            <param name="path">The path to the directory to create.</param>
            <param name="item">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The path to the newly created directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.ListDirectorySync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.IO.ListDirFlags,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition. This method returns the list of files and subdirectories in the first level of the specified directory only. To scan subdirectories deeply, use the <see cref="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)"/> method.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <param name="basePath">The base path for the <paramref name="searchCondition"/>.</param>
            <param name="searchCondition">The search condition.</param>
            <param name="flags">The listing flags.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The list of files or directories found.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.DirectoryExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <param name="path">The path to test.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the specified directory exists; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.GetCurrentDirectorySync(System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the current directory.
            </summary>
            <param name="asyncOp">The async operation.</param>
            <returns>The current directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.SetCurrentDirectorySync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Sets the current directory.
            </summary>
            <param name="path">The path to the new directory.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.CreateSymlinkSync(System.String,System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.ResolveSymlinkSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if path contains an absolute path; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.Clone">
            <excludeall/>
            <summary>
            Creates a copy of the current file system.
            </summary>
            <returns>The cloned file system.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.ValidatePath(System.String,System.String)">
            <excludeall/>
            <summary>
            Validates the spcecified path. <paramref name="path">Path</paramref> must not be a null reference or empty. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.ValidatePathCanBeEmpty(System.String,System.String)">
            <excludeall/>
            <summary>
            Validates the specified path. <paramref name="path">Path</paramref> must not be a null reference. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.ProcessException(System.Exception)">
            <excludeall/>
            <summary>
            Handles an exception.
            </summary>
            <param name="x">The exception.</param>
            <returns>The processed exception.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileSystem.GetFileChecksumSync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the calculated checksum of the specified type.
            </summary>
            <param name="type">The checksum type.</param>
            <param name="path">The path to the file to calculate checksum.</param>
            <param name="offset">The file offset.</param>
            <param name="length">The number of bytes to calculate.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The calculated checksum.</returns>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileSystem.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileSystem.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileSystem.CanGetStreamForWriting">
            <excludeall/>
            <summary>
            Returns a value indicating whether the system supports getting stream for writting data to file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileSystem.CanGetStreamForReading">
            <excludeall/>
            <summary>
            Returns a value indicating whether the system supports getting stream for reading data from file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileSystem.FileSystemFeatures">
            <summary>
            Gets the supported features.
            </summary>
            <exclude/>
        </member>
        <member name="T:ComponentPro.IO.StreamItem">
            <summary>
            Represents a stream file.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileInfoBase">
            <summary>
            Defines a generalized file information.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.UpdateFullName(System.String)">
            <summary>
            Updates the fully qualified name of the file or directory. Intended for advanced usage only.
            </summary>
            <param name="newFullName">The new full name.</param>
            <remarks>After this update, all properties of the class remain unchanged except the <see cref="P:ComponentPro.IO.FileInfoBase.FullName"/> and <see cref="P:ComponentPro.IO.FileInfoBase.Name"/> properties. To update all properties of this file object, call the <see cref="M:ComponentPro.IO.FileInfoBase.Refresh"/> method.</remarks>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Matches(ComponentPro.IO.SearchCondition)">
            <summary>
            Returns a boolean value indicating whether the file matches the specified search condition.
            </summary>
            <param name="conditions">The search condition.</param>
            <returns>true if file matches; other, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.MatchesOne(ComponentPro.IO.SearchCondition[])">
            <summary>
            Returns a boolean value indicating whether the file matches at least one of the specified search conditions.
            </summary>
            <param name="conditions">The search conditions.</param>
            <returns>true if file matches a search condition; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.MatchesAll(ComponentPro.IO.SearchCondition[])">
            <summary>
            Returns a boolean value indicating whether the file matches all the specified search conditions.
            </summary>
            <param name="conditions">The search conditions.</param>
            <returns>true if file matches all the search conditions; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Matches(System.String)">
            <summary>
            Returns true if the file name matches the pattern which may contain * and ? wildcards.
            Matching is done without regard to case.
            </summary>
            <param name="pattern">The pattern used for comparison.</param>
            <returns>True if match; otherwise, is False.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Matches(System.String,System.Boolean)">
            <summary>
            Returns true if the file name matches the pattern which may contain * and ? wildcards.
            </summary>
            <param name="pattern">The pattern used for comparison.</param>
            <param name="ignoreCase">A System.Boolean indicating a insensitive or case-sensitive comparison. (false indicates a case-insensitive comparison.)</param>
            <returns>True if match; otherwise, is False.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Reset">
            <summary>
            Resets the properties.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Delete">
            <summary>
            Permanently deletes the physical file or directory.
            </summary>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories or null if this item is not a directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Create">
            <summary>
            Creates the physical item represented by this object.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Refresh">
            <summary>
            Re-reads the information from the physical item.
            </summary>
            <returns><c>true</c> if the operation completes successfully, otherwise is <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.RefreshSync(System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Re-reads the information from the physical item.
            </summary>
            <param name="asyncOp">The async operation.</param>
            <returns><c>true</c> if the operation completes successfully, otherwise is <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.IsSameAs(ComponentPro.IO.FileInfoBase)">
            <summary>
            Gets a boolean value indicating if the source and target items represent the same physical entity.
            </summary>
            <param name="target">The target to compare.</param>
            <returns><c>true</c> if the source and target objects represent the same physical entity; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.GetFiles(System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns a collection of files matching the specified <paramref name="searchCondition">search condition</paramref> in this folder.
            </summary>
            <param name="recursive"><c>true</c> to search for files in subfolders as well; otherwise, <c>false</c> to search for files in the top level folder.</param>
            <param name="searchCondition">The search condition to match against the files.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/> of files found.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.GetFolders(System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns a collection of folders matching the specified <paramref name="searchCondition">search condition</paramref> in this folder.
            </summary>
            <param name="recursive"><c>true</c> to search for folders in subfolders as well; otherwise, <c>false</c> to search for folders in the top level folder.</param>
            <param name="searchCondition">The search condition to match against the folders.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/> of folders found.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.GetItems(System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns a collection of files and directories matching the specified <paramref name="searchCondition">search condition</paramref> in this folder.
            </summary>
            <param name="recursive"><c>true</c> to search for files and directories in subfolders as well; otherwise, <c>false</c> to search for files and directories in the top level folder.</param>
            <param name="searchCondition">The search condition to match against the files and directories.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.FileInfoBase"/> of files and directories found.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.CopyTo(ComponentPro.IO.FileInfoBase,System.Boolean)">
            <summary>
            Copies this file to the specified destination file.
            </summary>
            <param name="destinationFileInfo">The destination file.</param>
            <param name="overwriteIfExists"><c>true</c> to overwrite the destination file exists; otherwise, <c>false</c>.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies this file to the specified local destination file.
            </summary>
            <param name="localDestinationFile">The local destination file path.</param>
            <param name="overwriteIfExists"><c>true</c> to overwrite the destination file exists; otherwise, <c>false</c>.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.OpenRead(System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified sharing mode.
            </summary>
            <param name="share">Constants for controlling the kind of access other <see cref="T:System.IO.Stream"/> objects can have to the same file.</param>
            <returns>A stream object that can be used to read data from the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified sharing mode.
            </summary>
            <param name="overwrite">A boolean value indicating whether to overwrite the existing file; otherwise, new content will be appended to the end of the file.</param>
            <param name="share">Constants for controlling the kind of access other <see cref="T:System.IO.Stream"/> objects can have to the same file.</param>
            <returns>A stream object that can be used to write data to the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.ApplyPropertiesFrom(ComponentPro.IO.FileInfoBase)">
            <summary>
            Applies properties from the specified source file.
            </summary>
            <param name="sourceFile">The source file information.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.ApplyPropertiesFromSync(ComponentPro.IO.FileInfoBase,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Applies properties from the specified source file.
            </summary>
            <param name="source">The source file information.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Read(System.IO.Stream)">
            <summary>
            Reads the whole file to the specified output data stream.
            </summary>
            <param name="outputStream">The output data stream to write the file content.</param>
            <returns>The number of bytes successfully read from the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Read">
            <summary>
            Reads the whole file and return its content to an array of bytes.
            </summary>
            <returns>The content of the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Write(System.Byte[])">
            <summary>
            Creates a new file and writes data from the specified input data.
            </summary>
            <param name="data">The input data to write to the file.</param>
            <returns>The number of bytes successfully written to the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Write(System.String,System.Text.Encoding)">
            <summary>
            Creates a new file and writes string.
            </summary>
            <param name="data">The input string to write to the file.</param>
            <returns>The number of bytes successfully written to the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.Write(System.IO.Stream)">
            <summary>
            Creates a new file and writes data from the specified input data stream.
            </summary>
            <param name="inputStream">The input data stream to read the content and write to the file.</param>
            <returns>The number of bytes successfully written to the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.GetChecksum(ComponentPro.IO.FileChecksumType)">
            <summary>
            Gets the checksum of the current file.
            </summary>
            <param name="type">The checksum type.</param>
            <returns>The calculated checksum.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.CopyTo(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Copies contents of this directory to the specified destination directory.
            </summary>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The destination directory path.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories or null if this item is not a directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileInfoBase.CopyTo(System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Copies contents of this directory to the specified local destination directory.
            </summary>
            <param name="destinationDirectoryPath">The destination local directory path.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that contains the statistics of the operation and list of processed files and directories or null if this item is not a directory.</returns>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.Name">
            <summary>
            Gets the file name, or null reference if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.DirectoryName">
            <summary>
            Gets the directory path, or null reference if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.SymlinkPath">
            <summary>
            Gets the path this item points to if it is symlink, null otherwise.
            </summary>
            <value>The path this item points to if it is symlink, null otherwise.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.FullName">
            <summary>
            Gets the fully qualified name of the file or directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.OriginalPath">
            <summary>
            Gets the original path of the item. For internal use only.
            e.g. If a <see cref="O:FileSystem.ListDirectory"/> method pass a relative path like 'Folder/SubFolder', the original path of the resulting items must be relative too.
            like 'Folder/SubFolder/file1'.
            </summary>        
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.CreationTime">
            <summary>
            Gets the creation time of the current <see cref="T:ComponentPro.IO.FileInfoBase"/> object.
            </summary>
            <value>The creation time of the current <see cref="T:ComponentPro.IO.FileInfoBase"/> object or <see cref="F:System.DateTime.MinValue"/> if this's not available.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.LastAccessTime">
            <summary>
            Gets the time the current file or directory was last accessed.
            </summary>
            <value>The time when the current file or directory was last accessed or <see cref="F:System.DateTime.MinValue"/> if this's not available.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.LastWriteTime">
            <summary>
            Gets the time when the current file or directory was last written to.
            </summary>
            <value>The time when the current file or directory was last written to or <see cref="F:System.DateTime.MinValue"/> if this's not available.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.Attributes">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:ComponentPro.IO.FileInfoBase"/>.
            </summary>
            <value>The <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:ComponentPro.IO.FileInfoBase"/> or 0 if not available.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.Length">
            <summary>
            Gets the size of the current file.
            </summary>
            <value>The size of the current file or -1 if not available or not filled. When this value is -1 call the <see cref="M:ComponentPro.IO.FileInfoBase.Refresh"/> method to update the file information.</value>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.IsFile">
            <summary>
            Gets a boolean value indicating whether this is a regular file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.IsDirectory">
            <summary>
            Gets a boolean value indicating whether this is a directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.IsSymlink">
            <summary>
            Gets a boolean value indicating whether this is a symlink.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.FileSystem">
            <summary>
            Gets the file system that the file belongs to.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.Exists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileInfoBase.ParentFolder">
            <summary>
            Gets the parent folder object.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.#ctor(System.IO.Stream,ComponentPro.IO.FileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.StreamItem"/> from a specified stream.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="fileSystem">The file system the stream belongs to.</param>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.Reset">
            <summary>
            Resets the properties.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.ToString">
            <summary>
            Returns the name of the item.
            </summary>
            <returns>The name of the item.</returns>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.ApplyPropertiesFromSync(ComponentPro.IO.FileInfoBase,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.CopyTo(ComponentPro.IO.FileInfoBase,System.Boolean)">
            <summary>
            Copies this file to the specified destination file. This function is not supported.
            </summary>
            <param name="destinationFileInfo">The destination file.</param>
            <param name="overwriteIfExists"><c>true</c> to overwrite the destination file exists; otherwise, <c>false</c>.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.Create">
            <summary>
            Creates the physical item represented by this object. This function is not supported.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.Delete">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.IsSameAs(ComponentPro.IO.FileInfoBase)">
            <summary>
            Not supported. Always false.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.UpdateFullName(System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="newFullName">The new full name.</param>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.RefreshSync(System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.OpenRead(System.IO.FileShare)">
            <summary>
            Not supported.
            </summary>
            <param name="share"></param>
        </member>
        <member name="M:ComponentPro.IO.StreamItem.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>
            Not supported.
            </summary>
            <param name="overwrite"></param>
            <param name="share"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.Stream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.Attributes">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file.
            </summary>
            <value>Always 0.</value>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.CreationTime">
            <summary>
            Gets the creation time of the file.
            </summary>
            <value>Always DateTime.MinValue.</value>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.Exists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value>Always true.</value>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.FileSystem">
            <summary>
            Not supported. Always null.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.FullName">
            <summary>
            Not supported. Always null.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.IsDirectory">
            <summary>
            Not supported. Always false.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.IsFile">
            <summary>
            Not supported. Always true.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.IsSymlink">
            <summary>
            Not supported. Always false.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.LastAccessTime">
            <summary>
            Not supported. Always DateTime.MinValue.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.LastWriteTime">
            <summary>
            Not supported. Always DateTime.MinValue.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.Length">
            <summary>
            Gets the size of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.Name">
            <summary>
            Not supported. Always null.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.SymlinkPath">
            <summary>
            Not supported. Always null.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.StreamItem.ParentFolder">
            <summary>
            Not supported. Always null.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.MemoryFileInfo">
            <summary>
            Represents a memory file.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.Reset">
            <summary>
            Resets the properties.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.#ctor(System.String,System.IO.FileAttributes,System.Int64,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.MemoryFileInfo"/>.
            </summary>
            <param name="path">The file path.</param>
            <param name="attrs">The file attributes.</param>
            <param name="size">The file length in bytes.</param>
            <param name="lastWriteTime">Last write time of the file.</param>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.#ctor(ComponentPro.IO.MemoryFileSystem,System.String,System.IO.FileAttributes,System.Int64,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.MemoryFileInfo"/>.
            </summary>
            <param name="fileSystem">The file system that the file belongs to.</param>
            <param name="path">The file path.</param>
            <param name="attrs">The file attributes.</param>
            <param name="size">The file length in bytes.</param>
            <param name="lastWriteTime">Last write time of the file.</param>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.Close">
            <summary>
            Closes the file and disposes all the used resources.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.UpdateFullName(System.String)">
            <summary>
            Updates the fully qualified name of the file or directory. Intended for advanced usage only.
            </summary>
            <param name="newFullName">The new full name.</param>
            <remarks>After this update, all properties of the class remain unchanged except the <see cref="P:ComponentPro.IO.MemoryFileInfo.FullName"/> and <see cref="P:ComponentPro.IO.MemoryFileInfo.Name"/> properties. To update all properties of this file object, call the <see cref="M:ComponentPro.IO.FileInfoBase.Refresh"/> method.</remarks>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.ToString">
            <summary>
            Returns the name of the item.
            </summary>
            <returns>The name of the item.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.ApplyPropertiesFromSync(ComponentPro.IO.FileInfoBase,System.ComponentModel.AsyncOperation)">
            <summary>
            Copies the properties from the specified source file to this file.
            </summary>
            <param name="source">The source file object.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.OpenRead(System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified sharing mode.
            </summary>
            <param name="share">Constants for controlling the kind of access other <see cref="T:System.IO.Stream"/> objects can have to the same file.</param>
            <returns>A stream object that can be used to read data from the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified sharing mode.
            </summary>
            <param name="overwrite">A boolean value indicating whether to overwrite the existing file; otherwise, new content will be appended to the end of the file.</param>
            <param name="share">Constants for controlling the kind of access other <see cref="T:System.IO.Stream"/> objects can have to the same file.</param>
            <returns>A stream object that can be used to write data to the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.RefreshSync(System.ComponentModel.AsyncOperation)">
            <summary>
            Refreshes the current file object.
            </summary>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the operation is successful otherwise false.</returns>
            <excludeall/>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.IO.MemoryFileInfo.IsSameAs(ComponentPro.IO.FileInfoBase)">
            <summary>
            Gets a boolean value indicating if the source and target items represent the same physical entity.
            </summary>
            <param name="info">The target to compare.</param>
            <returns><c>true</c> if the source and target objects represent the same physical entity; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.Name">
            <summary>
            Gets the file name. Always null reference.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.SymlinkPath">
            <summary>
            Gets the path this item points to if it is symlink, null otherwise.
            </summary>
            <value>The path this item points to if it is symlink, null otherwise.</value>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.FullName">
            <summary>
            Gets the fully qualified name of the file or directory. Always null reference.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.OriginalPath">
            <summary>
            Gets the original path of the item. For internal use only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current <see cref="T:ComponentPro.IO.DiskFileInfo"/> object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.Length">
            <summary>
            Gets the size of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.IsFile">
            <summary>
            Gets a boolean value indicating whether this is a regular file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.IsDirectory">
            <summary>
            Gets a boolean value indicating whether this is a directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.IsSymlink">
            <summary>
            Gets a boolean value indicating whether this is a symlink.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.Attributes">
            <summary>
            Gets or sets the <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:ComponentPro.IO.MemoryFileInfo"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.MemoryFileInfo.FileSystem">
            <summary>
            Gets the file system that the file belong to.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.IRemoteFileSystem">
            <summary>
            Defines generalized remote file system.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.KeepAliveAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Sends a command or data packet to the server asynchronously to keep the connection alive.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.KeepAliveAsync(System.Object)">
            <summary>
            Sends a command or data packet to the server asynchronously to keep the connection alive.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.ConnectAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Connects to a remote server asynchronously.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>
            Connects to a remote server asynchronously.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DisconnectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DisconnectAsync(System.Object)">
            <summary>
            Initiates an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>        
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.AuthenticateAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.AuthenticateAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFileAsync(System.String,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the data stream asynchronously.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:ComponentPro.IO.FileSystem.GetCurrentDirectory">GetCurrentDirectory</see>.</remarks>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFileAsync(System.String,System.IO.Stream,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:ComponentPro.IO.FileSystem.GetCurrentDirectory">GetCurrentDirectory</see>.</remarks>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFileAsync(System.String,System.IO.Stream,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the remote file to a stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="outputStream">The destination stream to write the data to.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFileAsync(System.String,System.IO.Stream,System.Int64,System.Int64,System.Object)">
            <summary>
            Asynchronously downloads the remote file to a stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="outputStream">The destination stream to write the data to.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFileAsync(System.IO.Stream,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFileAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFileAsync(System.IO.Stream,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFileAsync(System.IO.Stream,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>        
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current working folder will be uploaded. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> parameters of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory is to be uploaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself are uploaded; the destination directory contains "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current working folder will be uploaded. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> parameters of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory is to be uploaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself are uploaded; the destination directory contains "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be uploaded to the server. 
            When the parameter <paramref name="localFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current working folder will be uploaded. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, null, "/RemoteDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>UploadAsync(null, false, new string[] {@"d:\file1", @"c:\folder\file2", @"d:\dir1" }, ...)</code> or <code>UploadAsync(null, false, new object[] {@"d:\temp\file1", fileInfo1, fileInfo2 }, ...)</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path and name of the local directory where the files will be uploaded to the server. 
            When the parameter <paramref name="localFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current working folder will be uploaded. 
            If "*.txt" is used, all the files in the current working folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, null, "/RemoteDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>UploadAsync(null, false, new string[] {@"d:\file1", @"c:\folder\file2", @"d:\dir1" }, ...)</code> or <code>UploadAsync(null, false, new object[] {@"d:\temp\file1", fileInfo1, fileInfo2 }, ...)</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourcePath">The path of the source directory on the source file system to upload files to the remote server. If it is empty, the current directory path of the file system is used. If it's null, <paramref name="sourceFilesToTransfer"/> must be specified.
            When the parameter <paramref name="sourceFilesToTransfer"/> is a null reference, This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, "/RemoteDir", true) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourcePath">The path of the source directory on the source file system to upload files to the remote server. If it is empty, the current directory path of the file system is used. If it's null, <paramref name="sourceFilesToTransfer"/> must be specified.
            When the parameter <paramref name="sourceFilesToTransfer"/> is a null reference, This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, "/RemoteDir", true) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This cannot be null or empty.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>) This cannot be null or empty.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadAsync(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>). This can be null.</param>
            <param name="destinationFileSystem">The destination system that receives the files from the remote server.</param>
            <param name="destinationDirectoryPath">The path of the destination directory to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadAsync(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>). This can be null.</param>
            <param name="destinationFileSystem">The destination system that receives the files from the remote server.</param>
            <param name="destinationDirectoryPath">The path of the destination directory to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the local directory on the disk file system.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the local directory on the disk file system.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the local directory on the disk file system.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="remoteFiles">List of files to download, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the local directory on the disk file system.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="remoteFiles">List of files to download, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous downloads files or directories in the specified list to the specified local directory.
            </summary>
            <param name="remoteFilesToTransfer">The list of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>). This cannot be null or empty.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronous downloads files or directories in the specified list to the specified local directory.
            </summary>
            <param name="remoteFilesToTransfer">The list of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>). This cannot be null or empty.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search condition to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search condition to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.KeepAlive">
            <summary>
            Leep the connection alive.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Connect(System.String)">
            <summary>
            Connects to the remote server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Connect(System.String,System.Int32)">
            <summary>
            Connects to the remote server.
            </summary>
            <param name="server">The server address - either a hostname or a dotted string address.</param>
            <param name="port">The server port (eg. 21 or 22).</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Connect(System.Object[])">
            <summary>
            For internal uses only.
            </summary>
            <param name="parameters">The connection parameters.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Disconnect">
            <summary>
            Disconnects.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the remote server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <returns>The logon message returned by the remote server.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Authenticate(System.Object[])">
            <summary>
            For internal uses only.
            </summary>
            <param name="parameters"></param>
            <returns>The logon message returned by the remote server.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.GetConnectionParameters">
            <summary>
            Gets the current connection parameters. For internal use only.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.GetAuthenticationParameters">
            <summary>
            Gets the current authentication parameters. For internal use only.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.GetServerTimeDifference">
            <summary>
            Returns the time difference between the client and server.
            </summary>
            <returns>The time difference between the client and server.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFile(System.IO.Stream,System.String)">
            <summary>
            Uploads the data from the specified Stream to the server and stores it using the specified filename.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The filename as it will be stored on the server. Cannot be empty. Some servers may be case-sensitive.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFile(System.String,System.String)">
            <summary>
            Uploads the specified local file to the server and stores it using the specified filename.
            </summary>
            <param name="localPath">The path and filename of the local file to upload.</param>
            <param name="remotePath">The filename as it will be stored on the server. Cannot be empty. Some servers may be case-sensitive.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFile(System.IO.Stream,System.String,System.Int64,System.Int64)">
            <summary>
            Uploads the data from the specified Stream to the server and stores it using the specified filename, starting from the specified remote offset.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The filename as it will be stored on the server. Cannot be empty. Some servers may be case-sensitive.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.UploadFile(System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Uploads the specified file to the server and stores it using the specified filename, starting from the specified local offset and remote offset.
            </summary>
            <param name="localPath">The path and filename of the local file to upload.</param>
            <param name="remotePath">The filename as it will be stored on the server. Cannot be empty. Some servers may be case-sensitive.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.GetUploadStream(System.String)">
            <summary>
            Retrieves a direct access to the write-only data stream to send to.
            </summary>
            <param name="remotePath">The filename of the file to write to. Some FTP and SFTP servers may be case-sensitive.</param>
            <returns>A Stream for writing data to the remote file.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFile(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Receives the specified file from the remote server into the specified Stream, starting from the specified offset.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some servers may be case-sensitive.</param>
            <param name="remoteOffset">The byte offset at which to start receiving data from the remote file.</param>
            <param name="outputStream">A reference to the Stream to which to receive the file.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset of the local file.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFile(System.String,System.IO.Stream)">
            <summary>
            Receives the specified remote file to the specified Stream.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some servers may be case-sensitive.</param>
            <param name="outputStream">A reference to the Stream to which to receive the file.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.DownloadFile(System.String,System.String)">
            <summary>
            Receives the specified file from the server and stores it on the local system using the specified path and filename.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some servers may be case-sensitive.</param>
            <param name="localPath">The path and filename of the file as it will be stored on the local system.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.GetDownloadStream(System.String)">
            <summary>
            Retrieves a direct access to the readonly data stream being received.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some FTP and SFTP servers may be case-sensitive.</param>
            <returns>A Stream for reading data from the remote file.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory using multiple threads.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBasePath">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to download, or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options">options parameter</paramref>.</param>
            <param name="destinationFileSystem">The destination system that receives the files from the remote server.</param>
            <param name="destinationDirectoryPath">The path of the destination directory to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads remote files or directories in the list to the specified local directory using multiple threads.
            </summary>
            <param name="remoteFilesToTransfer">The list of files or directories to download. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. This cannot be null or empty. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="localPath">The path of the local directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Downloads all files in the specified remote directory to the local directory on the disk file system.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBasePath">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.FileInfoBase"/> objects to download, or a null reference to transfer files that match the search condition specified in the <paramref name="options">options parameter</paramref>.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to download, or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options">options parameter</paramref>.</param>
            <param name="destinationFileSystem">The destination system that receives the files from the remote server.</param>
            <param name="destinationDirectoryPath">The path of the destination directory to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to download, or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options">options parameter</paramref>.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files or directories in the specified list to the specified local directory.
            </summary>
            <param name="remoteFilesToTransfer">The list of files or directories to download (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>). 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. This cannot be null or empty.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Downloads files in the specified remote directory that match the specified search pattern to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="searchCondition">The search condition to match against the file.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Downloads files in the specified remote directory that match the specified search pattern to the destination directory.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Download(System.String,System.String)">
            <summary>
            Downloads all files in the specified remote directory to the specified local directory on the disk file system.
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download. 
            This can contain wildcard masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourcePath">The path of the source directory on the source file system to upload files to the remote server. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is a null reference, This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, "/RemoteDir", true) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="sourceFilesToTransfer">The list of <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to upload, or a null reference to transfer files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options">options parameter</paramref>.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localPath">The path of the local directory to upload files to the remote server. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="localFilesToTransfer"/> is a null reference, This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, "/RemoteDir", true) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="localFilesToTransfer">The list of <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to upload, or a null reference to transfer files in the <paramref name="localPath"/> that match the search condition specified in the <paramref name="options">options parameter</paramref>.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localPath">The path of the local directory to upload files to the remote server. 
            This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Uploads files from the specified local directory that match the specified search pattern to the specified remote directory.
            </summary>
            <param name="localPath">The path of the local directory to upload files to the remote server. 
            This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search condition to match against the file.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode)">
            <summary>
            Uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localPath">The path of the local directory to upload files to the remote server. 
            This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(System.String,System.String)">
            <summary>
            Uploads all files and subdirectories from the specified local directory to the specified remote directory.
            </summary>
            <param name="localPath">The path of the local directory to upload files to the remote server. 
            This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>). This cannot be null or empty.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourcePath">The path of the source directory on the source file system to upload files to the remote server. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is a null reference, This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, "/RemoteDir", true) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="sourceFilesToTransfer">The list of <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to upload, or a null reference to transfer files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options">options parameter</paramref>.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="localPath">The path of the local directory to upload files to the remote server. If it is empty, the current directory path of the file system is used. 
            When the parameter <paramref name="localFilesToTransfer"/> is a null reference, This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, "/RemoteDir", true) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="localFilesToTransfer">The list of <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of files to upload, or a null reference to transfer files in the <paramref name="localPath"/> that match the search condition specified in the <paramref name="options">options parameter</paramref>.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="localPath">The path of the local directory to upload files to the remote server. 
            This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Uploads all files and subdirectories from the specified local directory to the specified remote directory using multiple threads.
            </summary>
            <param name="localPath">The path of the local directory to upload files to the remote server.
            This can contain wildcard masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remotePath">The path of the remote directory for storing files.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Upload(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files in the specified list to the specified remote directory using multiple threads.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. This cannot be null or empty. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.ResumeUploadFile(System.IO.Stream,System.String)">
            <summary>
            Resumes uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <returns>The number of bytes transferred.</returns>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.ResumeUploadFile(System.String,System.String)">
            <summary>
            Resumes uploading the content of the local file to the previously interrupted remote file.
            </summary>
            <returns>The number of bytes transferred, -1 if remote file size is greater than the local file size, or 0 if no need to resume upload because remote file size is equal to local file size.</returns>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.ResumeDownloadFile(System.String,System.String)">
            <summary>
            Resumes download the content of the remote file to the previously interrupted local file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>The number of bytes transferred, -1 if local file size is greater than the remote file size, or 0 if no need to resume download because remote file size is equal to local file size.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.ResumeDownloadFile(System.String,System.String,System.Int64@)">
            <summary>
            Resumes download the content of the remote file to the previously interrupted local file.
            </summary>
            <returns>The number of bytes transferred, -1 if local file size is greater than the remote file size, or 0 if no need to resume download because remote file size is equal to local file size.</returns>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localPath">The path of the local file.</param>
            <param name="remoteSize">Returns remote file size.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.IsFatalError(System.Exception)">
            <summary>
            Returns a boolean value indicating whether the specified error indicates that the client should reconnect to the server.
            </summary>
            <param name="ex">The error to check.</param>
            <returns><c>true</c> to indicates that the client should reconnect to the server; otherwise, <c>false</c>.</returns>
            <remarks>
            This method fires the <see cref="E:ComponentPro.IO.IRemoteFileSystem.ReconnectionErrorChecking"/> event to let you manually check if the component needs to reconnect when it encounters specific errors.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.MultiPartDownload(System.String,System.String,System.Int32,ComponentPro.Net.MultiPartDownloadErrorEventHandler,ComponentPro.Net.MultiPartDownloadCompletedEventHandler)">
            <summary>
            Downloads a file on the server and writes to the specified local file using multiple threads.
            </summary>
            <param name="remotePath">The remote file path and name to download.</param>
            <param name="localPath">The local file path and name to store the downloaded data.</param>
            <param name="parts">The number of threads used to download the remote file.</param>
            <param name="errorHandler">The error handler that is called whenever an error occurs, giving an opportunity to display the error and retry downloading.</param>
            <param name="downloadCompletedEventHandler">The callback function that is called when the download operation completes.</param>
            <returns>The download result.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.MultiPartDownload(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int32,ComponentPro.Net.MultiPartDownloadErrorEventHandler,ComponentPro.Net.MultiPartDownloadCompletedEventHandler)">
            <summary>
            Downloads a file on the server and writes to the specified local file using multiple threads.
            </summary>
            <param name="remotePath">The remote file path and name to download.</param>
            <param name="localPath">The local file path and name to store the downloaded data.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <param name="parts">The number of threads used to download the remote file.</param>
            <param name="errorHandler">The error handler that is called whenever an error occurs, giving an opportunity to display the error and retry downloading.</param>
            <param name="downloadCompletedEventHandler">The callback function that is called when the download operation completes.</param>
            <returns>The download result.</returns>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.MultiPartDownload(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int32,System.Boolean,ComponentPro.Net.MultiPartDownloadErrorEventHandler,ComponentPro.Net.MultiPartDownloadCompletedEventHandler)">
            <summary>
            Downloads a file on the server and writes to the specified local file using multiple threads.
            </summary>
            <param name="remotePath">The remote file path and name to download.</param>
            <param name="localPath">The local file path and name to store the downloaded data.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <param name="parts">The number of threads used to download the remote file.</param>
            <param name="waitForCompletion">A boolean value indicating whether to wait until the download operation completes before giving control to the caller. <c>true</c> to block the caller's process until the download completes; otherwise, <c>false</c> to immediately returns control to the caller's process. When the download completes, <paramref name="downloadCompletedEventHandler"/> will be called.</param>
            <param name="errorHandler">The error handler that is called whenever an error occurs, giving an opportunity to display the error and retry downloading.</param>
            <param name="downloadCompletedEventHandler">The callback function that is called when the download operation completes.</param>
            <returns>The download result.</returns>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.KeepAliveCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.IRemoteFileSystem.KeepAliveAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ConnectAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.DisconnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.IRemoteFileSystem.DisconnectAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.AuthenticateCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.IRemoteFileSystem.AuthenticateAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.DownloadFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.IRemoteFileSystem.DownloadFileAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.UploadFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.IRemoteFileSystem.UploadFileAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.UploadCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.IRemoteFileSystem.UploadAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.DownloadCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.IO.IRemoteFileSystem.DownloadAsync"/> operation completes.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.IsConnected">
            <summary>
            Gets a boolean value indicating whether the client is connected to the server.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.IsBusy">
            <summary>
            Gets a boolean value indicating whether the server is busy.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session has already been authenticated.
            </summary>
            <value><c>true</c> if authenticated; <c>false</c> otherwise.</value>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.ServerName">
            <summary>
            Gets the server name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.ServerPort">
            <summary>
            Gets the port number.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.MaxDownloadSpeed">
            <summary>
            Gets or sets the maximum allowed download speed, in kilobytes. For unlimited speed, set this to zero.
            </summary>
            <value>Maximum allowed download speed.</value>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.MaxUploadSpeed">
            <summary>
            Gets or sets the maximum allowed upload speed, in kilobytes. For unlimited speed, set this to zero.
            </summary>
            <value>Maximum allowed upload speed.</value>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.TransferType">
            <summary>
            Gets or sets the data transfer type.
            </summary>
            <value>The file transfer type. Default is <see cref="T:ComponentPro.IO.FileTransferType">Binary</see>.</value>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.State">
            <summary>
            Gets the current state of the remote file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.Timeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period an operation (sending commands, waiting for responses or time between data buffer transfers) should timeout. 
            </summary>
            <remarks>
            By default, this property is set to 60000 (60 seconds). Minimal value is 1000. A value of -1 or 0 indicates that there is no timeout - the library will wait until a corresponding response is received or the request is canceled.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> used to encode and decode command parameters and server responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> used to encode and decode command parameters and server responses. Default is <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.PathNormalization">
            <summary>
            Gets or sets a boolean value indicating whether to normalize path before any file or directory operation.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.AsciiFileSearchConditions">
            <summary>
            Gets or sets the list of ASCII file extensions. 
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.ReconnectionMaxRetries">
            <summary>
            Gets or sets the maximum number of retries for reconnection.
            </summary>
            <remarks>
            By default, this value is 0 (the library does not try to reconnect to the server when the connection is lost). 
            When the connection is lost, the component will try to reconnect to the server. If the number of retries exceeds this value, the class will report the connection error.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.ReconnectionFailureDelay">
            <summary>
            Gets or sets the delay in milliseconds between failed login attempts for reconnection during a multi-file operation.
            </summary>
            <remarks>
            By default, this value is 5000 (5 secs). When the connection is lost, the component will try to reconnect to the server. If the number of retries exceeds the <see cref="P:ComponentPro.IO.IRemoteFileSystem.ReconnectionMaxRetries"/>, the class will report the connection error.
            </remarks>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.StateChanged">
            <summary>
            Occurs when the state of the remote file system is changed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.ReconnectionErrorChecking">
            <summary>
            Occurs when the file system has encountered an error and needs to determine whether it should reconnect to the server.
            </summary>
            <remarks>
            This event is fired when the <see cref="M:ComponentPro.IO.IRemoteFileSystem.IsFatalError(System.Exception)"/> method is called.
            </remarks>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.Reconnecting">
            <summary>
            Occurs when the file system has encountered an error and is reconnecting to the server.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.Reconnected">
            <summary>
            Occurs when the file system has encountered an error and has reconnected to the server successfully.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.EncounteredFatalError">
            <summary>
            Gets a boolean value indicating whether the client object has encountered a fatal error.
            </summary>
            <value><c>true</c> if the client has tried and failed to reconnect to the server with the number of retries specified in <see cref="P:ComponentPro.IO.IRemoteFileSystem.ReconnectionMaxRetries"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ComponentPro.IO.ProgressFileItem">
            <summary>
            Represents a file item on the list obtained after building directory structure in multi-file operations.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileItem.#ctor(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.ProgressFileItem"/> with the specified source and destination files.
            </summary>
            <param name="sourceFileInfo">The source file for the multi-file operation.</param>
            <param name="destFileInfo">The destination file for the multi-file operation. It can be a null reference if the operation does not require a destination file like 'Deleting Files' or 'Setting File Attributes' operation.</param>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileItem.Skip">
            <summary>
            Cancels the current operation on this item only. The whole operation still continues.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileItem.Cancel">
            <summary>
            Cancels the whole operation. It will throw the <see cref="T:ComponentPro.IO.FileSystemOperationCanceledException"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileItem.CheckForCancellation">
            <summary>
            Checks if the current operation is being aborted or skipped. If the current item is being skipped it returns <c>false</c>. If the current operation is being aborted it throw the <see cref="T:ComponentPro.IO.FileSystemOperationCanceledException"/> and cancel the whole operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileItem.ToString">
            <summary>
            Returns a string that represents the current item.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.State">
            <summary>
            Gets the state of the item.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.FirstChild">
            <summary>
            Gets the first child node.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.NextSibling">
            <summary>
            Gets the next sibling node.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.Owner">
            <summary>
            Gets the owner list.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.TransferStatistics">
            <summary>
            Gets the transfer statistics.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.ChildrenCount">
            <summary>
            Gets the number of children.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.SourceFileInfo">
            <summary>
            Gets the source file info, or a null reference (Nothing in VB.NET) if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.SourceStream">
            <summary>
            Gets the source stream, or a null if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.SourceOffset">
            <summary>
            Gets the source file initial offset.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.Length">
            <summary>
            Gets the size of the source data to transfer in bytes, or -1 if not available.
            </summary>
            <remarks>
            To get the real length of the source file, use the <see cref="P:ComponentPro.IO.ProgressFileItem.SourceFileInfo"/> property.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.DestinationFileInfo">
            <summary>
            Gets the destination file info, or a null reference (Nothing in VB.NET) if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.DestinationStream">
            <summary>
            Gets the destination stream, or a null reference if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.DestinationOffset">
            <summary>
            Gets the destination file or data stream initial offset.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.Percentage">
            <summary>
            Gets the current file transfer progress percentage.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.BytesTransferred">
            <summary>
            Gets the number of bytes transferred since the beginning of the current multi-file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.BytesPerSecond">
            <summary>
            Gets the transfer speed - the number of bytes per second.
            </summary>
            <remarks>
            To make this value accurate, we only update this property every 400 milliseconds (0.4 sec) by default. 
            This interval can be changed by setting the property <see cref="P:ComponentPro.IO.FileSystem.BytesPerSecondUpdateInterval"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.RemainingTime">
            <summary>
            Gets the remaining time to transfer the rest of data of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.ElapsedTime">
            <summary>
            Gets the elapsed time of the transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.Error">
            <summary>
            Gets the error encountered while doing a file or directory operation.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.Started">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.Ended">
            <summary>
            Gets the end time.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.Tag">
            <summary>
            Gets or sets the user-defined object associated with this item.
            </summary>
            <value>The user-defined object.</value>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.Priority">
            <summary>
            Specifies the transfer priority of the item while transferring files in a <see cref="T:ComponentPro.IO.TransferQueue"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileItem.FileOverwriteMode">
            <summary>
            Specifies actions to resolve file existing issue while transferring files in a <see cref="T:ComponentPro.IO.TransferQueue"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.ProgressFileList">
            <summary>
            Represents a list of <see cref="T:ComponentPro.IO.ProgressFileItem"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.Sort(System.Boolean)">
            <summary>
            Sorts the file list by priority.
            </summary>
            <param name="ascending"><c>true</c> to sort the items with ascending order - items with lower priority will be processed first; otherwise, <c>false</c> - descending order, items with higher priority will be processed first.</param>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.Sort(System.Collections.Generic.IComparer{ComponentPro.IO.ProgressFileItem})">
            <summary>
            Sorts the file list using the specified comparer.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:ComponentPro.IO.ProgressFileItem"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.Remove(ComponentPro.IO.ProgressFileItem)">
            <summary>
            Removes the first occurrence of a specific object from the list.
            </summary>
            <param name="item">The object to remove from the list.</param>
            <returns><c>true</c> if item was successfully removed from the list; otherwise, <c>false</c>. 
            This method also returns false if item is not found in the original list.</returns>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.Add(ComponentPro.IO.ProgressFileItem)">
            <summary>
            Queues a <see cref="T:ComponentPro.IO.ProgressFileItem"/> to the end of the progress item list.
            </summary>
            <param name="item">The progress file item.</param>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.Insert(System.Int32,ComponentPro.IO.ProgressFileItem)">
            <summary>
            Inserts a <see cref="T:ComponentPro.IO.ProgressFileItem"/> at the specified location.
            </summary>
            <param name="item">The progress file item.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.AddRange(ComponentPro.IO.ProgressFileList)">
            <summary>
            Queues a list of <see cref="T:ComponentPro.IO.ProgressFileItem"/> to the end of the progress item list.
            </summary>
            <param name="source">The list of item to add.</param>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.CopyTo(ComponentPro.IO.ProgressFileItem[],System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
            copied from the list. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.IndexOf(ComponentPro.IO.ProgressFileItem)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="item">The object to locate on the list. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire list, if found; otherwise, –1.</returns>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.Contains(ComponentPro.IO.ProgressFileItem)">
            <summary>
            Determines whether an element is on the list.
            </summary>
            <param name="item">The object to locate on the list. The value can be null for reference types.</param>
            <returns>true if item is found in the list; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.ProgressFileList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ComponentPro.IO.ProgressFileList"/>
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>.</returns>
            <remarks>GetEnumerator is the method that implements the foreach statement (For Each in Visual Basic). You should not need to call this method directly.</remarks>
        </member>
        <member name="E:ComponentPro.IO.ProgressFileList.ItemAdded">
            <summary>
            Occurs when an item has been added to the list.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.ProgressFileList.ItemRemoved">
            <summary>
            Occurs when an item has been removed from the list.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileList.IsReadOnly">
            <summary>
            Indicates whether this list is read-only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileList.Count">
            <summary>
            Gets the number of elements actually contained on the list.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ProgressFileList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:ComponentPro.IO.IDiskCompatibleFileSystem">
            <summary>
            Defines a file system that is compatible with <see cref="T:ComponentPro.IO.DiskFileSystem"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IDiskCompatibleFileSystem.SetAttributes(ComponentPro.IO.FileInfoBase,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file or directory on the specified path.
            </summary>
            <param name="info">The file information to set attributes.</param>
            <param name="attributes">File attributes.</param>
        </member>
        <member name="M:ComponentPro.IO.IDiskCompatibleFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file or directory on the specified path.
            </summary>
            <param name="file">The file path name.</param>
            <param name="attributes">File attributes.</param>
        </member>
        <member name="M:ComponentPro.IO.IDiskCompatibleFileSystem.SetAttributesSync(System.String,System.IO.FileAttributes,System.ComponentModel.AsyncOperation)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file or directory on the specified path.
            </summary>
            <param name="file">The file path name.</param>
            <param name="attributes">File attributes.</param>
            <param name="asyncOp">The <see cref="T:System.ComponentModel.AsyncOperation"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.IDiskCompatibleFileSystem.SetAttributesSync(ComponentPro.IO.FileInfoBase,System.IO.FileAttributes,System.ComponentModel.AsyncOperation)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the specified file or directory.
            </summary>
            <param name="file">The file info object.</param>
            <param name="attributes">File attributes.</param>
            <param name="asyncOp">The <see cref="T:System.ComponentModel.AsyncOperation"/> object.</param>
        </member>
        <member name="T:ComponentPro.Net.MultiPartDownloadErrorType">
            <summary>
            Defines the error types for the multi-part download operation.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.MultiPartDownloadErrorType.Connection">
            <summary>
            An error occurred while connecting to the server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.MultiPartDownloadErrorType.Download">
            <summary>
            An error occurred while downloading data from the server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.MultiPartDownloadErrorType.Write">
            <summary>
            An error occurred while writing data to local file.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.MultiPartDownloadResult">
            <summary>
            Represents the result of a multi-part download operation.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.MultiPartDownloadResult.BytesDownloaded">
            <summary>
            Gets the number of bytes successfully downloaded.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.MultiPartDownloadResult.Errors">
            <summary>
            Gets the list of errors that have occurred during the transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.MultiPartDownloadResult.Success">
            <summary>
            Gets a boolean value indicating whether the whole transfer was successful.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.MultiPartDownloadCompletedEventHandler">
            <summary>
            Represents the method that handles an event that is raised when a multi-part download operation completes.
            </summary>
            <param name="result">The multi-part download result.</param>
        </member>
        <member name="T:ComponentPro.Net.MultiPartDownloadErrorEventHandler">
            <summary>
            Represents the method that handles an event that is raised when an error occurs in a multi-part download operation.
            </summary>
            <param name="e">The download error.</param>
        </member>
        <member name="T:ComponentPro.Net.MultiPartDownloadErrorEventArgs">
            <summary>
            Provides data for the <see cref="O:ComponentPro.IO.IRemoteFileSystem.MultiPartDownload"/> methods.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.MultiPartDownloadErrorEventArgs.ErrorType">
            <summary>
            Gets the error type.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.MultiPartDownloadErrorEventArgs.Retry">
            <summary>
            Gets or sets a boolean value indicating whether to retry the recently failed operation.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.MultiPartDownloadErrorEventArgs.Error">
            <summary>
            Gets the error details.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.MultiPartDownloadErrorEventArgs.Client">
            <summary>
            Gets the client object.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.MultiPartDownloadErrorEventArgs.PartIndex">
            <summary>
            Gets the part index.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ReconnectingEventArgs">
            <summary>
            Provides information for the <b>Reconnecting</b> events of the Ftp, Sftp, and Scp classes.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ReconnectingEventArgs.Error">
            <summary>
            Gets the exception that the client object has encountered.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ReconnectingEventArgs.Cancel">
            <summary>
            Gets or sets a boolean value indicating whether to cancel the reconnection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ReconnectingEventArgs.Waiting">
            <summary>
            Gets a boolean value indicating whether the client is in the delay loop before reconnecting.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ReconnectingEventArgs.Elapsed">
            <summary>
            Gets the elapsed time, in milliseconds, since it started delaying before reconnecting.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ReconnectingEventArgs.NumberOfRetries">
            <summary>
            Gets the number of retries.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ReconnectedEventArgs">
            <summary>
            Provides information for the <b>Reconnected</b> events of the Ftp, Sftp, and Scp classes.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ReconnectedEventArgs.Error">
            <summary>
            Gets the exception that the client object has encountered.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ReconnectedEventArgs.NumberOfRetries">
            <summary>
            Gets the number of retries.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ReconnectionErrorCheckingEventArgs">
            <summary>
            Provides information for the <b>ReconnectionErrorChecking</b> events of the Ftp, Sftp, and Scp classes.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ReconnectionErrorCheckingEventArgs.Error">
            <summary>
            Gets the exception that the client object has encountered.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ReconnectionErrorCheckingEventArgs.ReconnectionRequired">
            <summary>
            Gets or sets a value indicating whether a reconnection is required. The default value is <b>Auto</b> - The component automatically checks if the client needs to reconnect to the server.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.RemoteFileSystemListProgressEventArgs">
            <summary>
            Provides information for the <b>ListProgress</b> events of the <b>Ftp</b> and <b>Sftp</b> classes.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.RemoteFileSystemListProgressEventArgs.BytesTransferred">
            <summary>
            Gets the number of bytes transferred.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.RemoteFileSystemListProgressEventArgs.Total">
            <summary>
            Gets the number of total bytes or -1 if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.RemoteFileSystemListProgressEventArgs.BytesSinceLastEvent">
            <summary>
            Gets the number of bytes transferred since the last event.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.AndSearchCondition">
            <summary>
            Represents a logical AND operation on a set of <see cref="T:ComponentPro.IO.SearchCondition"/> object.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SearchCondition">
            <summary>
            A base class that all Search Condition classes must derive from to check whether a file matches the specified search conditions.
            </summary>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.NameRegexSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.#ctor(ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.SearchCondition"/> class.
            </summary>
            <param name="fileTypes">The file types to search.</param>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ToString">
            <summary>
            Converts to a string object.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.OnFileTypesUpdateRequired">
            <summary>
            Called when a child search condition's FilesType has been changed and this <see cref="P:ComponentPro.IO.SearchCondition.FileTypes"/> needs to be changed accordingly.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Matches(ComponentPro.IO.FileInfoBase,System.String,ComponentPro.IO.MatchOptions)">
            <summary>
            Returns a boolean value indicating whether the item matches the search condition or, 
            if <paramref name="options"/> has <see cref="F:ComponentPro.IO.MatchOptions.CheckFileType"/>, 
            the <paramref name="file"/>'s type does not match any of the <see cref="P:ComponentPro.IO.SearchCondition.FileTypes">files type</see> specified in this search condition.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to check.</param>
            <param name="basePath">The path that is excluded from the <paramref name="file"/>'s <see cref="P:ComponentPro.IO.FileInfoBase.FullName"/> when checking whether the <paramref name="file"/> matches the search condition.</param>
            <param name="options">Specifies the match options.</param>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Matches(ComponentPro.IO.FileInfoBase)">
            <summary>
            Returns a boolean value indicating whether the specified item matches the search condition.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to check.</param>
            <remarks>
            This method does not check for path masks. To check for path masks, use this <see cref="!:Matches(FileInfoBase, string, bool)"/> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Matches(ComponentPro.IO.FileInfoBase,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Returns a boolean value indicating whether the item matches the search condition and the specified file type.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to check.</param>
            <param name="fileTypes">The file type to search for.</param>
            <remarks>
            This method does not check for path masks. To check for path masks, use this <see cref="!:SearchCondition.Matches(FileInfoBase, string, bool)"/> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.MatchesFileType(ComponentPro.IO.FileInfoBase)">
            <summary>
            Returns a boolean value indicating whether the item's type matches the search condition's file type.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is a null reference (Nothing in VB.NET).</exception>
            <remarks>
            This method does not check for path masks. To check for path masks, use this <see cref="!:SearchCondition.Matches(FileInfoBase, string, bool)"/> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.MatchesAllConditions(ComponentPro.IO.FileInfoBase,ComponentPro.IO.SearchCondition[])">
            <summary>
            Checks whether the specified file item matches all the specified search conditions.
            </summary>
            <param name="file">The file item to check.</param>
            <param name="conditions">The search conditions.</param>
            <returns>true if item matches the conditions or does not apply to the conditions; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="conditions"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.MatchesAllConditions(ComponentPro.IO.FileInfoBase,ComponentPro.IO.SearchCondition[],ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Checks whether the specified file item matches all the specified search conditions.
            </summary>
            <param name="file">The file item to check.</param>
            <param name="conditions">The search conditions.</param>
            <param name="fileTypes">The file type.</param>
            <returns>true if item matches the conditions or does not apply to the conditions; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="conditions"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.MatchesOneCondition(ComponentPro.IO.FileInfoBase,ComponentPro.IO.SearchCondition[])">
            <summary>
            Checks whether the specified file item matches at least one of the specified search conditions.
            </summary>
            <param name="file">The file item to check.</param>
            <param name="conditions">The search conditions. If this parameter is null, the method returns <c>false</c>.</param>
            <returns><c>true</c> if item matches at least one of the conditions or does not apply to the conditions; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="conditions"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.MatchesOneCondition(ComponentPro.IO.FileInfoBase,ComponentPro.IO.SearchCondition[],ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Checks whether the specified file item matches at least one of the specified search conditions.
            </summary>
            <param name="file">The file item to check.</param>
            <param name="conditions">The search conditions.</param>
            <param name="fileTypes">The file type.</param>
            <returns>true if item matches at least one of the conditions or does not apply to the conditions; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="conditions"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_Addition(ComponentPro.IO.SearchCondition,ComponentPro.IO.SearchCondition)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.AndSearchCondition"/> object from the specified search conditions. It's similar to "a AND b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.AndSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_BitwiseAnd(ComponentPro.IO.SearchCondition,ComponentPro.IO.SearchCondition)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.AndSearchCondition"/> object from the specified search conditions. It equals to "a AND b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.AndSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_BitwiseOr(ComponentPro.IO.SearchCondition,ComponentPro.IO.SearchCondition)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.OrSearchCondition"/> object from the specified search conditions. It equals to "a OR b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.OrSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_Subtraction(ComponentPro.IO.SearchCondition,ComponentPro.IO.SearchCondition)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.OrSearchCondition"/> object from the specified search conditions. It equals to "a AND NOT b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.OrSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_LogicalNot(ComponentPro.IO.SearchCondition)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.NotSearchCondition"/> object from the specified search condition. It equals to "NOT a".
            </summary>
            <param name="a">The search condition A.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.NotSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_Implicit(System.String)~ComponentPro.IO.SearchCondition">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.NameSearchCondition"/> from the specified <paramref name="searchPattern">search pattern</paramref>.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>The new <see cref="T:ComponentPro.IO.NameSearchCondition"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Create(ComponentPro.IO.SearchCondition[])">
            <summary> 
            This states that the items must match all the <paramref name="searchConditions">specified search conditions</paramref> regrouped within the <see cref="T:ComponentPro.IO.AndSearchCondition"/> class in order to be processed.
            </summary>
            <param name="searchConditions">A list of search conditions.</param>
            <returns>
            An instance of the <see cref="T:ComponentPro.IO.AndSearchCondition"/> class of the specified <paramref name="searchConditions"/>.
            </returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Create(System.String[])">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.NameSearchCondition"/> object that filters all files that match the specified wildcard masks in name. 
            </summary>
            <param name="masks">A list of filtering paths, relative to a base path, or masks to use to scan file path or names. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "a\*\b\*.exe|*.dll", "a\**\b\*.cs"...). If pattern ends with a directory separator character like '/' or '\', the whole pattern without that character is used as a directory path masks.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.NameSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Create(System.Boolean,System.String[])">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.NameSearchCondition"/> object that filters all files that match the specified wildcard masks in name. 
            </summary>
            <param name="exclude">A value indicating whether to add the specified <paramref name="masks"/> to the exclusion list.</param>
            <param name="masks">A list of filtering paths, relative to a base path, or masks to use to scan file path or names. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "a\*\b\*.exe|*.dll", "a\**\b\*.cs"...). If pattern ends with a directory separator character like '/' or '\', the whole pattern without that character is used as a directory path masks.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.NameSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Create(System.DateTime,System.DateTime)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all files with modified date and time between the specified period.
            </summary>
            <param name="from">The date and time value used to filter files.</param>
            <param name="to">The date and time value used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Create(System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all files with modified date and time between the specified period.
            </summary>
            <param name="from">The date and time value used to filter files.</param>
            <param name="to">The date and time value used to filter files.</param>
            <param name="exclude">A value indicating whether to add this search condition to the exclusion list.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Create(System.Int64,System.Int64)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all files with size in between the specified range.
            </summary>
            <param name="from">The file size used to filter files.</param>
            <param name="to">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Create(System.Boolean,System.Int64,System.Int64)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all files with size in between the specified range.
            </summary>
            <param name="from">The file size used to filter files.</param>
            <param name="to">The file size used to filter files.</param>
            <param name="exclude">A value indicating whether to add this search condition to the exclusion list.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ModifiedBefore(System.DateTime)">
            <summary>
            Returns a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all items with modified date and time before the specified date and time.
            </summary>
            <param name="before">The date and time value used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ModifiedAfter(System.DateTime)">
            <summary>
            Returns a logical AND filter operation of the current search condition with a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all items with modified date and time after the specified date and time.
            </summary>
            <param name="after">The date and time value used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ModifiedBetween(System.DateTime,System.DateTime)">
            <summary>
            Returns a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all items with modified date and time between the specified period.
            </summary>
            <param name="from">The date and time value used to filter files.</param>
            <param name="to">The date and time value used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.SizeEqualTo(System.Int64)">
            <summary>
            Returns a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all items with size equal to the specified size.
            </summary>
            <param name="size">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.SizeGreaterThan(System.Int64)">
            <summary>
            Returns a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all items with size greater than the specified size.
            </summary>
            <param name="size">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.SizeLessThan(System.Int64)">
            <summary>
            Returns a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all items with size less than the specified size.
            </summary>
            <param name="size">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.SizeInRange(System.Int64,System.Int64)">
            <summary>
            Returns a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all items with size between the specified size.
            </summary>
            <param name="from">The file size used to filter files.</param>
            <param name="to">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.And(ComponentPro.IO.SearchCondition[])">
            <summary> 
            This states that the items must match the current search condition and all the <paramref name="searchConditions">specified ones</paramref> in order to be processed.
            </summary>
            <param name="searchConditions">The search conditions used to perform a logical AND filter operation with the current search condition.</param>
            <returns>
            A logical AND filter operation of the current search condition with the specified <paramref name="searchConditions">search conditions</paramref>.
            </returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.AndNot(ComponentPro.IO.SearchCondition)">
            <summary> 
            This states that the items must match the current search condition AND NOT the <paramref name="searchCondition">specified one</paramref> in order to be processed.
            </summary>
            <param name="searchCondition">The search condition used to perform a logical AND and NOT filter operation with the current search condition.</param>
            <returns>
            A logical AND and NOT filter operations of the current search condition with the specified <paramref name="searchCondition">search condition</paramref>.
            </returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Or(ComponentPro.IO.SearchCondition[])">
            <summary> 
            This states that the items must match the current search condition or at least one of the <paramref name="searchConditions">specified search conditions</paramref> regrouped in order to be processed.
            </summary>
            <param name="searchConditions">The search conditions used to perform a logical OR filter operation with the current search condition.</param>
            <returns>
            A logical OR filter operation of the current search condition with the specified <paramref name="searchConditions">search conditions</paramref>.
            </returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Reverse">
            <summary>
            Reverses this search condition. This states that the items must NOT match the current search condition in order to be processed.
            </summary>
            <returns>
            It returns a <see cref="T:ComponentPro.IO.NotSearchCondition"/> of the current search condition.
            </returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.AndModifiedBefore(System.DateTime)">
            <summary>
            Returns a logical AND filter operation of the current search condition with a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all items with modified date and time before the specified date and time.
            </summary>
            <param name="before">The date and time value used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.AndModifiedAfter(System.DateTime)">
            <summary>
            Returns a logical AND filter operation of the current search condition with a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all items with modified date and time after the specified date and time.
            </summary>
            <param name="after">The date and time value used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.AndModifiedBetween(System.DateTime,System.DateTime)">
            <summary>
            Returns a logical AND filter operation of the current search condition with a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all items with modified date and time between the specified period.
            </summary>
            <param name="from">The date and time value used to filter files.</param>
            <param name="to">The date and time value used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.AndSizeEqualTo(System.Int64)">
            <summary>
            Returns a logical AND filter operation of the current search condition with a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all items with size equal to the specified size.
            </summary>
            <param name="size">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.AndSizeGreaterThan(System.Int64)">
            <summary>
            Returns a logical AND filter operation of the current search condition with a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all items with size greater than the specified size.
            </summary>
            <param name="size">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.AndSizeLessThan(System.Int64)">
            <summary>
            Returns a logical AND filter operation of the current search condition with a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all items with size less than the specified size.
            </summary>
            <param name="size">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.AndSizeInRange(System.Int64,System.Int64)">
            <summary>
            Returns a logical AND filter operation of the current search condition with a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all items with size between the specified size.
            </summary>
            <param name="from">The file size used to filter files, or <see cref="F:System.Int64.MinValue"/> to indicate that there is no lower limit.</param>
            <param name="to">The file size used to filter files, or <see cref="F:System.Int64.MaxValue"/> to indicate that there is no upper limit.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.IncludeMasks(System.String)">
            <summary>
            Adds the specified filtering path or mask to use to scan file path or names to the inclusion patterns.
            </summary>
            <param name="pattern">Filtering path, relative to a base path, or mask to use to scan file path or names. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "a\*\b\*.exe|*.dll", "a\**\b\*.cs"...). File name masks are delimited by ',', '|', and ';' characters. If pattern ends with a directory separator character like '/' or '\', the whole pattern without that character is used as a directory path masks.</param>
            <returns>A <see cref="T:ComponentPro.IO.SearchCondition"/>.</returns>
            <remarks>
            <paramref name="pattern"/> can be a combination of literal, directory separators, and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <paramref name="pattern"/>.
            <table>
            <tr><th>Wildcard specifier</th><th>Matches</th></tr>
            <tr><td>? (question mark)</td><td>Zero or one character in that position.<br/>e.g. "?a" matches "1a" and also "ba" but not "1a2".</td></tr>
            <tr><td>* (asterisk)</td><td>Zero or more characters in that position except the directory separators (usually '/' or '\' character).<br/>e.g. "*a" matches "a" and also "ba" but not "123".</td></tr>
            <tr><td>** (double asterisks)</td><td>Zero or one character in that position. Directory separators are accepted.<br/>e.g. "a\**\b" matches "a\1\2\z\b" and also "a\b" but not "ab". "a\**\**\b" pattern is equivalent to "a\**\b".</td></tr>
            </table>
            Some pattern examples:<br/>
            <table>
            <th><td>Pattern</td><td>Description</td></th>
            <tr><td>content\text??.doc</td><td>Matches files (e.g. "text12.doc" or "textab.doc", but not "textabc.doc") within "content" directory.</td></tr>
            <tr><td>content\*.doc</td><td>Matches all files (e.g. "text12.doc" or "textabc123.doc", but not "textabc.docx") within "content" directory.</td></tr>
            <tr><td>content\**\*.doc</td><td>Matches all ".doc" files found in all subdirectories of "content" directory. e.g. "content\a\text.doc", "content\a\text2.doc", or "content\a\c\chapter.doc", but not "content\text.doc" or "content2\text.doc".</td></tr>
            <tr><td>content\**.doc</td><td>Matches all ".doc" files found in "content" directory and all of its subdirectories. e.g. "content\text.doc", "content\a\text.doc", "content\a\text2.doc", or "content\a\c\chapter.doc", but not "content2\text.doc".</td></tr>
            <tr><td>content\data*\day??&gt;</td><td>This pattern ends with a directory separator character like '/' or '\'. Matches all files found in directories with paths that match "content\data*\day??" pattern. e.g. "content\data\day12\text.doc", or "content\data2\day11\text.doc", but not "content\data\text.doc".</td></tr>
            </table>
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.IncludeMasks(System.String,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Adds the specified filtering path or mask to use to scan file path or names to the inclusion patterns.
            </summary>
            <param name="pattern">Filtering path, relative to a base path, or mask to use to scan file path or names. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "a\*\b\*.exe|*.dll", "a\**\b\*.cs"...). File name masks are delimited by ',', '|', and ';' characters. If pattern ends with a directory separator character like '/' or '\', the whole pattern without that character is used as a directory path masks.</param>
            <param name="fileTypes">Determines whether the condition applies to files, folders or both.</param>
            <returns>A <see cref="T:ComponentPro.IO.SearchCondition"/>.</returns>
            <remarks>
            <paramref name="pattern"/> can be a combination of literal, directory separators, and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <paramref name="pattern"/>.
            <table>
            <tr><th>Wildcard specifier</th><th>Matches</th></tr>
            <tr><td>? (question mark)</td><td>Zero or one character in that position.<br/>e.g. "?a" matches "1a" and also "ba" but not "1a2".</td></tr>
            <tr><td>* (asterisk)</td><td>Zero or more characters in that position except the directory separators (usually '/' or '\' character).<br/>e.g. "*a" matches "a" and also "ba" but not "123".</td></tr>
            <tr><td>** (double asterisks)</td><td>Zero or one character in that position.<br/>e.g. "a\**\b" matches "a\1\2\z\b" and also "a\b" but not "ab". "a\**\**\b" pattern is equivalent to "a\**\b".</td></tr>
            </table>
            Some pattern examples:<br/>
            <table>
            <th><td>Pattern</td><td>Description</td></th>
            <tr><td>content\text??.doc</td><td>Matches files (e.g. "text12.doc" or "textab.doc", but not "textabc.doc") within "content" directory.</td></tr>
            <tr><td>content\*.doc</td><td>Matches all files (e.g. "text12.doc" or "textabc123.doc", but not "textabc.docx") within "content" directory.</td></tr>
            <tr><td>content\**\*.doc</td><td>Matches all ".doc" files found in all subdirectories of "content" directory. e.g. "content\a\text.doc", "content\a\text2.doc", or "content\a\c\chapter.doc", but not "content\text.doc" or "content2\text.doc".</td></tr>
            <tr><td>content\**.doc</td><td>Matches all ".doc" files found in "content" directory and all of its subdirectories. e.g. "content\text.doc", "content\a\text.doc", "content\a\text2.doc", "content\a\c\chapter.doc", but not "content2\text.doc".</td></tr>
            <tr><td>content\data*\day??&gt;</td><td>Matches all files found in directories with paths that match "content\data*\day??" pattern. e.g. "content\data\day12\text.doc", or "content\data2\day11\text.doc", but not "content\data\text.doc".</td></tr>
            </table>
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.IncludePathMasks(System.String)">
            <summary>
            Adds the specified filtering path mask to use to scan file path to the inclusion patterns.
            </summary>
            <param name="pattern">Filtering path, relative to a base path, to use to scan file path. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "a\*\b", "a\**\b"...).</param>
            <returns>A <see cref="T:ComponentPro.IO.SearchCondition"/>.</returns>
            <remarks>
            <paramref name="pattern"/> can be a combination of literal, directory separators, and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <paramref name="pattern"/>.
            <table>
            <tr><th>Wildcard specifier</th><th>Matches</th></tr>
            <tr><td>? (question mark)</td><td>Zero or one character in that position.<br/>e.g. "?a" matches "1a" and also "ba" but not "1a2".</td></tr>
            <tr><td>* (asterisk)</td><td>Zero or more characters in that position except the directory separators (usually '/' or '\' character).<br/>e.g. "*a" matches "a" and also "ba" but not "123".</td></tr>
            <tr><td>** (double asterisks)</td><td>Zero or one character in that position.<br/>e.g. "a\**\b" matches "a\1\2\z\b" and also "a\b" but not "ab". "a\**\**\b" pattern is equivalent to "a\**\b".</td></tr>
            </table>
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ExcludeMasks(System.String)">
            <summary>
            Adds the specified filtering path or mask to use to scan file path or names to the exclusion patterns.
            </summary>
            <param name="pattern">Filtering path, relative to a base path, or mask to use to scan file path or names. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "a\*\b\*.exe|*.dll", "a\**\b\*.cs"...). File name masks are delimited by ',', '|', and ';' characters. If pattern ends with a directory separator character like '/' or '\', the whole pattern without that character is used as a directory path masks.</param>
            <returns>A <see cref="T:ComponentPro.IO.SearchCondition"/>.</returns>
            <remarks>
            <paramref name="pattern"/> can be a combination of literal, directory separators, and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <paramref name="pattern"/>.
            <table>
            <tr><th>Wildcard specifier</th><th>Matches</th></tr>
            <tr><td>? (question mark)</td><td>Zero or one character in that position.<br/>e.g. "?a" matches "1a" and also "ba" but not "1a2".</td></tr>
            <tr><td>* (asterisk)</td><td>Zero or more characters in that position except the directory separators (usually '/' or '\' character).<br/>e.g. "*a" matches "a" and also "ba" but not "123".</td></tr>
            <tr><td>** (double asterisks)</td><td>Zero or one character in that position.<br/>e.g. "a\**\b" matches "a\1\2\z\b" and also "a\b" but not "ab". "a\**\**\b" pattern is equivalent to "a\**\b".</td></tr>
            </table>
            Some pattern examples:<br/>
            <table>
            <th><td>Pattern</td><td>Description</td></th>
            <tr><td>content\text??.doc</td><td>Matches files (e.g. "text12.doc" or "textab.doc", but not "textabc.doc") within "content" directory.</td></tr>
            <tr><td>content\*.doc</td><td>Matches all files (e.g. "text12.doc" or "textabc123.doc", but not "textabc.docx") within "content" directory.</td></tr>
            <tr><td>content\**\*.doc</td><td>Matches all ".doc" files found in all subdirectories of "content" directory. e.g. "content\a\text.doc", "content\a\text2.doc", or "content\a\c\chapter.doc", but not "content\text.doc" or "content2\text.doc".</td></tr>
            <tr><td>content\**.doc</td><td>Matches all ".doc" files found in "content" directory and all of its subdirectories. e.g. "content\text.doc", "content\a\text.doc", "content\a\text2.doc", "content\a\c\chapter.doc", but not "content2\text.doc".</td></tr>
            <tr><td>content\data*\day??&gt;</td><td>Matches all files found in directories with paths that match "content\data*\day??" pattern. e.g. "content\data\day12\text.doc", or "content\data2\day11\text.doc", but not "content\data\text.doc".</td></tr>
            </table>
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ExcludeMasks(System.String,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Adds the specified filtering path or mask to use to scan file path or names to the exclusion patterns.
            </summary>
            <param name="pattern">Filtering path, relative to a base path, or mask to use to scan file path or names. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "a\*\b\*.exe|*.dll", "a\**\b\*.cs"...). File name masks are delimited by ',', '|', and ';' characters. If pattern ends with a directory separator character like '/' or '\', the whole pattern without that character is used as a directory path masks.</param>
            <param name="fileTypes">Determines whether the condition applies to files, folders or both.</param>
            <returns>A <see cref="T:ComponentPro.IO.SearchCondition"/>.</returns>
            <remarks>
            <paramref name="pattern"/> can be a combination of literal, directory separators, and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <paramref name="pattern"/>.
            <table>
            <tr><th>Wildcard specifier</th><th>Matches</th></tr>
            <tr><td>? (question mark)</td><td>Zero or one character in that position.<br/>e.g. "?a" matches "1a" and also "ba" but not "1a2".</td></tr>
            <tr><td>* (asterisk)</td><td>Zero or more characters in that position except the directory separators (usually '/' or '\' character).<br/>e.g. "*a" matches "a" and also "ba" but not "123".</td></tr>
            <tr><td>** (double asterisks)</td><td>Zero or one character in that position.<br/>e.g. "a\**\b" matches "a\1\2\z\b" and also "a\b" but not "ab". "a\**\**\b" pattern is equivalent to "a\**\b".</td></tr>
            </table>
            Some pattern examples:<br/>
            <table>
            <th><td>Pattern</td><td>Description</td></th>
            <tr><td>content\text??.doc</td><td>Matches files (e.g. "text12.doc" or "textab.doc", but not "textabc.doc") within "content" directory.</td></tr>
            <tr><td>content\*.doc</td><td>Matches all files (e.g. "text12.doc" or "textabc123.doc", but not "textabc.docx") within "content" directory.</td></tr>
            <tr><td>content\*\*.doc</td><td>Matches all ".doc" files within "content" directory's first level subdirectories. e.g. "content\a\text.doc", "content\a\text2.doc", or "content\a\chapter.doc", but not "content\text.doc" or "content\a\b\text.doc".</td></tr>
            <tr><td>content\**\*.doc</td><td>Matches all ".doc" files found in all subdirectories of "content" directory. e.g. "content\a\text.doc", "content\a\text2.doc", or "content\a\c\chapter.doc", but not "content\text.doc" or "content2\text.doc".</td></tr>
            <tr><td>content\**.doc</td><td>Matches all ".doc" files found in "content" directory and all of its subdirectories. e.g. "content\text.doc", "content\a\text.doc", "content\a\text2.doc", "content\a\c\chapter.doc", but not "content2\text.doc".</td></tr>
            <tr><td>content\data*\day??&gt;</td><td>Matches all files found in directories with paths that match "content\data*\day??" pattern. e.g. "content\data\day12\text.doc", or "content\data2\day11\text.doc", but not "content\data\text.doc".</td></tr>
            </table>
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ExcludePathMasks(System.String)">
            <summary>
            Adds the specified filtering path mask to use to scan file path to the exclusion patterns.
            </summary>
            <param name="pattern">Filtering path, relative to a base path, to use to scan file path. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "a\*\b", "a\**\b"...).</param>
            <returns>A <see cref="T:ComponentPro.IO.SearchCondition"/>.</returns>
            <remarks>
            <paramref name="pattern"/> can be a combination of literal, directory separators, and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <paramref name="pattern"/>.
            <table>
            <tr><th>Wildcard specifier</th><th>Matches</th></tr>
            <tr><td>? (question mark)</td><td>Zero or one character in that position.<br/>e.g. "?a" matches "1a" and also "ba" but not "1a2".</td></tr>
            <tr><td>* (asterisk)</td><td>Zero or more characters in that position except the directory separators (usually '/' or '\' character).<br/>e.g. "*a" matches "a" and also "ba" but not "123".</td></tr>
            <tr><td>** (double asterisks)</td><td>Zero or one character in that position.<br/>e.g. "a\**\b" matches "a\1\2\z\b" and also "a\b" but not "ab". "a\**\**\b" pattern is equivalent to "a\**\b".</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.SearchCondition.Parent">
            <summary>
            Gets the parent search condition in a hierarchy.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SearchCondition.FileTypes">
            <summary>
            Gets or sets the file type to search for.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.AndSearchCondition.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.AndSearchCondition"/> class.
            </summary>
            <param name="conditions">A list of search conditions.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of conditions is less than two.</exception>
        </member>
        <member name="M:ComponentPro.IO.AndSearchCondition.OnFileTypesUpdateRequired">
            <exclude/>
        </member>
        <member name="P:ComponentPro.IO.AndSearchCondition.Conditions">
            <summary>
            Gets a list of search conditions that is used to check <see cref="T:ComponentPro.IO.FileInfoBase"/> items.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.AndSearchCondition.FileTypes">
            <summary>Gets or sets the file type of the search condition.</summary>
        </member>
        <member name="T:ComponentPro.IO.AttributeSearchCondition">
            <summary>
            Search a <see cref="T:ComponentPro.IO.FileInfoBase"/> object based on its attributes.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.AttributeSearchCondition.#ctor(System.IO.FileAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.AttributeSearchCondition"/> class.
            </summary>
            <param name="attributes">Attributes used to search items.</param>
        </member>
        <member name="M:ComponentPro.IO.AttributeSearchCondition.#ctor(System.IO.FileAttributes,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.AttributeSearchCondition"/> class.
            </summary>
            <param name="attributes">Attributes used to search items.</param>
            <param name="fileType">Determines whether the condition applies to files, folders or both.</param>
        </member>
        <member name="P:ComponentPro.IO.AttributeSearchCondition.Attributes">
            <summary>
            Gets the file attributes.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.DiskFileInfo">
            <summary>
            Represents a file or folder on the local disk.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.#ctor(System.IO.FileSystemInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.DiskFileInfo"/> from the specified <see cref="T:System.IO.FileSystemInfo"/> object.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.Reset">
            <summary>
            Resets the properties.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.DiskFileInfo"/> from the specified path.
            </summary>
            <param name="path">The path of the local file or directory. This file must physically exist.</param>
            <exception cref="T:System.IO.IOException">If the specified file does not exist.</exception>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.UpdateFullName(System.String)">
            <summary>
            Updates the fully qualified name of the file or directory. Intended for advanced usage only.
            </summary>
            <param name="newFullName">The new full name.</param>
            <remarks>After this update, all properties of the class remain unchanged except the <see cref="P:ComponentPro.IO.DiskFileInfo.FullName"/> and <see cref="P:ComponentPro.IO.DiskFileInfo.Name"/> properties. To update all properties of this file object, call the <see cref="M:ComponentPro.IO.FileInfoBase.Refresh"/> method.</remarks>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.ToString">
            <summary>
            Returns the name of the item.
            </summary>
            <returns>The name of the item.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.ApplyPropertiesFromSync(ComponentPro.IO.FileInfoBase,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Copies the properties from the specified source file to this file.
            </summary>
            <param name="source">The source file object.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.OpenRead(System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified sharing mode.
            </summary>
            <param name="share">Constants for controlling the kind of access other <see cref="T:System.IO.Stream"/> objects can have to the same file.</param>
            <returns>A stream object that can be used to read data from the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified sharing mode.
            </summary>
            <param name="overwrite">A boolean value indicating whether to overwrite the existing file; otherwise, new content will be appended to the end of the file.</param>
            <param name="share">Constants for controlling the kind of access other <see cref="T:System.IO.Stream"/> objects can have to the same file.</param>
            <returns>A stream object that can be used to write data to the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.RefreshSync(System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Refreshes the current file object.
            </summary>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the operation is successful otherwise false.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.IsSameAs(ComponentPro.IO.FileInfoBase)">
            <summary>
            Gets a boolean value indicating if the source and target items represent the same physical entity.
            </summary>
            <param name="info">The target to compare.</param>
            <returns><c>true</c> if the source and target objects represent the same physical entity; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.Name">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.FullName">
            <summary>
            Gets the fully qualified name of the file or directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.OriginalPath">
            <summary>
            Gets the original path of the item. For internal use only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.SymlinkPath">
            <summary>
            Gets the path this item points to if it is symlink, null otherwise.
            </summary>
            <value>The path this item points to if it is symlink, null otherwise.</value>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.LastAccessTime">
            <summary>
            Gets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.LastAccessTimeUtc">
            <summary>
            Gets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.LastWriteTime">
            <summary>
            Gets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.LastWriteTimeUtc">
            <summary>
            Gets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.CreationTime">
            <summary>
            Gets the creation time of the current <see cref="T:ComponentPro.IO.DiskFileInfo"/> object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.CreationTimeUtc">
            <summary>
            Gets the creation time of the current <see cref="T:ComponentPro.IO.DiskFileInfo"/> object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.Length">
            <summary>
            Gets the size of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.IsFile">
            <summary>
            Gets a boolean value indicating whether this is a regular file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.IsDirectory">
            <summary>
            Gets a boolean value indicating whether this is a directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.IsSymlink">
            <summary>
            Gets a boolean value indicating whether this is a symlink.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.Attributes">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:ComponentPro.IO.DiskFileInfo"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.FileSystem">
            <summary>
            Gets the file system that the file belong to.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.DiskFileSystem">
            <summary>
            Provides useful methods for file and directory operations such as creating, transferring, renaming, deleting, etc.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetFullPathSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns a full path of the specified path.
            </summary>
            <param name="path">The input path.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The full path.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.NormalizePath(System.String,System.Char[],System.Boolean,ComponentPro.OptionValue,ComponentPro.OptionValue)">
            <summary>
            Normalizes a path. This method normalizes path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if directory separator characters are '/' and '\' respectively.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="separators">The path separator characters (e.g. '/' and '\' characters). The first separator in the list will be used to construct the final path. Remote file systems (e.g. Ftp, Sftp, Scp, etc.) usually use '/' character as the first separator.</param>
            <param name="normalizeSpecialDirs">A boolean value indicating whether to normalize special directories like '.' and '..' found in the path. It treats '.' dir as the current directory and '..' as the upper directory.</param>
            <param name="persistEndSeparator">An option value indicating whether a separator at the end of the path is to be removed if present. Yes - to always include the ending separator, No - to remove if present, Auto - to keep the last character as it is.</param>
            <param name="persistLeadingSeparator">An option value indicating whether a separator at the beginning of the path is to be removed if present. Yes - to always include the leading separator, No - to remove if present, Auto - to keep the first character as it is.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.DeleteFileSync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The path to the file to delete.</param>
            <param name="item">The <see cref="T:ComponentPro.IO.ProgressFileItem"/> object.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.FileExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if the path is a null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of the path.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.RenameSync(System.String,System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
            <param name="item">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.SetLastWriteTimeSync(System.String,System.DateTime,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Sets the date and time at which the specified file was last written.
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetLastWriteTimeSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetFileLengthSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the size of the specified file, in bytes.
            </summary>
            <param name="filePath">The path to the file to get size.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The length of the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CreateFileInfo(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.DiskFileInfo"/> and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="originalPath">The original path of the file.</param>
            <param name="isFile">Indicates whether the item is a file.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.DiskFileInfo"/> instance.</returns>
            <remarks>
            This method does not try to find and load information about the specified file or directory on the file system.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CreateFileInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information. When the specified item exists the <see cref="T:ComponentPro.IO.FileInfoBase"/> instance will contain the information of the existing item.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="infoParts">Indicates what information of the file will be filled.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>        
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CreateItemCollection">
            <excludeall/>
            <summary>
            Creates a collection of the <see cref="T:ComponentPro.IO.FileInfoBase"/>.
            </summary>
            <returns>The collection of the <see cref="T:ComponentPro.IO.FileInfoBase"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.DeleteDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Deletes the specified empty directory.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="item">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.TransferDataFromStreamToFileSync(ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            This allow you to copy data from a stream or a <paramref name="currentProgressFileItem"/> to a file on this system.
            </summary>
            <param name="currentProgressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="source">The source stream.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.TransferDataFromFileToStreamSync(System.Boolean,ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Transfers data contents of a file on the system to a data stream.
            </summary>
            <param name="forComparison">true to indicate that this transfer is for a file comparison; otherwise, false.</param>
            <param name="currentProgressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="destinationStream">The destination file stream.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The number of bytes transferred.</returns>        
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetStreamForWriting(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns a Stream for writing data to the specified file.
            </summary>
            <param name="file">The file to write to.</param>
            <param name="offset">The position at which data will be written to.</param>
            <param name="asyncOp">The asynchronous operation object.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetStreamForReading(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the stream object for reading the specified file.
            </summary>
            <param name="file">The file to read.</param>
            <param name="offset"></param>
            <param name="asyncOp"></param>
            <returns>The stream for reading the file.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetItemInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns a <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory.
            </summary>
            <param name="path">The name of the file or directory to get information.</param>
            <param name="parts">Specifies what information of the file to retrive.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>An <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory, 
            or a null reference (Nothing in VB.NET) if the specified file or directory not found.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CreateSymlinkSync(System.String,System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Creates a symlink.
            </summary>
            <param name="path">The path of the symlink.</param>
            <param name="target">The path to the target directory or file to which the specified <paramref name="path"/> is linked.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The path to the newly created directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ResolveSymlinkSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Resolves a symlink path.
            </summary>
            <param name="path">The path to the symlink to resolve.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The path to the newly created directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.EnsuresDirectoryCreatedSync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Ensures the specified directory exists on the file system. If the specified directory does not exist, a new one will be created.
            </summary>
            <param name="directoryPath">The directory path to check.</param>
            <param name="item">The current progress item.</param>
            <param name="asyncOp">The <see cref="T:System.ComponentModel.AsyncOperation"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CreateDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Creates the specified directory.
            </summary>
            <param name="path">The path to the directory to create.</param>
            <param name="item">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The path to the newly created directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListDirectorySync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.IO.ListDirFlags,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition. This method returns the list of files and subdirectories in the first level of the specified directory only. To scan subdirectories deeply, use the <see cref="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)"/> method.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <param name="basePath">The base path for the <paramref name="searchCondition"/>.</param>
            <param name="searchCondition">The search condition.</param>
            <param name="flags">The listing flags.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The list of files or directories found.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.DirectoryExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <param name="path">The path to test.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the specified directory exists; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetCurrentDirectorySync(System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the current directory.
            </summary>
            <param name="asyncOp">The async operation.</param>
            <returns>The current directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.SetCurrentDirectorySync(System.String,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Sets the current directory.
            </summary>
            <param name="path">The path to the new directory.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.IsRootPath(System.String)">
            <excludeall/>
            <summary>
            Indicates whether the given path is the root path or not.
            </summary>
            <param name="path">The path to check.</param>
            <returns>true of the given path is the root path; otherwise false.</returns>
            <remarks>
            The user's homepage path might be set to the root path but 
            the root path is not the user's homepage.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if path contains an absolute path; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CombinePath(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A System.String containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns System.String.Empty if path does not contain directory information.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>A System.String consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.Clone">
            <excludeall/>
            <summary>
            Creates a copy of the current file system.
            </summary>
            <returns>The cloned file system.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ValidatePath(System.String,System.String)">
            <excludeall/>
            <summary>
            Validates the specified path. <paramref name="path">Path</paramref> must not be a null reference or empty. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ValidatePathCanBeEmpty(System.String,System.String)">
            <excludeall/>
            <summary>
            Validates the specified path. <paramref name="path">Path</paramref> must not be a null reference. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ProcessException(System.Exception)">
            <excludeall/>
            <summary>
            Handles an exception.
            </summary>
            <param name="x">The exception.</param>
            <returns>The processed exception.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object.</returns>
        </member>
        <member name="F:ComponentPro.IO.DiskFileSystem.Default">
            <summary>
            Default <see cref="T:ComponentPro.IO.DiskFileSystem"/>. This should not be used in multi-threaded operation; create a new instance of the <see cref="T:ComponentPro.IO.DiskFileSystem"/> class for each thread instead.
            </summary>
            <remarks>
            This singleton instance should not be used in multi-threaded operation since a call to the <see cref="M:ComponentPro.IO.FileSystem.Cancel"/> method may abort all the concurrent data transfer or multi-file operations.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetSupportedChecksumTypes">
            <summary>
            Returns checksum types supported by the file system.
            </summary>
            <returns>Checksum types supported by the file system.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.SetAttributes(ComponentPro.IO.FileInfoBase,System.IO.FileAttributes)">
            <summary>
            Sets the specified System.IO.FileAttributes of the file on the specified path.
            </summary>
            <param name="info">The file information to set attributes.</param>
            <param name="attributes">File attributes.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified System.IO.FileAttributes of the file on the specified path.
            </summary>
            <param name="file">The file path name.</param>
            <param name="attributes">File attributes.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CalculateLocalChecksum(ComponentPro.IO.FileChecksumType,System.String)">
            <summary>
            Calculates the checksum for the specified local file.
            </summary>
            <param name="type">Desired checksum type.</param>
            <param name="localPath">Path of the local file.</param>
            <returns>Checksum of the specified local file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localPath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CalculateLocalChecksum(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64)">
            <summary>
            Calculates the checksum for the specified local file.
            </summary>
            <param name="type">Desired checksum type.</param>
            <param name="localPath">Path of the local file.</param>
            <param name="offset">The offset in the local file where reading will start.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Checksum of the specified local file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is invalid.</exception>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CalculateLocalChecksum(ComponentPro.IO.FileChecksumType,System.IO.Stream)">
            <summary>
            Calculates the checksum of the data in specified stream.
            </summary>
            <param name="type">Desired checksum type.</param>
            <param name="input">The source data stream.</param>
            <returns>Checksum of the data in the specified stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CalculateLocalChecksum(ComponentPro.IO.FileChecksumType,System.IO.Stream,System.Int64)">
            <summary>
            Calculates the checksum of the data in specified stream.
            </summary>
            <param name="type">Desired checksum type.</param>
            <param name="input">The source data stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Checksum of the data in the specified stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is invalid.</exception>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetFileChecksumSync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.ComponentModel.AsyncOperation)">
            <excludeall/>
            <summary>
            Returns the calculated checksum of the specified type.
            </summary>
            <param name="type">The checksum type.</param>
            <param name="path">The path to the file to calculate checksum.</param>
            <param name="offset">The file offset.</param>
            <param name="length">The number of bytes to calculate.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The calculated checksum.</returns>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.CanGetStreamForWriting">
            <excludeall/>
            <summary>
            Returns a value indicating whether the system supports getting stream for writting data to file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.CanGetStreamForReading">
            <excludeall/>
            <summary>
            Returns a value indicating whether the system supports getting stream for reading data from file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.FileSystemFeatures">
            <summary>
            Gets the supported features.
            </summary>
            <exclude/>
        </member>
        <member name="T:ComponentPro.IO.FileComparers">
            <summary>
            Contains common file comparers.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileSizeComparer">
            <summary>
            Compare two files by file sizes.
            This only compares size of two file regardless of their names. To use this comparer to compare name and size, combine it with
            <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/> or <see cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>.
            e.g. <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer">FileComparers.FileNameComparer</see> + <see cref="P:ComponentPro.IO.FileComparers.FileSizeComparer">FileComparers.FileSizeComparer</see>.
            </summary>
            <remarks>
            Comparison result returned by this one only returns <see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> or <see cref="F:ComponentPro.IO.FileComparisonResult.NotEqual"/>.
            To check the target file with resumability, use <see cref="P:ComponentPro.IO.FileComparers.FileSizeComparerWithResumabilityCheck"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileSizeComparerWithResumabilityCheck">
            <summary>
            Compare two files by file sizes with resumability check. If the target file size is less than the source file size, the result is <see cref="F:ComponentPro.IO.FileComparisonResult.Resumable"/>
            This only compares size of two file regardless of their names. To use this comparer to compare name and size, combine it with
            <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/> or <see cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>.
            e.g. <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer">FileComparers.FileNameComparer</see> + <see cref="P:ComponentPro.IO.FileComparers.FileSizeComparerWithResumabilityCheck">FileComparers.FileSizeComparerWithResumabilityCheck</see>.
            </summary>
            <remarks>
            Comparison result returned by this one also includes <see cref="F:ComponentPro.IO.FileComparisonResult.Resumable"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileContentComparer">
            <summary>
            Compare two files by file contents.
            This only compares content of two file regardless of their names. To use this comparer to compare name and content, combine it with
            <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/> or <see cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>.
            e.g. <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer">FileComparers.FileNameComparer</see> + <see cref="P:ComponentPro.IO.FileComparers.FileContentComparer">FileComparers.FileContentComparer</see>.
            </summary>
            <remarks>
            Comparison result returned by this one only returns <see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> or <see cref="F:ComponentPro.IO.FileComparisonResult.NotEqual"/>.
            To check the target file with resumability, use <see cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck">
            <summary>
            Compare two files by file contents. It also allows user to check whether source file or destination file needs to resume transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileAttributesComparer">
            <summary>
            Compare two files by file attributes.
            This only compares attributes of two file regardless of their names. To use this comparer to compare name and size, combine it with
            <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/> or <see cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>.
            e.g. <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer">FileComparers.FileNameComparer</see> + <see cref="P:ComponentPro.IO.FileComparers.FileAttributesComparer">FileComparers.FileAttributesComparer</see>.
            </summary>
            <remarks>
            Comparison result returned by this one only returns <see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> or <see cref="F:ComponentPro.IO.FileComparisonResult.NotEqual"/>.
            To check the target file with resumability, use <see cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileCrcChecksumComparer">
            <summary>
            Compare two files by CRC checksum.
            This only compares checksums of two file regardless of their names. To use this comparer to compare name and size, combine it with
            <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/> or <see cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>.
            e.g. <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer">FileComparers.FileNameComparer</see> + <see cref="P:ComponentPro.IO.FileComparers.FileCrcChecksumComparer">FileComparers.FileCrcChecksumComparer</see>.
            <remarks>
            Comparison result returned by this one only returns <see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> or <see cref="F:ComponentPro.IO.FileComparisonResult.NotEqual"/>.
            To check the target file with resumability, use <see cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/>.
            </remarks>
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileSha1ChecksumComparer">
            <summary>
            Compare two files by SHA1 checksum.
            This only compares checksums of two file regardless of their names. To use this comparer to compare name and size, combine it with
            <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/> or <see cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>.
            e.g. <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer">FileComparers.FileNameComparer</see> + <see cref="P:ComponentPro.IO.FileComparers.FileSha1ChecksumComparer">FileComparers.FileSha1ChecksumComparer</see>.
            <remarks>
            Comparison result returned by this one only returns <see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> or <see cref="F:ComponentPro.IO.FileComparisonResult.NotEqual"/>.
            To check the target file with resumability, use <see cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/>.
            </remarks>
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileMd5ChecksumComparer">
            <summary>
            Compare two files by MD5 checksum.
            This only compares checksums of two file regardless of their names. To use this comparer to compare name and size, combine it with
            <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/> or <see cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>.
            e.g. <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer">FileComparers.FileNameComparer</see> + <see cref="P:ComponentPro.IO.FileComparers.FileMd5ChecksumComparer">FileComparers.FileMd5ChecksumComparer</see>.
            <remarks>
            Comparison result returned by this one only returns <see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> or <see cref="F:ComponentPro.IO.FileComparisonResult.NotEqual"/>.
            To check the target file with resumability, use <see cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/>.
            </remarks>
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileNameComparer">
            <summary>
            Compare two files by file names. Case-insensitive comparison.
            </summary>
            <remarks>
            Comparison result returned by this one only returns <see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> or <see cref="F:ComponentPro.IO.FileComparisonResult.NotEqual"/>.
            To check the target file with resumability, combine this one with <see cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive">
            <summary>
            Compare two files by file names. Case-sensitive comparison.
            </summary>
            <remarks>
            Comparison result returned by this one only returns <see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> or <see cref="F:ComponentPro.IO.FileComparisonResult.NotEqual"/>.
            To check the target file with resumability, combine this one with <see cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileLastWriteTimeComparer">
            <summary>
            Compare two files by file last write times (NOTE: for remote file systems like FTP, SFTP, and SCP, <see cref="P:ComponentPro.IO.FileComparers.FileLastWriteTimeComparerMinuteGranularity"/> should be used instead).
            This only compares last write time of two file regardless of their names. To use this comparer to compare name and last write time, combine it with
            <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/> or <see cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>.
            e.g. <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer">FileComparers.FileNameComparer</see> + <see cref="P:ComponentPro.IO.FileComparers.FileLastWriteTimeComparer">FileComparers.FileLastWriteTimeComparer</see>.
            </summary>
            <remarks>
            Comparison result returned by this one only returns <see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> or <see cref="F:ComponentPro.IO.FileComparisonResult.NotEqual"/>.
            To check the target file with resumability, use <see cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileComparers.FileLastWriteTimeComparerMinuteGranularity">
            <summary>
            Compare two files by file last write times (NOTE: for remote file systems like FTP, SFTP, and SCP, <see cref="P:ComponentPro.IO.FileComparers.FileLastWriteTimeComparerMinuteGranularity"/> should be used instead).
            This only compares last write time of two file regardless of their names. To use this comparer to compare name and last write time, combine it with
            <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/> or <see cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>.
            e.g. <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer">FileComparers.FileNameComparer</see> + <see cref="P:ComponentPro.IO.FileComparers.FileLastWriteTimeComparer">FileComparers.FileLastWriteTimeComparer</see>.
            </summary>
            <remarks>
            Comparison result returned by this one only returns <see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> or <see cref="F:ComponentPro.IO.FileComparisonResult.NotEqual"/>.
            To check the target file with resumability, use <see cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/>.
            </remarks>
        </member>
        <member name="T:ComponentPro.IO.FileSizeComparer">
            <summary>
            Represents file size comparer.
            </summary>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileSizeComparer"/>
        </member>
        <member name="M:ComponentPro.IO.FileSizeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSizeComparer"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSizeComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSizeComparer"/> class that can check whether interruped file is able to be resumed.
            </summary>
            <param name="checkForResumability"><c>true</c> to check the resumability of a source file and destination file. It checks whether the source file size is greater than the destination file size.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSizeComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])">
            <summary>
            Compares the target files to the master file and returns values indicating whether the target files are equal to the master.
            </summary>
            <param name="masterFile">The master file.</param>
            <param name="targetFiles">The target files to compare with the master one.</param>
            <returns><see cref="T:ComponentPro.IO.FileComparisonResult"/>.Equal if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.FileAttributesComparer">
            <summary>
            Represents file attributes comparer.
            </summary>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileAttributesComparer"/>
        </member>
        <member name="M:ComponentPro.IO.FileAttributesComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])">
            <summary>
            Compares the target files to the master file and returns values indicating whether the target files are equal to the master.
            </summary>
            <param name="masterFile">The master file.</param>
            <param name="targetFiles">The target files to compare with the master one.</param>
            <returns><see cref="F:ComponentPro.IO.FileComparisonResult.Equal"/> if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.FileNameComparer">
            <summary>
            Represents file name comparer.
            </summary>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>
        </member>
        <member name="M:ComponentPro.IO.FileNameComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileNameComparer"/> class. Case-insensitive comparison.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileNameComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileNameComparer"/> class.
            </summary>
            <param name="ignoreCase">A System.Boolean indicating a case-sensitive or insensitive comparison. (true indicates a case-insensitive comparison.)</param>
        </member>
        <member name="M:ComponentPro.IO.FileNameComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])">
            <summary>
            Compares the target files to the master file and returns values indicating whether the target files are equal to the master.
            </summary>
            <param name="masterFile">The master file.</param>
            <param name="targetFiles">The target files to compare with the master one.</param>
            <returns><see cref="T:ComponentPro.IO.FileComparisonResult"/>.Equal if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.FileChecksumComparer">
            <summary>
            Represents file checksum comparer.
            </summary>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileCrcChecksumComparer"/>
        </member>
        <member name="M:ComponentPro.IO.FileChecksumComparer.#ctor(ComponentPro.IO.FileChecksumType)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileChecksumComparer"/> with the specified checksum type.
            </summary>
            <param name="type">The preferred checksum type.</param>
        </member>
        <member name="M:ComponentPro.IO.FileChecksumComparer.OnCompareFiles(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[],ComponentPro.IO.FileComparisonResult[]@,System.Boolean[])">
            <summary>
            Compares files and set results in the specified result list.
            </summary>
            <param name="masterFile">The master file.</param>
            <param name="targetFiles">The target files.</param>
            <param name="results">The result list.</param>
            <param name="overrideResults">A list of boolean values indicating the corresponding result in <paramref name="results"/> is overridden.</param>
        </member>
        <member name="T:ComponentPro.IO.FileLastWriteTimeComparer">
            <summary>
            Represents file last write time comparer.
            </summary>
            <remarks>
            If files to compare reside on <see cref="T:ComponentPro.IO.IRemoteFileSystem"/>, their last write time will be added with <see cref="P:ComponentPro.IO.FileSystem.ServerTimeZoneOffset"/> when comparing.
            </remarks>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileLastWriteTimeComparer"/>
        </member>
        <member name="M:ComponentPro.IO.FileLastWriteTimeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileLastWriteTimeComparer"/> class with default <see cref="T:ComponentPro.IO.TimeResolution"/>, which is None - Both time values must be exactly the same.
            This ctor is usually not useful for remote file systems since they have different time zone and time precision.
            It's recommended to use this ctor overload <see cref="M:ComponentPro.IO.FileLastWriteTimeComparer.#ctor(ComponentPro.IO.TimeResolution)"/> for remote file system.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileLastWriteTimeComparer.#ctor(ComponentPro.IO.TimeResolution)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileLastWriteTimeComparer"/> class with time comparison granularity.
            </summary>
            <param name="granularity">The granularity for time comparisons.</param>
        </member>
        <member name="M:ComponentPro.IO.FileLastWriteTimeComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])">
            <summary>
            Compares the target files to the master file and returns values indicating whether the target files are equal to the master.
            </summary>
            <param name="masterFile">The first file.</param>
            <param name="targetFiles">The target files.</param>
            <returns><see cref="T:ComponentPro.IO.FileComparisonResult"/>.Equal if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.FileSystemExceptionStatus">
            <summary>
            Specifies status of the error for the <see cref="T:ComponentPro.IO.FileSystemException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.UnknownError">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.OperationCanceled">
            <summary>
            The operation was canceled.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.BothSourceAndDestinationDoNotSupportDataTransfer">
            <summary>
            Both source and destination file systems do not have file transfer functionality.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.InvalidOperation">
            <summary>
            The operation is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.NotSupported">
            <summary>
            The operation not supported.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.FileAlreadyExists">
            <summary>
            Existing file detected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.DirectoryAlreadyExists">
            <summary>
            Existing directory detected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.CannotResolveSymlink">
            <summary>
            Cannot resolve a symlink.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.CannotCreateDirectory">
            <summary>
            Cannot create directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.CannotDeleteFile">
            <summary>
            Cannot delete file.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.CannotDeleteDirectory">
            <summary>
            Cannot delete an empty directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.CannotSetFilePermissions">
            <summary>
            Cannot set file permissions.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.CannotSetFileAttributes">
            <summary>
            Cannot set file attributes.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.CannotMoveItem">
            <summary>
            Cannot rename/move an item.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.LinkDetected">
            <summary>
            A symlink has been detected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.RecursiveLinkDetected">
            <summary>
            A recursive symlink has been detected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.TransferFailed">
            <summary>
            Transfer failed.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.FileOrDirectoryNotFound">
            <summary>
            File or directory not found.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.OpenFailed">
            <summary>
            Failed to open file for reading or writing.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.FileIsReadOnly">
            <summary>
            The file is read-only and cannot be openned for writing.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemExceptionStatus.DirectoryStructureRetrievalFailed">
            <summary>
            Failed to retrieve a directory structure.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.ListDirFlags">
            <excludeall/>
            <summary>
            Defines the flags used for the dir listing operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.ListDirFlags.AlwaysIncludeDirs">
            <summary>
            Indicates whether to include a directory item if it's a directory and the path of one of its parents matches the search condition.
            This is useful when we want to list granchild items using a search condition.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.ListDirFlags.ForMultiFileOperation">
            <summary>
            The directory listing is for a multi-file operation.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileSystemFeatures">
            <summary>
            Specifies features of a file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.DiskFileSystemCompatible">
            <summary>
            Disk file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.DirectFileCopyFromDiskFileSystem">
            <summary>
            Supports transaction. For Compression File System only.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.ReconnectAfterCancel">
            <summary>
            This file system needs to be reconnected after a user has canceled an operation. For Remote File System only.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.ListDirectory">
            <summary>
            This file system supports listing directories.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.CopyFileFromAnotherFileSystem">
            <summary>
            This file system supports copying files from another file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.CopyFileToAnotherFileSystem">
            <summary>
            This file system supports copying files to another file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.ResolveSymlink">
            <summary>
            This file system supports resolving symlinks.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.ResumeCopyFrom">
            <summary>
            This file system supports resuming copying data from another system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.ResumeCopyTo">
            <summary>
            This file system supports resuming copying data to another system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.RequirePathNormalization">
            <summary>
            Indicates that this file system requires path normalization before a file or directory operation. Some FTP and SFTP servers need this option.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.MultipleOperationOnSingleInstance">
            <summary>
            Allows performing multiple operation on a single instance simultaneously. <see cref="T:ComponentPro.IO.DiskFileSystem"/>, <see cref="T:ComponentPro.IO.MemoryFileSystem"/>, and SFTP file system support this feature.
            A file system having this feature allows you to delete and create directories, delete, copy, and store files simultaneously. 
            It's very useful when uploading/downloading multiple files on parallel.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.InMemory">
            <summary>
            This file system stores data in memory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.SameSystemFileCopy">
            <summary>
            Allows copying files on the same file system.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileSystemProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.FileSystem.Progress">Progress</see> event.
            </summary>        
        </member>
        <member name="M:ComponentPro.IO.FileSystemProgressEventArgs.#ctor(System.ComponentModel.AsyncOperation,ComponentPro.IO.TransferState,System.Int64,System.Int64,ComponentPro.IO.ProgressFileItem)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="context">The current async operation.</param>
            <param name="state">The transfer state.</param>
            <param name="bytesTransferred">The number of bytes transferred.</param>
            <param name="bytesSinceLastEvent">Bytes since last event</param>
            <param name="currentProgressFile">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemProgressEventArgs.RaiseEvent(ComponentPro.IO.FileSystemProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.ComparisonResult">
            <summary>
            Gets or sets the file comparison result in the file comparison process.
            </summary>
            <remarks>
            <p>This value is only available when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="F:ComponentPro.IO.TransferState.StartComparingFile"/> or <see cref="F:ComponentPro.IO.TransferState.FileCompared"/>.
            By setting this property the system will not invoke the default file comparer, specified in <see cref="P:ComponentPro.IO.TransferOptions.Comparer"/> of the <see cref="T:ComponentPro.IO.TransferOptions"/> class 
            or <see cref="P:ComponentPro.IO.QuickSyncOptions.Comparer"/> of the <see cref="T:ComponentPro.IO.QuickSyncOptions"/> class.</p>
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.RemainingTime">
            <summary>
            Gets the remaining time to transfer the rest of data of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalRemainingTime">
            <summary>
            Gets the remaining time to transfer the rest files. 
            This property is only available when the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> setting is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.BytesPerSecond">
            <summary>
            Gets the transfer speed - the number of bytes per second.
            </summary>
            <remarks>
            To make this value accurate, we only update this property every 400 milliseconds (0.4 sec) by default. 
            This interval can be changed by setting the property <see cref="P:ComponentPro.IO.FileSystem.BytesPerSecondUpdateInterval"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.Percentage">
            <summary>
            Gets the current file transfer progress percentage.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.LastBytesTransferred">
            <summary>
            Gets the number of bytes transferred during the current transfer since the last time the event was raised.
            </summary>
            <value>The number of bytes transferred since the last time the event was raised.</value>
            <remarks>This value is only available when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="T:ComponentPro.IO.TransferState">Uploading/Storing</see>, 
            <see cref="T:ComponentPro.IO.TransferState">Downloading/Copying/Extracting</see>, 
            or <see cref="T:ComponentPro.IO.TransferState">Comparing</see>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.BytesTransferred">
            <summary>
            Gets the total number of bytes transferred during the current transfer.
            </summary>
            <value>The number of bytes transferred.</value>
            <remarks>This value is only available when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="T:ComponentPro.IO.TransferState">FileUploaded/FileStored</see>, 
            <see cref="T:ComponentPro.IO.TransferState">FileDownloaded/FileExtracted</see>, 
            <see cref="T:ComponentPro.IO.TransferState">Uploading/Storing</see>, 
            <see cref="T:ComponentPro.IO.TransferState">Downloading/Copying/Extracting</see>, 
            or <see cref="T:ComponentPro.IO.TransferState">Comparing</see>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.State">
            <summary>
            Gets the transfer state.
            </summary>
            <value>The transfer state.</value>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourceFileSystem">
            <summary>
            Gets the source <see cref="T:ComponentPro.IO.FileSystem"/> that contains the source file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationFileSystem">
            <summary>
            Gets the destination <see cref="T:ComponentPro.IO.FileSystem"/> that receives the file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">
            <summary>
            Gets or sets the path of the destination file path.
            </summary>
            <remarks>
            The destination path can only be set when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="F:ComponentPro.IO.TransferState.StartUploadingFile"/>/<see cref="F:ComponentPro.IO.TransferState.StartStoringFile"/>, 
            or <see cref="F:ComponentPro.IO.TransferState.StartDownloadingFile"/>/<see cref="F:ComponentPro.IO.TransferState.StartCopyingFile"/>/<see cref="F:ComponentPro.IO.TransferState.StartExtractingFile"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationFileInfo">
            <summary>
            Gets the destination file info, or a null reference (Nothing in VB.NET) if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">
            <summary>
            Gets or sets the path of the source file, or a null reference (Nothing in VB.NET) if not available.
            </summary>
            <remarks>
            The source path can only be set when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="F:ComponentPro.IO.TransferState.StartUploadingFile"/>/<see cref="F:ComponentPro.IO.TransferState.StartStoringFile"/>, 
            or <see cref="F:ComponentPro.IO.TransferState.StartDownloadingFile"/>/<see cref="F:ComponentPro.IO.TransferState.StartCopyingFile"/>/<see cref="F:ComponentPro.IO.TransferState.StartExtractingFile"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourceFileInfo">
            <summary>
            Gets the source file info, or a null reference (Nothing in VB.NET) if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePathChanged">
            <summary>
            Gets a boolean value indicating whether the source path has been changed.
            </summary>
            <remarks>
            This property is automatically changed to <c>true</c> when you set the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath"/> property.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPathChanged">
            <summary>
            Gets a boolean value indicating whether the destination path has been changed.
            </summary>
            <remarks>
            This property is automatically changed to <c>true</c> when you set the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath"/> property.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.LocalFileInfo">
            <summary>
            Gets the local file info.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.RemoteFileInfo">
            <summary>
            Gets the remote file info.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.LocalPath">
            <summary>
            Gets or sets the local path.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.RemotePath">
            <summary>
            Gets or sets the remote path.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourceOffset">
            <summary>
            Gets the source file initial offset.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationOffset">
            <summary>
            Gets the destination file or data stream initial offset.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">
            <summary>
            Gets or sets a boolean value indicating whether to skip the currently executing operation. 
            Only available when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="F:ComponentPro.IO.TransferState.BuildingDirectoryStructure"/>, <see cref="F:ComponentPro.IO.TransferState.DirectoryStructureBuilt"/>, 
            <see cref="F:ComponentPro.IO.TransferState.StartUploadingFile"/>/<see cref="F:ComponentPro.IO.TransferState.StartStoringFile"/>, 
            <see cref="F:ComponentPro.IO.TransferState.StartDownloadingFile"/>/<see cref="F:ComponentPro.IO.TransferState.StartCopyingFile"/>/<see cref="F:ComponentPro.IO.TransferState.StartExtractingFile"/>, 
            <see cref="F:ComponentPro.IO.TransferState.StartComparingFile"/>, 
            <see cref="F:ComponentPro.IO.TransferState.DeletingFile"/>, or 
            <see cref="F:ComponentPro.IO.TransferState.DeletingDirectory"/>. To cancel a file transfer operation, call the <see cref="O:ComponentPro.IO.FileSystem.Cancel"/> method.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.Length">
            <summary>
            Gets the size of the source data in bytes or less than zero if not available in the current context.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TransferStatistics">
            <summary>
            Gets the <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> that represents the statistics of the multi-file operation.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.CurrentProgressFileItem">
            <summary>
            Gets the <see cref="T:ComponentPro.IO.ProgressFileItem"/> of the currently processing file or a null reference if the current progress file item is not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalSize">
            <summary>
            Gets the number of total bytes to transfer. 
            This property is only available when the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> property of the <see cref="T:ComponentPro.IO.TransferOptions"/> object has been set to true.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalBytesTransferred">
            <summary>
            Gets the number of bytes transferred since the beginning of the current multi-file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalFiles">
            <summary>
            Gets the number of files to transfer. 
            This property is only available when the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> property of <see cref="T:ComponentPro.IO.TransferOptions"/> object has been set to true.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.FilesTransferred">
            <summary>
            Gets the number of files transferred since the beginning of the current multi-file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.FilesSkipped">
            <summary>
            Gets the number of files skipped since the beginning of the current multi-file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalDirectories">
            <summary>
            Gets the number of directories to process. 
            This property is only available when the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> property of <see cref="T:ComponentPro.IO.TransferOptions"/> object has been set to true.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DirectoriesTransferred">
            <summary>
            Gets the number of directories processed since the beginning of the current multi-file operation.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DirectoriesSkipped">
            <summary>
            Gets the number of directories skipped since the beginning of the current multi-file operation.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalBytesSkipped">
            <summary>
            Gets the number of bytes skipped since the beginning of the current multi-file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalPercentage">
            <summary>
            Gets the total file transfer progress percentage. 
            This property is only available when the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> property of the <see cref="T:ComponentPro.IO.TransferOptions"/> object has been set to true.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileTransferType">
            <summary>
            Defines common modes for transferring files, usually ascii and binary.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileTransferType.Binary">
            <summary>Binary mode transfers files as raw data. Examples of binary files would be .wav, .jpg, .gif, and mp3 files...</summary>
        </member>
        <member name="F:ComponentPro.IO.FileTransferType.Ascii">
            <summary>Ascii mode transfers files as 'text'. Examples of ascii files would be .txt, .asp, .html, and .php files...</summary>
        </member>
        <member name="T:ComponentPro.IO.NameRegexSearchCondition">
            <summary>
            Search for files that match the specified filemasks in name.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.NameRegexSearchCondition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameRegexSearchCondition"/> with the specified regex pattern. 
            This will search for both file and symlink.
            </summary>
            <param name="pattern">The regular expression pattern to match against filename, or a null reference to match all items.</param>
            <param name="directoryPathMask">The path mask used to scan file paths (e.g. "a/*/b", "a/**/b/c?", or "" - use '*' to match any character in that position except directory separators, '**' to match any character in that position including directory separators). An empty path mask string "" represents the top-level directory. 
            e.g. The following example illustrates how to search for all .sln files in D:\Test\Samples\&lt;any&gt;\CS: <b>DiskFileSystem.Default.Search(@"D:\Test", true, SearchConditionFileTypes.File, new NameSearchCondition(new string[] { "*.sln" }, new string[] {@"Samples\*\CS"}, true, SearchConditionFileTypes.File), null)</b>
            </param>
        </member>
        <member name="M:ComponentPro.IO.NameRegexSearchCondition.#ctor(System.String,System.Text.RegularExpressions.Regex,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameRegexSearchCondition"/> with the specified regex.
            </summary>
            <param name="regex">The regular expression to match against filename, or a null reference to match all items.</param>
            <param name="fileTypes">The file types to search.</param>
            <param name="directoryPathMask">The path mask used to scan file paths (e.g. "a/*/b", "a/**/b/c?", or "" - use '*' to match any character in that position except directory separators, '**' to match any character in that position including directory separators). An empty path mask string "" represents the top-level directory. 
            e.g. The following example illustrates how to search for all .sln files in D:\Test\Samples\&lt;any&gt;\CS: <b>DiskFileSystem.Default.Search(@"D:\Test", true, SearchConditionFileTypes.File, new NameSearchCondition(new string[] { "*.sln" }, new string[] {@"Samples\*\CS"}, true, SearchConditionFileTypes.File), null)</b>
            </param>
        </member>
        <member name="M:ComponentPro.IO.NameRegexSearchCondition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameRegexSearchCondition"/> with the specified regex pattern. 
            This will search for both file and symlink.
            </summary>
            <param name="pattern">The regular expression pattern to match against filename, or a null reference to match all items.</param>
        </member>
        <member name="M:ComponentPro.IO.NameRegexSearchCondition.#ctor(System.Text.RegularExpressions.Regex,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameRegexSearchCondition"/> with the specified regex.
            </summary>
            <param name="regex">The regular expression to match against filename, or a null reference to match all items.</param>
            <param name="fileTypes">The file types to search.</param>
        </member>
        <member name="M:ComponentPro.IO.NameRegexSearchCondition.ToString">
            <summary>
            Converts the object to string.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.NameRegexSearchCondition.Matches(System.String)">
            <summary>
            Returns a boolean value indicating whether the item matches the regex pattern.
            </summary>
            <param name="fileName">The file name to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is a null reference (Nothing in VB.NET).</exception>
            <remarks>
            This method does not check for path masks. To check for path masks, use this <see cref="!:SearchCondition.Matches(FileInfoBase, string, bool)"/> method.
            </remarks>
        </member>
        <member name="T:ComponentPro.IO.NameSearchCondition">
            <summary>
            Filters a <see cref="T:ComponentPro.IO.FileInfoBase"/> object based on its name.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameSearchCondition"/> with the specified filemasks. This will search for both file and symlink.
            </summary>
            <param name="pattern">Filtering path, relative to a base path, or mask to use to scan file path or names. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "a\*\b\*.exe|*.dll", "a\**\b\*.cs"...). File name masks are delimited by ',', '|', and ';' characters. If pattern ends with a directory separator character like '/' or '\', the whole pattern without that character is used as a directory path masks.
            If patterns is a null reference (Nothing in VB.NET) or empty, <see cref="O:Matches"/> always returns <c>true</c>.
            </param>
            <remarks>
            To include search pattern for Directory type, use the <see cref="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String,ComponentPro.IO.SearchConditionFileTypes)"/> constructor.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.ToString">
            <summary>
            Converts the object to string.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameSearchCondition"/> with the specified filemasks. This will search for both file and symlink.
            To include Directory search type, use <see cref="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String,ComponentPro.IO.SearchConditionFileTypes)"/> or <see cref="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String[],System.String[],System.Boolean,ComponentPro.IO.SearchConditionFileTypes)"/>.
            </summary>
            <param name="pattern">Filtering path, relative to a base path, or mask to use to scan file path or names. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "a\*\b\*.exe|*.dll", "a\**\b\*.cs"...). File name masks are delimited by ',', '|', and ';' characters. If the <paramref name="pattern"/> parameter starts with ':', the search will be case sensitive. If pattern ends with a directory separator character like '/' or '\', the whole pattern without that character is used as a directory path masks.
            If patterns is a null reference (Nothing in VB.NET) or empty, <see cref="O:Matches"/> always returns <c>true</c>.
            </param>
            <param name="ignoreCase">A boolean value indicating to ignore case when comparing file names and/or paths.</param>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameSearchCondition"/> with the specified pattern.
            </summary>
            <param name="pattern">Filtering path, relative to a base path, or mask to use to scan file path or names. This parameter can contain a combination of valid literal path, directory separators, and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. 
            (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "a\*\b\*.exe|*.dll", "a\**\b\*.cs"...). File name masks are delimited by ',', '|', and ';' characters. If the fileMasks parameter starts with ':', the search will be case sensitive. If pattern ends with a directory separator character like '/' or '\', the whole pattern without that character is used as a directory path masks.
            If patterns is a null reference (Nothing in VB.NET) or empty, <see cref="O:Matches"/> always returns <c>true</c>.
            </param>
            <param name="fileTypes">Determines whether the condition applies to files, folders or both.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is empty or contains one or more directory separator characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String,System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameSearchCondition"/> with the specified filemasks and directory path masks.
            </summary>
            <param name="fileMask">The mask used to scan file names (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "*.exe|*.dll" ...).</param>
            <param name="directoryPathMask">The path mask used to scan file paths (e.g. "a/*/b", "a/**/b/c?", or "" - use '*' to match any character in that position except directory separators, '**' to match any character in that position including directory separators). An empty path mask string "" represents the top-level directory. 
            e.g. The following example illustrates how to search for all .sln files in D:\Test\Samples\&lt;any&gt;\CS: <b>DiskFileSystem.Default.Search(@"D:\Test", true, SearchConditionFileTypes.File, new NameSearchCondition(new string[] { "*.sln" }, new string[] {@"Samples\*\CS"}, true, SearchConditionFileTypes.File), null)</b>
            </param>
            <param name="fileTypes">Determines whether the condition applies to files, folders or both.</param>
            <param name="ignoreCase">A boolean value indicating to ignore case when comparing file names and paths.</param>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String[],System.String[],System.Boolean,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameSearchCondition"/> with the specified filemasks and directory path masks.
            </summary>
            <param name="fileMasks">A list of masks to use to scan file names (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "*.exe|*.dll" ...).</param>
            <param name="directoryPathMasks">A list of path masks to use to scan file paths (e.g. "a/*/b", "a/**/b/c?", or "" - use '*' to match any character in that position except directory separators, '**' to match any character in that position including directory separators). An empty path mask string "" represents the top-level directory. 
            e.g. The following example illustrates how to search for all .sln files in D:\Test\Samples\&lt;any&gt;\CS: <b>DiskFileSystem.Default.Search(@"D:\Test", true, SearchConditionFileTypes.File, new NameSearchCondition(new string[] { "*.sln" }, new string[] {@"Samples\*\CS"}, true, SearchConditionFileTypes.File), null)</b>
            </param>
            <param name="fileTypes">Determines whether the condition applies to files, folders or both.</param>
            <param name="ignoreCase">A boolean value indicating to ignore case when comparing file names and paths.</param>
            <exception cref="T:System.ArgumentException"><paramref name="fileMasks"/> is empty or contains one or more directory separator characters.</exception>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.Matches(ComponentPro.IO.FileInfoBase,System.String,ComponentPro.IO.MatchOptions)">
            <summary>
            Returns a boolean value indicating whether the item matches the search condition.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.FileInfoBase"/> to check.</param>
            <param name="basePath">The path that is excluded from the <paramref name="file"/>'s <see cref="P:ComponentPro.IO.FileInfoBase.FullName"/> when checking whether the <paramref name="file"/> matches the search condition.</param>
            <param name="options">Specifies the match options.</param>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.Matches(System.String)">
            <summary>
            Returns a boolean value indicating whether the item matches at least of the filemasks.
            </summary>
            <param name="fileName">The file name to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is a null reference (Nothing in VB.NET).</exception>
            <remarks>
            This method does not check for path masks. To check for path masks, use this <see cref="!:SearchCondition.Matches(FileInfoBase, string, bool)"/> method.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.NameSearchCondition.IgnoreCase">
            <summary>
            Gets or sets a boolean value indicating whether the file or folder name matching is not case-sensitive.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.NameSearchCondition.FileMasks">
            <summary>
            Gets an array of filemasks.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.NameSearchCondition.DirectoryPathMasks">
            <summary>
            Gets an array of path masks.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.NotSearchCondition">
            <summary>
            Represents a logical NOT operation on a <see cref="T:ComponentPro.IO.SearchCondition"/> object.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.NotSearchCondition.#ctor(ComponentPro.IO.SearchCondition)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NotSearchCondition"/> class.
            </summary>
            <param name="condition">A search condition.</param>
        </member>
        <member name="P:ComponentPro.IO.NotSearchCondition.Condition">
            <summary>
            Gets the search conditions that will be used to check <see cref="T:ComponentPro.IO.FileInfoBase"/> item.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.NotSearchCondition.FileTypes">
            <summary>
            Gets or sets the file type of the search condition.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.OrSearchCondition">
            <summary>
            Represents a logical OR operation on a set of <see cref="T:ComponentPro.IO.SearchCondition"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.OrSearchCondition.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.OrSearchCondition"/> class.
            </summary>
            <param name="conditions">Search conditions that will be used for the logical OR operation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of conditions is less than two.</exception>
        </member>
        <member name="M:ComponentPro.IO.OrSearchCondition.OnFileTypesUpdateRequired">
            <exclude/>
        </member>
        <member name="P:ComponentPro.IO.OrSearchCondition.Conditions">
            <summary>
            Gets the conditions for the operation.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.OrSearchCondition.FileTypes">
            <summary>
            Gets or sets the file type of the search condition.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.QuickSyncOptions">
            <summary>
            Provides advanced options for the <see cref="O:ComponentPro.IO.FileSystem.QuickSynchronize"/> and <see cref="O:ComponentPro.IO.FileSystem.QuickSynchronizeAsync"/> methods.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.QuickSyncOptions.Clone">
            <summary>
            Creates a shallow copy of this option object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="P:ComponentPro.IO.QuickSyncOptions.Comparer">
            <summary>
            Gets or sets the file comparison method. The default value is <see cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/>. 
            The component invokes the comparer specified by this property when existing files with the same name found on both source and destination file systems. 
            When the result returned by the comparer is not <see cref="T:ComponentPro.IO.FileComparisonResult">Equal</see>, file on the source or destination file system will be updated depending on the synchronization direction.
            If it's <see cref="T:ComponentPro.IO.FileComparisonResult">Resumable</see>, the library will resume transfer by appending the missing data to the end of the target file.
            </summary>
            <remarks>
            You can use '|' and '+' (OR and AND) operators to make your own comparer.
            e.g. <c>FileComparers.FileNameComparer + FileComparers.FileContentComparerWithResumabilityCheck</c> to compare file name and file content with resumability check.
            </remarks>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileAttributesComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileContentComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileLastWriteTimeComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileSizeComparer"/>
            <seealso cref="P:ComponentPro.IO.FileSystemProgressEventArgs.ComparisonResult"/>
        </member>
        <member name="P:ComponentPro.IO.QuickSyncOptions.AllowDeletion">
            <summary>
            Gets or sets a value indicating whether to allow file and directory deletion. Default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.QuickSyncOptions.AllowCreation">
            <summary>
            Gets or sets a value indicating whether to allow file and directory creation. Default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.QuickSyncOptions.AllowResuming">
            <summary>
            Gets or sets a value indicating whether to allow file transfer resumption. Default value is <c>false</c>.
            </summary>
            <remarks>
            When this property is <c>true</c> and the comparison result of the source and dest files is <see cref="T:ComponentPro.IO.FileComparisonResult">Resumable</see>, the target file will be resumed.
            If the result is <see cref="T:ComponentPro.IO.FileComparisonResult">NotEqual</see> the target file will be re-created and copied from the source one.
            If the result is <see cref="T:ComponentPro.IO.FileComparisonResult">Equal</see> the target file is ignored.
            Only <see cref="P:ComponentPro.IO.FileComparers.FileSizeComparerWithResumabilityCheck"/> and <see cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/> comparers have the capability to check for resumability.
            If they dont fit your requirements, you can write your own class inheriting <see cref="T:ComponentPro.IO.FileComparer"/> and override the <see cref="M:ComponentPro.IO.FileComparer.Compare(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase[])"/> method to do your own check.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.QuickSyncOptions.Recursive">
            <summary>
            Indicates whether the library will search for files in the first level directory and all its subdirectories.
            Default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.QuickSyncOptions.SearchCondition">
            <summary>
            Gets or sets the search conditions to match against the files. The default value is null reference; equivalent to <b>'*.*'</b> file mask.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.RemoteFileSystemState">
            <summary>
            Specifies the state of an <see cref="T:ComponentPro.IO.IRemoteFileSystem">remote file system</see> object.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Disconnected">
            <summary>
            Not connected to the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Connecting">
            <summary>
            Connecting to the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Connected">
            <summary>
            Connected to the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Ready">
            <summary>
            Server is ready to process commands.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Sending">
            <summary>
            Sending command to the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Reading">
            <summary>
            Reading response from the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Processing">
            <summary>
            Processing response from the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Disposed">
            <summary>
            Remote File System object is disposed.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Unknown">
            <summary>
            The state of the Remote File System is not set or not available in the current context.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileSystemPath">
            <summary>
            Performs operations on System.String instances that contain file or directory path information.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemPath.DefaultDirectorySeparators">
            <summary>
            Represents the default directory separators - usually for remote file systems, Linux OS, and MAC OSX.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemPath.WindowsDirectorySeparators">
            <summary>
            Represents the Windows-like OS directory separators.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.IsSubPath(System.String,System.String,System.Char[],System.Boolean)">
            <summary>
            Indicates whether <paramref name="pathToCheck"/> is a subpath of the <paramref name="masterPath"/>.
            </summary>
            <param name="masterPath">The master path.</param>
            <param name="pathToCheck">The path to check.</param>
            <param name="directorySeparators">The directory separator characters.</param>
            <param name="ignoreCase">Indicates whether to ignore the case of the strings being compared.</param>
            <returns><c>true</c> if  <paramref name="pathToCheck"/> is a subpath of the <paramref name="masterPath"/>; otherwise, <c>false</c></returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ValidatePath(System.String,System.String,System.Char[])">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null or empty).
            </summary>
            <param name="path">The local path.</param>
            <param name="invalidLocalPathChars">The invalid path characters.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ValidatePathCanBeEmpty(System.String,System.String,System.Char[])">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null).
            </summary>
            <param name="path">The local path.</param>
            <param name="invalidLocalPathChars">The invalid path characters.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ValidateLocalPath(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null or empty).
            </summary>
            <param name="path">The local path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ValidateLocalPathCanBeEmpty(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null).
            </summary>
            <param name="path">The local path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ValidateRemotePath(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null or empty).
            </summary>
            <param name="path">The remote path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ValidateRemotePathCanBeEmpty(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null).
            </summary>
            <param name="path">The remote path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.MaskToRegex(System.String,System.Boolean)">
            <summary>
            Converts mask to regex.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="caseSensitive">Specifies case-insensitive matching.</param>
            <returns>A <see cref="T:System.Text.RegularExpressions.Regex"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.IsPathRooted(System.String,System.Char[])">
            <summary>
            Gets a value indicating whether the specified remote path string contains absolute
            or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <param name="separators">The platform-specific characters used to separate directory levels 
            in a path string that reflects a hierarchical file system organization.</param>
            <returns><c>true</c> if path contains an absolute path; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.RemoveTrailingSlash(System.String,System.Char[])">
            <summary>
            Removes trailing directory separator characters of the specified path.
            </summary>
            <param name="path">The path to check.</param>
            <param name="separators">The list of directory separator characters.</param>
            <returns>The filterred path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.RemoveTrailingSlashLocalPath(System.String)">
            <summary>
            Removes trailing directory separator characters of a local path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>The filterred path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.NormalizePath(System.String,System.Char[])">
            <summary>
            Normalizes a path. This method normalizes path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if directory separator characters are '/' and '\' respectively.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="separators">The path separator characters (e.g. '/' and '\' characters). The first separator in the list will be used to construct the final path. Remote file systems (e.g. Ftp, Sftp, Scp, etc.) usually use '/' character as the first separator.</param>
            <returns>Normalized path.</returns>
            <remarks>
            Separator at the beginning or end of the path will not be removed. Special dirs will not be normalized.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.NormalizePath(System.String,System.Char[],System.Boolean,ComponentPro.OptionValue,ComponentPro.OptionValue)">
            <summary>
            Normalizes a path. This method normalizes path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if directory separator characters are '/' and '\' respectively.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="separators">The path separator characters (e.g. '/' and '\' characters). The first separator in the list will be used to construct the final path. Remote file systems (e.g. Ftp, Sftp, Scp, etc.) usually use '/' character as the first separator.</param>
            <param name="normalizeSpecialDirs">A boolean value indicating whether to normalize special directories like '.' and '..' found in the path. It treats '.' dir as the current directory and '..' as the upper directory.</param>
            <param name="persistEndSeparator">An option value indicating whether a separator at the end of the path is to be removed if present. Yes - to always include the ending separator, No - to remove if present, Auto - to keep the last character as it is.</param>
            <param name="persistLeadingSeparator">An option value indicating whether a separator at the beginning of the path is to be removed if present. Yes - to always include the leading separator, No - to remove if present, Auto - to keep the first character as it is.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.HasSpecialDirs(System.String,System.Char[])">
            <summary>
            Indicates whether the specified <paramref name="path"/> has one or more special dirs ('.' or '..')
            </summary>
            <param name="path">The path to check.</param>
            <param name="separators">The path separator characters (e.g. '/' and '\' characters). The first separator in the list will be used to construct the final path. Remote file systems (e.g. Ftp, Sftp, Scp, etc.) usually use '/' character as the first separator.</param>
            <returns><c>true</c> if the path contains one or more '.' or '..' dirs; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.GetAbsolutePath(System.String,System.String,System.Char[])">
            <summary>
            Returns absolute path of the specified path.
            </summary>
            <param name="path">The path to get absolute path.</param>
            <param name="currentPath">The current working path.</param>
            <param name="separators">The directory separator characters.</param>
            <returns>The absolute path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.GetAbsolutePath(System.String,System.String,System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Returns absolute path of the specified path.
            </summary>
            <param name="path">The path to get absolute path.</param>
            <param name="normalizeSpecialDirs">To normalize special dirs ('.' and '..').</param>
            <param name="currentPath">The current working path.</param>
            <param name="separators">The directory separator characters.</param>
            <param name="persistEndSeparator">Indicates whether to persit end separator if present in the <paramref name="path"/>.</param>
            <returns>The absolute path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.Combine(System.String,System.String)">
            <summary>
            Combines two remote path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.Combine(System.String,System.String,System.Char[])">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <param name="separators">The platform-specific characters used to separate directory levels 
            in a path string that reflects a hierarchical file system organization.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.CombineSeparator(System.String,System.Char[])">
            <summary>
            Returns a combined string from the specified path and a separator. 
            </summary>
            <param name="path">The path to combine.</param>
            <param name="separators">The platform-specific characters used to separate directory levels 
            in a path string that reflects a hierarchical file system organization.</param>
            <returns>The combined path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.EncloseWithQuotes(System.String)">
            <summary>
            Encloses the provided remote path with quotes.
            </summary>
            <param name="path">The path to check.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">The path string from which to get the extension.</param>
            <returns>A System.String containing the extension of the specified path (including the "."), null, or System.String.Empty. If path is null, GetExtension returns null. If path does not have extension information, GetExtension returns Empty.</returns>
            <exception cref="T:System.ArgumentNullException">The specified path is null.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.GetDirectoryName(System.String,System.Char[])">
            <summary>Returns the directory information for the specified path string.</summary>
            <returns>A <see cref="T:System.String"></see> containing directory information for path. Returns <see cref="F:System.String.Empty"></see> if path does not contain directory information.</returns>
            <param name="path">The path of a file or directory. </param>
            <param name="separators">The platform-specific characters used to separate directory levels 
            in a path string that reflects a hierarchical file system organization.</param>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces, or contains a wildcard character. </exception>
            <exception cref="T:System.IO.PathTooLongException">The path parameter is longer than the system-defined maximum length.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.GetRemoteDirectoryName(System.String)">
            <summary>Returns the directory information for the specified path string.</summary>
            <returns>A <see cref="T:System.String"></see> containing directory information for path. Returns <see cref="F:System.String.Empty"></see> if path does not contain directory information.</returns>
            <param name="path">The path of a file or directory. </param>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces, or contains a wildcard character. </exception>
            <exception cref="T:System.IO.PathTooLongException">The path parameter is longer than the system-defined maximum length.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.GetFileName(System.String,System.Char[])">
            <summary>Returns the file name and extension of the specified path string.</summary>
            <returns>A <see cref="T:System.String"/> consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <param name="separators">The platform-specific characters used to separate directory levels 
            in a path string that reflects a hierarchical file system organization.</param>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces, or contains a wildcard character. </exception>
            <exception cref="T:System.IO.PathTooLongException">The path parameter is longer than the system-defined maximum length.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.GetRemoteFileName(System.String)">
            <summary>Returns the remote file name and extension of the specified path string.</summary>
            <returns>A <see cref="T:System.String"/> consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces, or contains a wildcard character. </exception>
            <exception cref="T:System.IO.PathTooLongException">The path parameter is longer than the system-defined maximum length.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.SplitPath(System.String,System.Char[],System.String@,System.String@)">
            <summary>
            Splits a path into directory name and file name.
            </summary>
            <param name="path">The input path.</param>
            <param name="separators">The platform-specific characters used to separate directory levels 
            in a path string that reflects a hierarchical file system organization.</param>
            <param name="directoryName">The output directory name.</param>
            <param name="fileName">The output file name.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ExtractMasks(System.String@,System.Char[],ComponentPro.IO.SearchCondition@,System.Boolean)">
            <summary>
            Extracts wildcard mask from the specified path and combine it with the search condition.
            </summary>
            <param name="path">The path containing wildcard mask.</param>
            <param name="separators">The platform-specific characters used to separate directory levels 
            in a path string that reflects a hierarchical file system organization.</param>
            <param name="searchCondition">The destination search condition.</param>
            <param name="combine"><c>true</c> to use AND operator; <c>false</c> to use OR operator for the combination.</param>
        </member>
        <member name="T:ComponentPro.IO.RemoteServerOs">
            <summary>
            Specifies the server OS type.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteServerOs.Unknown">
            <summary>
            Unknow server type.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteServerOs.Windows">
            <summary>
            Windows server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteServerOs.Unix">
            <summary>
            UNIX server.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SearchConditionResult">
            <summary>
            Defines search condition matching result. It indicates if a file item was accepted or rejected by a search condition.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionResult.Yes">
            <summary>
            The file was accepted.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionResult.No">
            <summary>
            The file was rejected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionResult.OutOfScope">
            <summary>
            The file was out of scope.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.MatchOptions.MatchBasePath">
            <summary>
            Indicates whether to return <c>true</c> if the specified file's type does not match the search's file type.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.MatchOptions.CheckFileType">
            <summary>
            Indicate whether to return <c>true</c> if this search condition matches a parent directory path of the specified item if the item is a directory.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SearchConditionFileTypes">
            <summary>
            Specifies search file types.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.Any">
            <summary>
            Any file types.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.Directory">
            <summary>
            Directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.FileOrDirectory">
            <summary>
            Equals to File Or Directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.Symlink">
            <summary>
            Symlink.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.FileOrSymlink">
            <summary>
            Equals to File Or Symlink.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SizeSearchCondition">
            <summary>
            Search a <see cref="T:ComponentPro.IO.FileInfoBase"/> object based on its file size.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.SizeSearchCondition.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.AttributeSearchCondition"/> class.
            </summary>
            <param name="maxSize">The maximum file size, or <see cref="F:System.Int64.MaxValue"/> to indicate that there is no upper limit.</param>
            <param name="minSize">The minimum file size, or <see cref="F:System.Int64.MinValue"/> to indicate that there is no lower limit.</param>
        </member>
        <member name="P:ComponentPro.IO.SizeSearchCondition.MaxSize">
            <summary>
            Gets the maximum size value of the search condition.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SizeSearchCondition.MinSize">
            <summary>
            Gets the minimum size value of the search condition.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SearchFileList">
            <summary>
            Represents a collection of items and file masks (inclusive and exclusive search patterns) to process in multi-file operations (upload, download, copy, <see cref="!:FileSystem.Move"/>, and <see cref="!:FileSystem.Delete"/>).
            </summary>
        </member>
        <member name="M:ComponentPro.IO.SearchFileList.op_Addition(ComponentPro.IO.SearchFileList,ComponentPro.IO.SearchFileList)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.SearchFileList"/> object from the specified SearchFileList. It's similar to "a + b".
            </summary>
            <param name="a">The SearchFileList A.</param>
            <param name="b">The SearchFileList B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SearchFileList"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchFileList.op_Explicit(ComponentPro.IO.SearchFileList)~ComponentPro.IO.FileInfoCollection">
            <summary>
            Converts the specified <see cref="T:ComponentPro.IO.SearchFileList"/> to <see cref="T:ComponentPro.IO.FileInfoCollection"/>.
            </summary>
            <param name="list">The search file list.</param>
            <returns>The new <see cref="T:ComponentPro.IO.FileInfoCollection"/> list.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchFileList.Include(ComponentPro.IO.FileInfoBase)">
            <summary>
            Includes the specified item to the processing list.
            </summary>
            <param name="item">The item.</param>
            <param name="itemTypes">The traversal type used to scan for the items to add the list.</param>
        </member>
        <member name="M:ComponentPro.IO.SearchFileList.Exclude(ComponentPro.IO.FileInfoBase)">
            <summary>
            Excludes the specified item from the processing list.
            </summary>
            <param name="item">The item.</param>
            <param name="itemTypes">The traversal type used to scan for the items to add the list.</param>
        </member>
        <member name="M:ComponentPro.IO.SearchFileList.Include(ComponentPro.IO.SearchCondition)">
            <summary>
            Includes a search condition.
            </summary>
            <param name="searchCondition">The search condition to include.</param>
        </member>
        <member name="M:ComponentPro.IO.SearchFileList.Exclude(ComponentPro.IO.SearchCondition)">
            <summary>
            Excludes a search condition.
            </summary>
            <param name="searchCondition">The search condition to exclude.</param>
        </member>
        <member name="M:ComponentPro.IO.SearchFileList.ToNameList(System.Boolean)">
            <summary>
            Returns the list of the full paths or names of the items in this object.
            </summary>
            <param name="includeDirectoryPath">Indicates whether to return the full paths or names of the items.</param>
            <returns></returns>
        </member>
        <member name="P:ComponentPro.IO.SearchFileList.BasePath">
            <summary>
            Gets or sets the base path of the file list.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SearchFileList.CaseSensitive">
            <summary>
            Indicates whether the search is case sensitive. Default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SearchFileList.FileSystem">
            <summary>
            Gets or sets the file system of the file list.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.IRemoteFileSystem.StateChanged"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs.State">
            <summary>
            Gets the new state.
            </summary>
            <value>The new and current state.</value>
        </member>
        <member name="P:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs.OldState">
            <summary>
            Gets the old state.
            </summary>
            <value>The state that was changed.</value>
        </member>
        <member name="T:ComponentPro.IO.SearchConditionFileTimeTypes">
            <summary>
            Specifies the search file time types.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTimeTypes.All">
            <summary>
            All file time types.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTimeTypes.Creation">
            <summary>
            Check creation time.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTimeTypes.LastAccess">
            <summary>
            Check last access time.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTimeTypes.LastWrite">
            <summary>
            Check last write time.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TimeSearchCondition">
            <summary>
            Search a <see cref="T:ComponentPro.IO.FileInfoBase"/> object based on its file time.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TimeSearchCondition.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TimeSearchCondition"/> that use file last write time to check.
            </summary>
            <param name="from">The minimum date and time of the search condition.</param>
            <param name="to">The maximum date and time of the search condition.</param>
        </member>
        <member name="M:ComponentPro.IO.TimeSearchCondition.#ctor(System.DateTime,System.DateTime,ComponentPro.IO.SearchConditionFileTimeTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TimeSearchCondition"/> with the specified file time type.
            </summary>
            <param name="from">The minimum date and time of the search condition.</param>
            <param name="to">The maximum date and time of the search condition.</param>
            <param name="applicableDateTimes">The file time type to check.</param>
        </member>
        <member name="M:ComponentPro.IO.TimeSearchCondition.#ctor(System.DateTime,System.DateTime,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TimeSearchCondition"/> that use file last write time to check.
            </summary>
            <param name="from">The minimum date and time of the search condition.</param>
            <param name="to">The maximum date and time of the search condition.</param>
            <param name="fileTypes">The file types to check.</param>
        </member>
        <member name="M:ComponentPro.IO.TimeSearchCondition.#ctor(System.DateTime,System.DateTime,ComponentPro.IO.SearchConditionFileTimeTypes,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TimeSearchCondition"/> with the specified file time type.
            </summary>
            <param name="from">The minimum date and time of the search condition.</param>
            <param name="to">The maximum date and time of the search condition.</param>
            <param name="applicableDateTimes">The file time type to check.</param>
            <param name="fileTypes">The search file types.</param>
        </member>
        <member name="M:ComponentPro.IO.TimeSearchCondition.#ctor(System.DateTime,System.DateTime,ComponentPro.IO.SearchConditionFileTimeTypes,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.TimeResolution)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TimeSearchCondition"/> with the specified file time type.
            </summary>
            <param name="from">The minimum date and time of the search condition.</param>
            <param name="to">The maximum date and time of the search condition.</param>
            <param name="applicableDateTimes">The file time type to check.</param>
            <param name="timeResolution">The granularity for time comparisons.</param>
            <param name="fileTypes">The search file types.</param>
        </member>
        <member name="P:ComponentPro.IO.TimeSearchCondition.SearchConditionFileTimeTypes">
            <summary>
            Gets the file time type.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TimeSearchCondition.To">
            <summary>
            Gets the maximum date and time of the search condition.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TimeSearchCondition.TimeResolution">
            <summary>
            Gets or sets the granularity for time comparisons.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TimeSearchCondition.From">
            <summary>
            Gets the minimum date and time of the search condition.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferConfirmEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferConfirmEventArgs.CanPerform(ComponentPro.IO.TransferConfirmNextActions)">
            <summary>
            Determines whether the specified <paramref name="action">action</paramref> is currently possible.
            </summary>
            <remarks>
            Use this to determine whether the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NextAction"/> property can be set to the desired <paramref name="action">action</paramref>.
            </remarks>
            <param name="action">The desired <paramref name="action">action</paramref> to test.</param>
            <returns>True if the specified <paramref name="action">action</paramref> is possible; otherwise, is false.</returns>
        </member>
        <member name="M:ComponentPro.IO.TransferConfirmEventArgs.Cancel">
            <summary>
            Cancels the whole multi-file transfer and raise an exception. No other files will be transferred.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferConfirmEventArgs.FollowSymlink">
            <summary>
            Instructs the multi-file transfer to resolve and process the symbolic link.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferConfirmEventArgs.Overwrite(ComponentPro.IO.TransferFileOverwriteCondition)">
            <summary> 
            Instructs the multi-file transfer to overwrite the existing file if the <paramref name="condition">specified condition</paramref> is met.
            </summary>
            <param name="condition">The condition to check in order to overwrite the existing file.</param>
        </member>
        <member name="M:ComponentPro.IO.TransferConfirmEventArgs.Rename(System.String)">
            <summary>
            Instructs the multi-file transfer to rename the existing file.
            </summary>
            <param name="newFileName">The new name of the destination file, or a null reference to automatically generate a new name based on the <see cref="P:ComponentPro.IO.TransferOptions.RenamingPattern"/> in the <see cref="T:ComponentPro.IO.TransferOptions"/> instance.
            If that property is null, "{name}[{num}]{ext}" pattern is used.
            </param>
        </member>
        <member name="M:ComponentPro.IO.TransferConfirmEventArgs.Resume">
            <summary>
            Instructs the multi-file transfer to resume file transfer.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferConfirmEventArgs.Retry">
            <summary>
            Instructs the multi-file transfer to retry.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferConfirmEventArgs.Skip">
            <summary>
            Instructs the multi-file transfer to skip this item.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.Exception">
            <summary>
            Gets the exception which will be raised if the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NextAction"/> propety is set to <see cref="T:ComponentPro.IO.TransferConfirmNextActions">Cancel</see>, or a null reference if the issue does not contain an exception object.
            The <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.ConfirmReason"/> property contains further description.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.NewName">
            <summary>
            Gets or sets the new name for the currently processed file or directory. This new name cannot contain any directory separators.
            </summary>
            <remarks>
            If the currently selected <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NextAction"/> is set to Rename, this property has to be set; otherwise, it is ignored.
            </remarks>
            <value>The new name.</value>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.PossibleNextActions">
            <summary>
            Gets a mask of possible actions that can be selected to be performed.
            </summary>
            <remarks>
            <see cref="T:ComponentPro.IO.TransferConfirmNextActions">Cancel</see> can always be set.
            Use the binary 'AND' operator to determine whether a specific action is currently possible or simply call the <see cref="M:ComponentPro.IO.TransferConfirmEventArgs.CanPerform(ComponentPro.IO.TransferConfirmNextActions)"/> method. 
            </remarks>
            <value>Mask of possible actions.</value>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.NextAction">
            <summary>
            Gets or sets the currently selected next action. Specifies the operation to perform as the step of the multi-file transfer execution. 
            </summary>
            <value>The next action.</value>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.Message">
            <summary>
            Gets the detailed message.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.ConfirmReason">
            <summary>
            Gets the type of the error that furher describes the issue.
            </summary>
            <value>The issue.</value>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.ProgressFileItem">
            <summary>
            Gets the information of the currently processing item.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.SourceFileSystem">
            <summary>
            Gets the source file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.DestinationFileSystem">
            <summary>
            Gets the destination file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.SourceFileInfo">
            <summary>
            Gets the source file info object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.DestinationPath">
            <summary>
            Gets the path of the destination file path.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.DestinationFileInfo">
            <summary>
            Gets the destination file info object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.SourcePath">
            <summary>
            Gets or sets the path of the source file, or a null reference (Nothing in VB.NET) if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.LocalFileInfo">
            <summary>
            Gets the local file info.
            If the source file is a local file, this value equals to the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.SourceFileInfo"/> property, otherwise it equals to the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.DestinationFileInfo"/> property.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.RemoteFileInfo">
            <summary>
            Gets the remote file info.
            If the source file is a local file, this value equals to the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.DestinationFileInfo"/> property, otherwise it equals to the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.SourceFileInfo"/> property.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.LocalPath">
            <summary>
            Gets or sets the local path. 
            If the source file is a local file, this value equals to the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.SourcePath"/> property, otherwise it equals to the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.DestinationPath"/> property.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.RemotePath">
            <summary>
            Gets or sets the remote path.
            If the source file is a local file, this value equals to the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.DestinationPath"/> property, otherwise it equals to the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.SourcePath"/> property.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferConfirmNextActions">
            <summary>
            Defines the action to resolve the current issue detected using the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.FollowLink">
            <summary>
            Resolve and process the symbolic link.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.Overwrite">
            <summary>
            Overwrite target file with the same name.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.OverwriteFilesWithDifferentSizes">
            <summary>
            Overwrite target file with the same name if it has a different size.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.OverwriteOlderFiles">
            <summary>
            Overwrite target file with the same name if it is older than the source file.
            It is not recommended to use this action for remote file systems because modification dates are often misreported by SFTP and FTP servers. Instead, please select other action or handle the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event and choose either Overwrite or Skip action instead.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.Rename">
            <summary>
            Use different name specified in the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NewName"/> property as the new destination name. 
            The desired name must be set using the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NewName"/> property and it must not be empty or a null reference.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.Retry">
            <summary>
            Retry the current operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.Skip">
            <summary>
            Skip the current item. No actions will be performed on it.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.Cancel">
            <summary>
            Cancel the whole multi-file transfer and raise an exception. No other files will be transferred.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.ResumeFileTransfer">
            <summary>
            Resume file transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.OverwriteFilesWithDifferentChecksums">
            <summary>
            Overwrite target file with the same name if it has a different checksum.
            Only some remote FTP and SFTP support this option. ZIP, MemoryFileSystem and DiskFileSystem always support this option.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferFileOverwriteCondition">
            <summary>
            Defines the conditions for overwriting an existing file in a handler of the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferFileOverwriteCondition.None">
            <summary>
            Overwrite the existing file without any conditions.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferFileOverwriteCondition.SizeDiffers">
            <summary>
            Overwrite the existing file if its size differs from the source one's.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferFileOverwriteCondition.Older">
            <summary>
            Overwrite the existing file if its last write time is older than the source one's.
            It is not recommended to use this action for remote file systems because modification dates are often misreported by SFTP and FTP servers.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferFileOverwriteCondition.ChecksumDiffers">
            <summary>
            Overwrite the existing file if its checksum differs from the source one's.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferConfirmReason">
            <summary>
            Defines detailed specification of a problem that occurred during the file transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.DirectoryCreationFailed">
            <summary>
            Cannot create target directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.DirectoryStructureRetrievalFailed">
            <summary>
            Cannot access and list contents of the target directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.FileDeletionFailed">
            <summary>
            Cannot delete the target file. This is only available for multi-file operation methods.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.EmptyDirectoryDeletionFailed">
            <summary>
            Cannot delete the empty target directory. This is only available for multi-file operation methods.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.ItemMoveFailed">
            <summary>
            Cannot rename/move an item.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.FileTransferFailed">
            <summary>
            Cannot transfer file.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.FileAlreadyExists">
            <summary>
            A target file with the same name already exists.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.SymlinkDetected">
            <summary>
            A symbolic link was detected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.RecursiveSymlinkDetected">
            <summary>
            Detected a symbolic link which is probably a part of an infinite loop in the file system directory hierarchy.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.InvalidFileName">
            <summary>
            Name of the file is invalid on the target file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.CannotResolveSymlink">
            <summary>
            Cannot resolve the symlink, the link is corrupted or its target cannot be found.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.FileNoLongerFound">
            <summary>
            Cannot find the file which was found while retrieving file system hierarchy earlier.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.DirectoryNoLongerFound">
            <summary>
            Cannot find the directory which was found while retrieving file system hierarchy earlier.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.SymlinkNoLongerFound">
            <summary>
            Cannot find the link which was found while retrieving file system hierarchy earlier.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.SetFilePermissionsFailed">
            <summary>
            Cannot set file permissions.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.SetFileAttributesFailed">
            <summary>
            Cannot set file attributes.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.ChecksumCalculationFailed">
            <summary>
            Cannot calculate file checksum or checksum is not supported.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferOptions">
            <summary>
            Provides options to determine how files and directories will be transferred in a multi-file operation.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor(System.Boolean,System.Boolean,ComponentPro.OptionValue,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction,ComponentPro.IO.FileComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            </summary>
            <param name="buildTree">Indicates whether to retrieve the directory tree before transferring files. 
            By setting this property to <c>true</c>, the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalPercentage"/> property will be available.</param>
            <param name="recursive"><c>true</c> to indicate that the library will transfer files in the first level directory and all its subdirectories; otherwise, <c>false</c> to transfer files in the first level directory only.</param>
            <param name="createEmptyDirectory">Allow creating empty directories.</param>
            <param name="searchCondition">The search conditions to match against the files; or null reference for searching all files.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="comparer">Specifies a custom file comparer to compare source and destination files to determine whether to overwrite the existing target files.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor(System.Boolean,System.Boolean,ComponentPro.OptionValue,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            </summary>
            <param name="buildTree">Indicates whether to retrieve the directory tree before transferring files. 
            By setting this property to <c>true</c>, the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalPercentage"/> property will be available.</param>
            <param name="recursive"><c>true</c> to indicate that the library will transfer files in the first level directory and all its subdirectories; otherwise, <c>false</c> to transfer files in the first level directory only.</param>
            <param name="createEmptyDirectory">Allow creating empty directories.</param>
            <param name="searchCondition">The search conditions to match against the files; or null reference for searching all files.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor(ComponentPro.IO.SearchCondition,ComponentPro.IO.FileOverwriteMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            This constructor sets <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> to true, 
            <see cref="P:ComponentPro.IO.MultiFileOperationOptions.Recursive"/> to <c>true</c>, 
            <see cref="P:ComponentPro.IO.TransferOptions.CreateEmptyDirectories"/> to true, <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SymlinksResolveAction"/> to <see cref="F:ComponentPro.IO.SymlinksResolveAction.Skip"/> and <see cref="P:ComponentPro.IO.TransferOptions.Comparer"/> to null reference.
            </summary>
            <param name="searchCondition">The search conditions to match against the files; or null reference for searching all files.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            This constructor sets <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree">BuildDirectoryTree</see> to true, 
            <see cref="P:ComponentPro.IO.MultiFileOperationOptions.Recursive"/> to <c>true</c>, 
            <see cref="P:ComponentPro.IO.TransferOptions.CreateEmptyDirectories"/> to <c>true</c>, 
            <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SymlinksResolveAction"/> to <see cref="F:ComponentPro.IO.SymlinksResolveAction.Skip"/>, 
            and <see cref="P:ComponentPro.IO.TransferOptions.Comparer"/> to null reference.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.Clone">
            <summary>
            Creates a shallow copy of this option object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.Flatten">
            <summary>
            Gets or sets a value indicating whether to copy files to the destination base directory, without persisting the directory structure of the source files.
            For example: if "Dir1/File1.dat" and "Dir2/File2.dat" are the source files and "/RemoteDir" on an FTP server is the destination base directory, "File1.dat" and "File2.dat" 
            are uploaded to "/RemoteDir" and remote folder "Dir1" and "Dir2" are not created.
            </summary>
            <value><c>true</c> if flatten the output; <c>false</c> otherwise.</value>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.RecheckItemExistence">
            <summary>
            Gets or sets a value indicating whether to force checking whether the currently processing item still exists. If not, the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event is raised.
            </summary>
            <remarks>
            For example: If file "file1.dat" exists at the beginning of a multi-file transfer. However, for some reason, it's deleted by another program before transferring.
            The multi-file operation re-checks if the file still exists. If not it will be marked as skipped if this property is <c>true</c>, otherwise an error is thrown.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.CreateEmptyDirectories">
            <summary>
            Gets or sets a boolean value indicating whether to allow copying empty directories from the source file system to the destination file system. The default value is <see cref="F:ComponentPro.OptionValue.Auto"/> - the component automatically determines whether to create new empty directories. 
            For example, if the files to transfer are limited by a search pattern "*.cs", only the folders that have files with the ".cs" extension are created.
            <see cref="F:ComponentPro.OptionValue.Yes"/> value indicates that directories are always created on the target system regardless whether they are empty or containing contents; <see cref="F:ComponentPro.OptionValue.No"/> value indicates that empty directories will not be created on the target system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.FileOverwriteMode">
            <summary>
            Specifies action taken when the destination file already exists. The default value is <see cref="F:ComponentPro.IO.FileOverwriteMode.Overwrite"/>.
            For example, if <see cref="F:ComponentPro.IO.FileOverwriteMode.OverwriteFilesWithDifferentSizes"/> is used, existing files with the same names and different size will be overwritten.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.Comparer">
            <summary>
            Specifies a custom file comparer used to compare source and destination files to determine whether to overwrite an existing target file. It can only be used when the property <see cref="P:ComponentPro.IO.TransferOptions.FileOverwriteMode"/> of a transfer option object was set to <see cref="F:ComponentPro.IO.FileOverwriteMode.CustomCompare"/>.
            </summary>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileAttributesComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileLastWriteTimeComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileNameComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileNameComparerCaseSensitive"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileSizeComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileSizeComparerWithResumabilityCheck"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileContentComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileContentComparerWithResumabilityCheck"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileSha1ChecksumComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileCrcChecksumComparer"/>
            <seealso cref="P:ComponentPro.IO.FileComparers.FileMd5ChecksumComparer"/>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.PreferredChecksumType">
            <summary>
            Gets or sets the preferred checksum type used to compare checksums of a source file with a destination file when a target file with the same name exists.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.AutoSelectFallbackChecksumAlgorithm">
            <summary>
            Gets or sets a boolean value indicating whether to automatically select the best checksum algorithm when the <see cref="P:ComponentPro.IO.TransferOptions.PreferredChecksumType"/> algorithm is not available for either source or destination file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.TimeResolution">
            <summary>
            Gets or sets a value which specifies granularity for time comparisons if the <see cref="P:ComponentPro.IO.TransferOptions.FileOverwriteMode"/> property is <see cref="F:ComponentPro.IO.FileOverwriteMode.OverwriteOlderFiles"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.RenamingPattern">
            <summary>
            Gets or sets the pattern that is used to rename existing files if <see cref="P:ComponentPro.IO.TransferOptions.FileOverwriteMode"/> is set to <see cref="F:ComponentPro.IO.FileOverwriteMode.Rename"/>.
            When this property is a null reference and the <see cref="P:ComponentPro.IO.TransferOptions.FileOverwriteMode"/> is set to <see cref="F:ComponentPro.IO.TransferConfirmNextActions.Rename"/>, the value "{name}({num}).{ext}" is used as the new name pattern. 
            In the pattern, "{name}" represents name of file (e.g. "My file"), "{ext}" represents extensions of file (e.g. ".dat") and "{num}" represents an incremental number.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.MoveFiles">
            <summary>
            Gets or sets a boolean value indicating whether to move files from the source directory to the destination directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferOptions.DeleteEmptyDirectories">
            <summary>
            Gets or sets a boolean value indicating whether to delete empty directories when moving or transferring files and directories with <see cref="P:ComponentPro.IO.TransferOptions.MoveFiles"/> option enabled. The default value is <c>true</c> - empty directories are to be removed.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferQueueStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.TransferQueue.StateChanged"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferQueueStateChangedEventArgs.OldState">
            <summary>
            Gets the old state.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferQueueStateChangedEventArgs.State">
            <summary>
            Gets the new state.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferQueueState">
            <summary>
            Defines the transfer queue states.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferQueueState.Stopped">
            <summary>
            The queue was stopped.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferQueueState.Processing">
            <summary>
            The queue has started.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferQueueState.Completed">
            <summary>
            The queue completes.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferQueueState.Stopping">
            <summary>
            The queue is stopping.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferQueueItemProcessedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.Transferrer.ItemProcessed"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferQueueItemProcessedEventArgs.Item">
            <summary>
            Gets the processed item.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferQueue">
            <summary>
            Represents the transfer queue.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferQueue.OnStateChanged(ComponentPro.IO.TransferQueueStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.TransferQueue.StateChanged"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:ComponentPro.IO.TransferQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferQueue"/> with 3 simultaneous transfer threads.
            </summary>
            <remarks>
            The simultaneous transfer threads can be changed using the <see cref="P:ComponentPro.IO.TransferQueue.Threads"/> property.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.TransferQueue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferQueue"/> with the specified simultaneous transfer threads.
            </summary>
            <param name="threads">The number of simultaneous transfer threads.</param>
            <remarks>
            The simultaneous transfer threads can be changed using the <see cref="P:ComponentPro.IO.TransferQueue.Threads"/> property.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.TransferQueue.Dispose">
            <summary>
            Releases the used resources.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferQueue.Add(ComponentPro.IO.FileInfoBase,ComponentPro.IO.FileInfoBase,System.Boolean,System.Nullable{ComponentPro.IO.FileOverwriteMode},System.Int32)">
            <summary>
            Adds a file to the queue.
            </summary>
            <param name="sourceFileInfo">The source file info.</param>
            <param name="destFileInfo">The destination file info.</param>
            <param name="resume">Indicates whether to resume the file transfer.</param>
            <param name="fileExistsAction">Specifies the <see cref="T:ComponentPro.IO.FileOverwriteMode"/> on existing destination file, or a null reference to use the default behavior in the <see cref="P:ComponentPro.IO.TransferQueue.Options"/> property.</param>
            <param name="priority">The priority of the file.</param>
            <returns>A <see cref="T:ComponentPro.IO.ProgressFileItem"/> containing information of the newly added item.</returns>
        </member>
        <member name="M:ComponentPro.IO.TransferQueue.Start(System.Boolean)">
            <summary>
            Starts transferring files in the queue asynchronously.
            </summary>
            <param name="resumeTransfer">Indicates whether to resume transfer all files;
            If set to true, all incomplete files will be resumed;
            otherwise file transfers will be restarted.
            </param>
            <remarks>
            This method immediately returns control to the caller.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.TransferQueue.Wait(System.Boolean)">
            <summary>
            Waits until all threads are paused or completed.
            </summary>
            <param name="waitForCompletion"><c>true</c> to wait for all threads of the queue to complete; or <c>false</c> to wait for the threads to be completely paused.</param>
        </member>
        <member name="M:ComponentPro.IO.TransferQueue.Stop">
            <summary>
            Stops the queue.
            </summary>
            <remarks>
            This method aborts any transfers in progress.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.TransferQueue.TraceSource">
            <summary>
            Gets or sets the source object for all log messages generated by this object. If not set, the property returns the current object.
            </summary>
            <remarks>
            It is handy to set this property to a different object other than this object in some situation where all log messages should come from a single source.
            For example, in a build system, uploading files is just a child task of a main one, by assigning this property to the main task, 
            you can categorize all messages that come from the main task.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.TransferQueue.TraceListenerManager">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.IO.TransferQueue.TraceListenerManager"/> object to which the log messages generated by this object are sent. 
            If not set, the <see cref="F:ComponentPro.Diagnostics.XTrace.Default"/> trace listener manager is used. If this property is set to null, all messages from this object wont be logged.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.TransferQueue.StateChanged">
            <summary>
            Occurs when the state of the queue is changed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.TransferQueue.BrowsingThreadStateChanged">
            <summary>
            Occurs when the state of the transfer queue's browsing thread has been changed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferQueue.IsDisposed">
            <summary>
            Indicates whether the object was disposed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferQueue.Threads">
            <summary>
            Gets or sets the number of threads for simultaneous transfers.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferQueue.State">
            <summary>
            Gets the state of the queue.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferQueue.Options">
            <summary>
            Gets or sets the global transfer options.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferQueue.ReuseRemoteConnection">
            <summary>
            Gets or sets a boolean value indicating whether to reuse remote connection of the adding file's remote file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferQueue.Statistics">
            <summary>
            Gets the transfer statistics of the queue.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferQueue.IdleConnectionClosingTime">
            <summary>
            Gets or sets the amount of allowed time, in milliseconds, of an idle connection. When a connection is idle for more than the specified time, it will be closed.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferThreadInfo">
            <summary>
            Represents the transfer thread.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferThreadInfo.Pause">
            <summary>
            Pauses the thread. Current transfer will be canceled and will be resumed when calling the <see cref="M:ComponentPro.IO.TransferThreadInfo.Resume"/> method.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferThreadInfo.Stop">
            <summary>
            Stops the thread.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferThreadInfo.Resume">
            <summary>
            Resumes the thread that was paused by <see cref="M:ComponentPro.IO.TransferThreadInfo.Pause"/> method.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.TransferThreadInfo.StateChanged">
            <summary>
            Occurs when the state of the thread is changed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferThreadInfo.State">
            <summary>
            Gets or sets the thread's state.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferThreadInfo.Thread">
            <summary>
            Gets the <see cref="P:ComponentPro.IO.TransferThreadInfo.Thread"/> object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferThreadInfo.ThreadId">
            <summary>
            Gets the thread id.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferThreadInfo.Source">
            <summary>
            Gets the source file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferThreadInfo.Destination">
            <summary>
            Gets the destination file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferThreadInfo.Exceptions">
            <summary>
            Gets the last error.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferThreadInfo.CurrentItem">
            <summary>
            Gets the currently processing <see cref="T:ComponentPro.IO.ProgressFileItem"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferThreadStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.TransferThreadInfo.StateChanged"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferThreadStateChangedEventArgs.OldState">
            <summary>
            Gets the previous state.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferThreadStateChangedEventArgs.State">
            <summary>
            Gets the new state.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferState">
            <summary>
            Specifies the state of a file transfer.
            </summary>        
        </member>
        <member name="F:ComponentPro.IO.TransferState.None">
            <summary>
            No state spefcified.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.BuildingDirectoryStructure">
            <summary>
            Building directory structure. This state is available when the library is retrieving information of directory 
            structure before transferring or processing the directory contents. 
            When the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> option of a <see cref="T:ComponentPro.IO.TransferOptions"/> or <see cref="T:ComponentPro.IO.MultiFileOperationOptions"/> instance is set to <c>true</c>,
            the library retrieves the directory hierarchy before transferring or processing the directory contents.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartCopyingFile">
            <summary>
            The current file is about to be copied.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartUploadingFile">
            <summary>
            A file from another file system or content from a stream is about to upload/copy to the remote server - usually FTP, SFTP, or SCP. This field equals to <see cref="F:ComponentPro.IO.TransferState.StartStoringFile"/>.
            When the transfer state is <see cref="F:ComponentPro.IO.TransferState.StartUploadingFile"/>, 
            you can change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see>, 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">destination file path</see>, or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> uploading file in the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event handler.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartStoringFile">
            <summary>
            A file from another file system or content from a stream is about to added to this file system - Zip, RealTimeZip, Tar, Tgz, or Gzip. This field equals to <see cref="F:ComponentPro.IO.TransferState.StartUploadingFile"/>.
            When the transfer state is <see cref="F:ComponentPro.IO.TransferState.StartStoringFile"/>, you can change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see>, 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">destination file path</see>, or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> storing file in the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event handler.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartDownloadingFile">
            <summary>
            A remote file is about to be downloaded to another file system or a stream of data.
            When the transfer state is <see cref="F:ComponentPro.IO.TransferState.StartDownloadingFile"/>, you can change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see>, 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">destination file path</see>, or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> downloading file in the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event handler.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartExtractingFile">
            <summary>
            ZIP File system is about to extract a file to another file system or a stream of data. This field equals to <see cref="F:ComponentPro.IO.TransferState.StartDownloadingFile"/>.
            When the transfer state is <see cref="F:ComponentPro.IO.TransferState.StartExtractingFile"/>, you can change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see>, 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">destination file path</see>, or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> extracting file in the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event handler.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartComparingFile">
            <summary>
            The current file is about to be compared with another one in a multi-file transfer or synchronization process.
            This state is available when file comparer, specified in <see cref="P:ComponentPro.IO.TransferOptions.Comparer"/> of the <see cref="T:ComponentPro.IO.TransferOptions"/> class 
            or <see cref="P:ComponentPro.IO.QuickSyncOptions.Comparer"/> of the <see cref="T:ComponentPro.IO.QuickSyncOptions"/> class, is an instance of a class that inherits the <see cref="T:ComponentPro.IO.IoFileComparer"/> class 
            - <see cref="T:ComponentPro.IO.FileContentComparer"/> or <see cref="T:ComponentPro.IO.FileChecksumComparer"/>.
            A folder synchronization is initiated by calling the <see cref="O:ComponentPro.IO.FileSystem.QuickSynchronize"/> or <see cref="O:ComponentPro.IO.FileSystem.QuickSynchronizeAsync"/> method.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.MovingItem">
            <summary>
            A file or directory is being moved while moving files on the same system with <see cref="P:ComponentPro.IO.TransferOptions.MoveFiles"/> set to <c>true</c>.
            When the transfer state is <see cref="F:ComponentPro.IO.TransferState.MovingItem"/>, you can change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see> and 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">destination file path</see> or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> moving the item in the <see cref="E:ComponentPro.IO.FileSystem.Progress">Progress</see> event handler.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.CopyingDirectory">
            <summary>
            A directory is being copied. You can skip copying the directory by setting the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip"/> property to <c>true</c> or 
            cancel the whole process by calling the <see cref="O:ComponentPro.IO.FileSystem.Cancel"/> methods.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.CreatingDirectory">
            <summary>
            A directory is being created. You cannot change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see> and 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">destination file path</see>. 
            You can only <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> creating an empty directory with this transfer state.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.SettingFilePermission">
            <summary>
            Permissions of a file or directory are about to be set.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.SettingFileAttribute">
            <summary>
            Attributes of a file or directory are about to be set.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Copying">
            <summary>
            The current file is being copied.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Uploading">
            <summary>
            A file or content from a stream is being uploaded to the remote server - usually FTP, SFTP, or SCP. This field equals to <see cref="F:ComponentPro.IO.TransferState.Storing"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Storing">
            <summary>
            A file or content from a stream is being stored/added to this file system - usually Zip, RealTimeZip, Tar, Tgz, or Gzip. This field equals to <see cref="F:ComponentPro.IO.TransferState.Uploading"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Downloading">
            <summary>
            A remote file is being downloaded to another file system or a stream of data. This field equals to <see cref="F:ComponentPro.IO.TransferState.Copying"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Extracting">
            <summary>
            ZIP file system is extracting a file to another file system or a stream of data. This field equals to <see cref="F:ComponentPro.IO.TransferState.Copying"/> and <see cref="F:ComponentPro.IO.TransferState.Downloading"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Comparing">
            <summary>
            The current file is being compared with another one.
            This state is available when a file comparer, specified in 
            <see cref="P:ComponentPro.IO.TransferOptions.Comparer"/> of the <see cref="T:ComponentPro.IO.TransferOptions"/> class 
            or <see cref="P:ComponentPro.IO.QuickSyncOptions.Comparer"/> of the <see cref="T:ComponentPro.IO.QuickSyncOptions"/> class, 
            is an instance of a class that inherits the <see cref="T:ComponentPro.IO.IoFileComparer"/> class 
            - usually <see cref="T:ComponentPro.IO.FileContentComparer"/> or <see cref="T:ComponentPro.IO.FileChecksumComparer"/>.
            If the transfer state is <see cref="F:ComponentPro.IO.TransferState.Comparing"/>, the file is being compared with another one in a multi-file transfer or synchronization process.
            A folder synchronization is initiated by calling the <see cref="O:ComponentPro.IO.FileSystem.QuickSynchronize"/> or <see cref="O:ComponentPro.IO.FileSystem.QuickSynchronizeAsync"/> method.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DeletingFile">
            <summary>
            The current file is being deleted.
            When the transfer state is <see cref="F:ComponentPro.IO.TransferState.DeletingFile"/>, you can change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see> or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> deleting file in the <see cref="E:ComponentPro.IO.FileSystem.Progress">Progress</see> event handler.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DeletingDirectory">
            <summary>
            The current directory is being deleted.
            When the transfer state is <see cref="F:ComponentPro.IO.TransferState.DeletingDirectory"/>, you can change the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see> or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> deleting file in the <see cref="E:ComponentPro.IO.FileSystem.Progress">Progress</see> event handler.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DirectoryStructureBuilt">
            <summary>
            Directory structure has been built and the file system is ready to process (transfer, delete, or set attributes) files and directories.
            When the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.BuildDirectoryTree"/> option of a <see cref="T:ComponentPro.IO.TransferOptions"/> or <see cref="T:ComponentPro.IO.MultiFileOperationOptions"/> instance is set to <c>true</c>,
            the library retrieves the directory hierarchy before transferring or processing the directory contents.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileCopied">
            <summary>
            The current file copy operation has completed.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileUploaded">
            <summary>
            Upload completed. This field equals to <see cref="F:ComponentPro.IO.TransferState.FileStored"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileStored">
            <summary>
            File has been stored. This field equals to <see cref="F:ComponentPro.IO.TransferState.FileUploaded"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileDownloaded">
            <summary>
            Download completed. This field equals to <see cref="F:ComponentPro.IO.TransferState.FileCopied"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileExtracted">
            <summary>
            Archive item has been extracted successfullly. This field equals to <see cref="F:ComponentPro.IO.TransferState.FileDownloaded"/> and <see cref="F:ComponentPro.IO.TransferState.FileCopied"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileCompared">
            <summary>
            The current file has been compared in a multi-file transfer or synchronization process.
            This state is available when file comparer, specified in <see cref="P:ComponentPro.IO.TransferOptions.Comparer"/> of the <see cref="T:ComponentPro.IO.TransferOptions"/> class 
            or <see cref="P:ComponentPro.IO.QuickSyncOptions.Comparer"/> of the <see cref="T:ComponentPro.IO.QuickSyncOptions"/> class, is an instance of a class that inherits the <see cref="T:ComponentPro.IO.IoFileComparer"/> class 
            - <see cref="T:ComponentPro.IO.FileContentComparer"/> or <see cref="T:ComponentPro.IO.FileChecksumComparer"/>.
            A folder synchronization is initiated by calling the <see cref="O:ComponentPro.IO.FileSystem.QuickSynchronize"/> or <see cref="O:ComponentPro.IO.FileSystem.QuickSynchronizeAsync"/> method.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DirectoryCreated">
            <summary>
            An empty directory has been created successfully or the destination directory already exists.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileDeleted">
            <summary>
            A file has been deleted successfully.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DirectoryDeleted">
            <summary>
            A directory has been deleted successfully.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.ItemMoved">
            <summary>
            A file or directory has been moved while moving files on the same system with <see cref="P:ComponentPro.IO.TransferOptions.MoveFiles"/> set to <c>true</c>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FilePermissionSet">
            <summary>
            File or directory permissions have been set.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileAttributeSet">
            <summary>
            File or directory attributes have been set.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DirectoryStructureRetrievalFailed">
            <summary>
            Failed to retrieve the directory hierarchy or user has canceled the operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileCopyFailed">
            <summary>
            Failed to copy file.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileUploadFailed">
            <summary>
            Failed to store the file or user has canceled the operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileStoreFailed">
            <summary>
            Failed to store the file or user has canceled the operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileDownloadFailed">
            <summary>
            Failed to download the file or user has canceled the operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileExtractFailed">
            <summary>
            Failed to extract the file or user has canceled the operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileDeletionFailed">
            <summary>
            Failed to delete the file or user has canceled the operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DirectoryDeletionFailed">
            <summary>
            Failed to delete the directory or user has canceled the operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DirectoryCreationFailed">
            <summary>
            Failed to create the directory or user has canceled the operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.ItemMoveFailed">
            <summary>
            Failed to move the item or user has canceled the operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.SetFilePermissionFailed">
            <summary>
            Failed to set file or directory permissions.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.SetFileAttributeFailed">
            <summary>
            Failed to set file or directory attributes.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.ItemSkipped">
            <summary>
            The operation on the current file or directory has been skipped.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.MultiFileOperationCompleted">
            <summary>
            Indicates a multi-file operation has completed.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Canceled">
            <summary>
            The transfer of the item was canceled.
            </summary>
        </member>
    </members>
</doc>
